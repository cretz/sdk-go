// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: child_workflow.proto

package coresdk_child_workflow

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	v1 "go.temporal.io/api/failure/v1"
	commonpb "go.temporal.io/sdk/sdkcore/internal/ffi/corepb/commonpb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//*
// Used by the service to determine the fate of a child workflow
// in case its parent is closed.
type ParentClosePolicy int32

const (
	//* Let's the server set the default.
	PARENT_CLOSE_POLICY_UNSPECIFIED ParentClosePolicy = 0
	//* Terminate means terminating the child workflow.
	PARENT_CLOSE_POLICY_TERMINATE ParentClosePolicy = 1
	//* Abandon means not doing anything on the child workflow.
	PARENT_CLOSE_POLICY_ABANDON ParentClosePolicy = 2
	//* Cancel means requesting cancellation on the child workflow.
	PARENT_CLOSE_POLICY_REQUEST_CANCEL ParentClosePolicy = 3
)

var ParentClosePolicy_name = map[int32]string{
	0: "PARENT_CLOSE_POLICY_UNSPECIFIED",
	1: "PARENT_CLOSE_POLICY_TERMINATE",
	2: "PARENT_CLOSE_POLICY_ABANDON",
	3: "PARENT_CLOSE_POLICY_REQUEST_CANCEL",
}

var ParentClosePolicy_value = map[string]int32{
	"PARENT_CLOSE_POLICY_UNSPECIFIED":    0,
	"PARENT_CLOSE_POLICY_TERMINATE":      1,
	"PARENT_CLOSE_POLICY_ABANDON":        2,
	"PARENT_CLOSE_POLICY_REQUEST_CANCEL": 3,
}

func (ParentClosePolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ec0e153fd945082, []int{0}
}

//* Possible causes of failure to start a child workflow
type StartChildWorkflowExecutionFailedCause int32

const (
	START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED             StartChildWorkflowExecutionFailedCause = 0
	START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_WORKFLOW_ALREADY_EXISTS StartChildWorkflowExecutionFailedCause = 1
)

var StartChildWorkflowExecutionFailedCause_name = map[int32]string{
	0: "START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED",
	1: "START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_WORKFLOW_ALREADY_EXISTS",
}

var StartChildWorkflowExecutionFailedCause_value = map[string]int32{
	"START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED":             0,
	"START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_WORKFLOW_ALREADY_EXISTS": 1,
}

func (StartChildWorkflowExecutionFailedCause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ec0e153fd945082, []int{1}
}

//*
// Controls at which point to report back to lang when a child workflow is cancelled
type ChildWorkflowCancellationType int32

const (
	//* Do not request cancellation of the child workflow if already scheduled
	ABANDON ChildWorkflowCancellationType = 0
	//* Initiate a cancellation request and immediately report cancellation to the parent.
	TRY_CANCEL ChildWorkflowCancellationType = 1
	//* Wait for child cancellation completion.
	WAIT_CANCELLATION_COMPLETED ChildWorkflowCancellationType = 2
	//* Request cancellation of the child and wait for confirmation that the request was received.
	WAIT_CANCELLATION_REQUESTED ChildWorkflowCancellationType = 3
)

var ChildWorkflowCancellationType_name = map[int32]string{
	0: "ABANDON",
	1: "TRY_CANCEL",
	2: "WAIT_CANCELLATION_COMPLETED",
	3: "WAIT_CANCELLATION_REQUESTED",
}

var ChildWorkflowCancellationType_value = map[string]int32{
	"ABANDON":                     0,
	"TRY_CANCEL":                  1,
	"WAIT_CANCELLATION_COMPLETED": 2,
	"WAIT_CANCELLATION_REQUESTED": 3,
}

func (ChildWorkflowCancellationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ec0e153fd945082, []int{2}
}

//*
// Used by core to resolve child workflow executions.
type ChildWorkflowResult struct {
	// Types that are valid to be assigned to Status:
	//	*ChildWorkflowResult_Completed
	//	*ChildWorkflowResult_Failed
	//	*ChildWorkflowResult_Cancelled
	Status isChildWorkflowResult_Status `protobuf_oneof:"status"`
}

func (m *ChildWorkflowResult) Reset()      { *m = ChildWorkflowResult{} }
func (*ChildWorkflowResult) ProtoMessage() {}
func (*ChildWorkflowResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ec0e153fd945082, []int{0}
}
func (m *ChildWorkflowResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChildWorkflowResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChildWorkflowResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChildWorkflowResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChildWorkflowResult.Merge(m, src)
}
func (m *ChildWorkflowResult) XXX_Size() int {
	return m.Size()
}
func (m *ChildWorkflowResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ChildWorkflowResult.DiscardUnknown(m)
}

var xxx_messageInfo_ChildWorkflowResult proto.InternalMessageInfo

type isChildWorkflowResult_Status interface {
	isChildWorkflowResult_Status()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ChildWorkflowResult_Completed struct {
	Completed *Success `protobuf:"bytes,1,opt,name=completed,proto3,oneof" json:"completed,omitempty"`
}
type ChildWorkflowResult_Failed struct {
	Failed *Failure `protobuf:"bytes,2,opt,name=failed,proto3,oneof" json:"failed,omitempty"`
}
type ChildWorkflowResult_Cancelled struct {
	Cancelled *Cancellation `protobuf:"bytes,3,opt,name=cancelled,proto3,oneof" json:"cancelled,omitempty"`
}

func (*ChildWorkflowResult_Completed) isChildWorkflowResult_Status() {}
func (*ChildWorkflowResult_Failed) isChildWorkflowResult_Status()    {}
func (*ChildWorkflowResult_Cancelled) isChildWorkflowResult_Status() {}

func (m *ChildWorkflowResult) GetStatus() isChildWorkflowResult_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ChildWorkflowResult) GetCompleted() *Success {
	if x, ok := m.GetStatus().(*ChildWorkflowResult_Completed); ok {
		return x.Completed
	}
	return nil
}

func (m *ChildWorkflowResult) GetFailed() *Failure {
	if x, ok := m.GetStatus().(*ChildWorkflowResult_Failed); ok {
		return x.Failed
	}
	return nil
}

func (m *ChildWorkflowResult) GetCancelled() *Cancellation {
	if x, ok := m.GetStatus().(*ChildWorkflowResult_Cancelled); ok {
		return x.Cancelled
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChildWorkflowResult) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChildWorkflowResult_Completed)(nil),
		(*ChildWorkflowResult_Failed)(nil),
		(*ChildWorkflowResult_Cancelled)(nil),
	}
}

//*
// Used in ChildWorkflowResult to report successful completion.
type Success struct {
	Result *commonpb.Payload `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *Success) Reset()      { *m = Success{} }
func (*Success) ProtoMessage() {}
func (*Success) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ec0e153fd945082, []int{1}
}
func (m *Success) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Success) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Success.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Success) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Success.Merge(m, src)
}
func (m *Success) XXX_Size() int {
	return m.Size()
}
func (m *Success) XXX_DiscardUnknown() {
	xxx_messageInfo_Success.DiscardUnknown(m)
}

var xxx_messageInfo_Success proto.InternalMessageInfo

func (m *Success) GetResult() *commonpb.Payload {
	if m != nil {
		return m.Result
	}
	return nil
}

//*
// Used in ChildWorkflowResult to report non successful outcomes such as
// application failures, timeouts, terminations, and cancellations.
type Failure struct {
	Failure *v1.Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (m *Failure) Reset()      { *m = Failure{} }
func (*Failure) ProtoMessage() {}
func (*Failure) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ec0e153fd945082, []int{2}
}
func (m *Failure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Failure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Failure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Failure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Failure.Merge(m, src)
}
func (m *Failure) XXX_Size() int {
	return m.Size()
}
func (m *Failure) XXX_DiscardUnknown() {
	xxx_messageInfo_Failure.DiscardUnknown(m)
}

var xxx_messageInfo_Failure proto.InternalMessageInfo

func (m *Failure) GetFailure() *v1.Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

//*
// Used in ChildWorkflowResult to report cancellation.
// Failure should be ChildWorkflowFailure with a CanceledFailure cause.
type Cancellation struct {
	Failure *v1.Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (m *Cancellation) Reset()      { *m = Cancellation{} }
func (*Cancellation) ProtoMessage() {}
func (*Cancellation) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ec0e153fd945082, []int{3}
}
func (m *Cancellation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cancellation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cancellation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cancellation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cancellation.Merge(m, src)
}
func (m *Cancellation) XXX_Size() int {
	return m.Size()
}
func (m *Cancellation) XXX_DiscardUnknown() {
	xxx_messageInfo_Cancellation.DiscardUnknown(m)
}

var xxx_messageInfo_Cancellation proto.InternalMessageInfo

func (m *Cancellation) GetFailure() *v1.Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func init() {
	proto.RegisterEnum("coresdk.child_workflow.ParentClosePolicy", ParentClosePolicy_name, ParentClosePolicy_value)
	proto.RegisterEnum("coresdk.child_workflow.StartChildWorkflowExecutionFailedCause", StartChildWorkflowExecutionFailedCause_name, StartChildWorkflowExecutionFailedCause_value)
	proto.RegisterEnum("coresdk.child_workflow.ChildWorkflowCancellationType", ChildWorkflowCancellationType_name, ChildWorkflowCancellationType_value)
	proto.RegisterType((*ChildWorkflowResult)(nil), "coresdk.child_workflow.ChildWorkflowResult")
	proto.RegisterType((*Success)(nil), "coresdk.child_workflow.Success")
	proto.RegisterType((*Failure)(nil), "coresdk.child_workflow.Failure")
	proto.RegisterType((*Cancellation)(nil), "coresdk.child_workflow.Cancellation")
}

func init() { proto.RegisterFile("child_workflow.proto", fileDescriptor_7ec0e153fd945082) }

var fileDescriptor_7ec0e153fd945082 = []byte{
	// 595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xc1, 0x4e, 0xd4, 0x40,
	0x1c, 0xc6, 0x3b, 0x90, 0xec, 0xca, 0x40, 0x4c, 0x1d, 0x8d, 0x12, 0x0c, 0x03, 0xae, 0x4a, 0x0c,
	0x87, 0x6e, 0x50, 0x13, 0x23, 0x1e, 0x4c, 0x99, 0xce, 0x4a, 0xb5, 0xb4, 0x75, 0xda, 0xcd, 0xc2,
	0xa9, 0x19, 0xbb, 0x83, 0x6e, 0xe8, 0xee, 0x6c, 0xda, 0x2e, 0xc8, 0xc5, 0xf8, 0x08, 0x3e, 0x84,
	0x07, 0x4f, 0x3e, 0x87, 0x47, 0x8e, 0x1c, 0xdd, 0x72, 0xf1, 0xc8, 0x23, 0x98, 0xed, 0xb6, 0xc2,
	0x9a, 0xd5, 0xc4, 0x78, 0xfe, 0x7f, 0xbf, 0xff, 0xff, 0xfb, 0xbe, 0x69, 0xe1, 0x8d, 0xf0, 0x5d,
	0x27, 0x6a, 0x07, 0x47, 0x32, 0x3e, 0xd8, 0x8f, 0xe4, 0x91, 0xd6, 0x8f, 0x65, 0x2a, 0xd1, 0xcd,
	0x50, 0xc6, 0x22, 0x69, 0x1f, 0x68, 0x93, 0xd3, 0xa5, 0x85, 0x50, 0x76, 0xbb, 0xb2, 0x37, 0x56,
	0x2d, 0xdd, 0x4f, 0x45, 0xb7, 0x2f, 0x63, 0x1e, 0xd5, 0x79, 0xbf, 0x53, 0xdf, 0xe7, 0x9d, 0x68,
	0x10, 0x8b, 0xfa, 0xe1, 0x46, 0xbd, 0x2b, 0x92, 0x84, 0xbf, 0x15, 0x63, 0x59, 0x6d, 0x08, 0xe0,
	0x75, 0x32, 0xda, 0xd3, 0x2a, 0xd6, 0x30, 0x91, 0x0c, 0xa2, 0x14, 0x3d, 0x87, 0x73, 0xa1, 0xec,
	0xf6, 0x23, 0x91, 0x8a, 0xf6, 0x22, 0x58, 0x05, 0x0f, 0xe6, 0x1f, 0xae, 0x68, 0xd3, 0x0f, 0x6b,
	0xde, 0x20, 0x0c, 0x45, 0x92, 0x6c, 0x2b, 0xec, 0x82, 0x41, 0x4f, 0x61, 0x65, 0x74, 0x54, 0xb4,
	0x17, 0x67, 0xfe, 0x4e, 0x37, 0xc6, 0xd6, 0xb6, 0x15, 0x56, 0x00, 0xc8, 0x80, 0x73, 0x21, 0xef,
	0x85, 0x22, 0x1a, 0xd1, 0xb3, 0x39, 0x7d, 0xef, 0x4f, 0x34, 0x19, 0x0b, 0x79, 0xda, 0x91, 0xbd,
	0xdc, 0x40, 0x09, 0x6e, 0x5d, 0x81, 0x95, 0x24, 0xe5, 0xe9, 0x20, 0xa9, 0x6d, 0xc2, 0x6a, 0x61,
	0x11, 0xd5, 0x61, 0x25, 0xce, 0x03, 0x16, 0x99, 0x6e, 0x5d, 0xec, 0x1d, 0x97, 0xe7, 0xf2, 0xe3,
	0x48, 0xf2, 0x36, 0x2b, 0x64, 0x35, 0x0a, 0xab, 0x85, 0x41, 0xb4, 0x09, 0xab, 0x45, 0x8d, 0x05,
	0xbc, 0xaa, 0x95, 0x1d, 0x6b, 0xbc, 0xdf, 0xd1, 0x8a, 0xa1, 0x76, 0xb8, 0x51, 0x66, 0x62, 0x25,
	0x50, 0x7b, 0x09, 0x17, 0x2e, 0x3b, 0xfd, 0x9f, 0x5d, 0xeb, 0x9f, 0x01, 0xbc, 0xe6, 0xf2, 0x58,
	0xf4, 0x52, 0x12, 0xc9, 0x44, 0xb8, 0x32, 0xea, 0x84, 0xc7, 0xe8, 0x2e, 0x5c, 0x71, 0x75, 0x46,
	0x6d, 0x3f, 0x20, 0x96, 0xe3, 0xd1, 0xc0, 0x75, 0x2c, 0x93, 0xec, 0x05, 0x4d, 0xdb, 0x73, 0x29,
	0x31, 0x1b, 0x26, 0x35, 0x54, 0x05, 0xdd, 0x81, 0xcb, 0xd3, 0x44, 0x3e, 0x65, 0x3b, 0xa6, 0xad,
	0xfb, 0x54, 0x05, 0x68, 0x05, 0xde, 0x9e, 0x26, 0xd1, 0xb7, 0x74, 0xdb, 0x70, 0x6c, 0x75, 0x06,
	0xad, 0xc1, 0xda, 0x34, 0x01, 0xa3, 0xaf, 0x9b, 0xd4, 0xf3, 0x03, 0xa2, 0xdb, 0x84, 0x5a, 0xea,
	0xec, 0xfa, 0x57, 0x00, 0xd7, 0xbc, 0x94, 0xc7, 0xe9, 0xc4, 0xe7, 0x45, 0xdf, 0x8b, 0x70, 0x30,
	0xaa, 0xa0, 0x91, 0xbf, 0x35, 0xe1, 0x83, 0x44, 0xa0, 0x67, 0xf0, 0x89, 0xe7, 0xeb, 0xcc, 0x0f,
	0xc8, 0xb6, 0x69, 0x19, 0x41, 0xcb, 0x61, 0xaf, 0x1a, 0x96, 0xd3, 0x0a, 0xe8, 0x2e, 0x25, 0x4d,
	0xdf, 0x74, 0xec, 0xa0, 0xa1, 0x9b, 0x16, 0x35, 0x02, 0xa2, 0x37, 0x3d, 0xfa, 0x5b, 0xa6, 0x17,
	0x90, 0xfc, 0x0b, 0xfc, 0x6b, 0xae, 0x5b, 0x8c, 0xea, 0xc6, 0x5e, 0x40, 0x77, 0x4d, 0xcf, 0xf7,
	0x54, 0xb0, 0xfe, 0x01, 0x2e, 0x4f, 0x58, 0xbd, 0xfc, 0x60, 0xfe, 0x71, 0x5f, 0xa0, 0x79, 0x58,
	0x2d, 0x6b, 0x50, 0xd0, 0x55, 0x08, 0x7d, 0xb6, 0x57, 0xc6, 0xcd, 0x7b, 0x6b, 0xe9, 0x66, 0x99,
	0xdf, 0xd2, 0xf3, 0xcb, 0xc4, 0xd9, 0x71, 0x2d, 0xea, 0x53, 0x43, 0x9d, 0x99, 0x2e, 0x28, 0x5a,
	0xa3, 0x86, 0x3a, 0xbb, 0xf5, 0xf8, 0x64, 0x88, 0x95, 0xd3, 0x21, 0x56, 0xce, 0x87, 0x18, 0x7c,
	0xcc, 0x30, 0xf8, 0x92, 0x61, 0xf0, 0x2d, 0xc3, 0xe0, 0x24, 0xc3, 0xe0, 0x7b, 0x86, 0xc1, 0x8f,
	0x0c, 0x2b, 0xe7, 0x19, 0x06, 0x9f, 0xce, 0xb0, 0x72, 0x72, 0x86, 0x95, 0xd3, 0x33, 0xac, 0xbc,
	0xa9, 0xe4, 0xff, 0xf1, 0xa3, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x78, 0x59, 0xc6, 0x2c,
	0x04, 0x00, 0x00,
}

func (x ParentClosePolicy) String() string {
	s, ok := ParentClosePolicy_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x StartChildWorkflowExecutionFailedCause) String() string {
	s, ok := StartChildWorkflowExecutionFailedCause_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ChildWorkflowCancellationType) String() string {
	s, ok := ChildWorkflowCancellationType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ChildWorkflowResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChildWorkflowResult)
	if !ok {
		that2, ok := that.(ChildWorkflowResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Status == nil {
		if this.Status != nil {
			return false
		}
	} else if this.Status == nil {
		return false
	} else if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *ChildWorkflowResult_Completed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChildWorkflowResult_Completed)
	if !ok {
		that2, ok := that.(ChildWorkflowResult_Completed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Completed.Equal(that1.Completed) {
		return false
	}
	return true
}
func (this *ChildWorkflowResult_Failed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChildWorkflowResult_Failed)
	if !ok {
		that2, ok := that.(ChildWorkflowResult_Failed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failed.Equal(that1.Failed) {
		return false
	}
	return true
}
func (this *ChildWorkflowResult_Cancelled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChildWorkflowResult_Cancelled)
	if !ok {
		that2, ok := that.(ChildWorkflowResult_Cancelled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cancelled.Equal(that1.Cancelled) {
		return false
	}
	return true
}
func (this *Success) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Success)
	if !ok {
		that2, ok := that.(Success)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *Failure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Failure)
	if !ok {
		that2, ok := that.(Failure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	return true
}
func (this *Cancellation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cancellation)
	if !ok {
		that2, ok := that.(Cancellation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	return true
}
func (this *ChildWorkflowResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&coresdk_child_workflow.ChildWorkflowResult{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChildWorkflowResult_Completed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_child_workflow.ChildWorkflowResult_Completed{` +
		`Completed:` + fmt.Sprintf("%#v", this.Completed) + `}`}, ", ")
	return s
}
func (this *ChildWorkflowResult_Failed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_child_workflow.ChildWorkflowResult_Failed{` +
		`Failed:` + fmt.Sprintf("%#v", this.Failed) + `}`}, ", ")
	return s
}
func (this *ChildWorkflowResult_Cancelled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_child_workflow.ChildWorkflowResult_Cancelled{` +
		`Cancelled:` + fmt.Sprintf("%#v", this.Cancelled) + `}`}, ", ")
	return s
}
func (this *Success) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_child_workflow.Success{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Failure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_child_workflow.Failure{")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Cancellation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_child_workflow.Cancellation{")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringChildWorkflow(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ChildWorkflowResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildWorkflowResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildWorkflowResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size := m.Status.Size()
			i -= size
			if _, err := m.Status.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChildWorkflowResult_Completed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildWorkflowResult_Completed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Completed != nil {
		{
			size, err := m.Completed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChildWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ChildWorkflowResult_Failed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildWorkflowResult_Failed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Failed != nil {
		{
			size, err := m.Failed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChildWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ChildWorkflowResult_Cancelled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildWorkflowResult_Cancelled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Cancelled != nil {
		{
			size, err := m.Cancelled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChildWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Success) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Success) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Success) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChildWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Failure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Failure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChildWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Cancellation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cancellation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cancellation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChildWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintChildWorkflow(dAtA []byte, offset int, v uint64) int {
	offset -= sovChildWorkflow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChildWorkflowResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		n += m.Status.Size()
	}
	return n
}

func (m *ChildWorkflowResult_Completed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Completed != nil {
		l = m.Completed.Size()
		n += 1 + l + sovChildWorkflow(uint64(l))
	}
	return n
}
func (m *ChildWorkflowResult_Failed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failed != nil {
		l = m.Failed.Size()
		n += 1 + l + sovChildWorkflow(uint64(l))
	}
	return n
}
func (m *ChildWorkflowResult_Cancelled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cancelled != nil {
		l = m.Cancelled.Size()
		n += 1 + l + sovChildWorkflow(uint64(l))
	}
	return n
}
func (m *Success) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovChildWorkflow(uint64(l))
	}
	return n
}

func (m *Failure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovChildWorkflow(uint64(l))
	}
	return n
}

func (m *Cancellation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovChildWorkflow(uint64(l))
	}
	return n
}

func sovChildWorkflow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChildWorkflow(x uint64) (n int) {
	return sovChildWorkflow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ChildWorkflowResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChildWorkflowResult{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChildWorkflowResult_Completed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChildWorkflowResult_Completed{`,
		`Completed:` + strings.Replace(fmt.Sprintf("%v", this.Completed), "Success", "Success", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChildWorkflowResult_Failed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChildWorkflowResult_Failed{`,
		`Failed:` + strings.Replace(fmt.Sprintf("%v", this.Failed), "Failure", "Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChildWorkflowResult_Cancelled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChildWorkflowResult_Cancelled{`,
		`Cancelled:` + strings.Replace(fmt.Sprintf("%v", this.Cancelled), "Cancellation", "Cancellation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Success) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Success{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "Payload", "commonpb.Payload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Failure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Failure{`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "v1.Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cancellation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cancellation{`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "v1.Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringChildWorkflow(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ChildWorkflowResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChildWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildWorkflowResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildWorkflowResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChildWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChildWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChildWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Success{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &ChildWorkflowResult_Completed{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChildWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChildWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChildWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Failure{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &ChildWorkflowResult_Failed{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancelled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChildWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChildWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChildWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Cancellation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &ChildWorkflowResult_Cancelled{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChildWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChildWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Success) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChildWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Success: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Success: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChildWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChildWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChildWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &commonpb.Payload{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChildWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChildWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Failure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChildWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Failure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Failure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChildWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChildWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChildWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &v1.Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChildWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChildWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cancellation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChildWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cancellation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cancellation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChildWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChildWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChildWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &v1.Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChildWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChildWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChildWorkflow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChildWorkflow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChildWorkflow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChildWorkflow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChildWorkflow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChildWorkflow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChildWorkflow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChildWorkflow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChildWorkflow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChildWorkflow = fmt.Errorf("proto: unexpected end of group")
)
