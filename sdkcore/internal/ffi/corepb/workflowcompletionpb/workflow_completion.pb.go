// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: workflow_completion.proto

package coresdk_workflow_completion

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	v1 "go.temporal.io/api/failure/v1"
	_ "go.temporal.io/sdk/sdkcore/internal/ffi/corepb/commonpb"
	workflowcommandspb "go.temporal.io/sdk/sdkcore/internal/ffi/corepb/workflowcommandspb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

/// Result of a single workflow activation, reported from lang to core
type WFActivationCompletion struct {
	// The task queue the workflow activation you are completing originated from
	TaskQueue string `protobuf:"bytes,1,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// The run id from the workflow activation you are completing
	RunId string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Types that are valid to be assigned to Status:
	//	*WFActivationCompletion_Successful
	//	*WFActivationCompletion_Failed
	Status isWFActivationCompletion_Status `protobuf_oneof:"status"`
}

func (m *WFActivationCompletion) Reset()      { *m = WFActivationCompletion{} }
func (*WFActivationCompletion) ProtoMessage() {}
func (*WFActivationCompletion) Descriptor() ([]byte, []int) {
	return fileDescriptor_f037412b9927842e, []int{0}
}
func (m *WFActivationCompletion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WFActivationCompletion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WFActivationCompletion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WFActivationCompletion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WFActivationCompletion.Merge(m, src)
}
func (m *WFActivationCompletion) XXX_Size() int {
	return m.Size()
}
func (m *WFActivationCompletion) XXX_DiscardUnknown() {
	xxx_messageInfo_WFActivationCompletion.DiscardUnknown(m)
}

var xxx_messageInfo_WFActivationCompletion proto.InternalMessageInfo

type isWFActivationCompletion_Status interface {
	isWFActivationCompletion_Status()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WFActivationCompletion_Successful struct {
	Successful *Success `protobuf:"bytes,3,opt,name=successful,proto3,oneof" json:"successful,omitempty"`
}
type WFActivationCompletion_Failed struct {
	Failed *Failure `protobuf:"bytes,4,opt,name=failed,proto3,oneof" json:"failed,omitempty"`
}

func (*WFActivationCompletion_Successful) isWFActivationCompletion_Status() {}
func (*WFActivationCompletion_Failed) isWFActivationCompletion_Status()     {}

func (m *WFActivationCompletion) GetStatus() isWFActivationCompletion_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *WFActivationCompletion) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

func (m *WFActivationCompletion) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *WFActivationCompletion) GetSuccessful() *Success {
	if x, ok := m.GetStatus().(*WFActivationCompletion_Successful); ok {
		return x.Successful
	}
	return nil
}

func (m *WFActivationCompletion) GetFailed() *Failure {
	if x, ok := m.GetStatus().(*WFActivationCompletion_Failed); ok {
		return x.Failed
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WFActivationCompletion) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WFActivationCompletion_Successful)(nil),
		(*WFActivationCompletion_Failed)(nil),
	}
}

/// Successful workflow activation with a list of commands generated by the workflow execution
type Success struct {
	// A list of commands to send back to the temporal server
	Commands []*workflowcommandspb.WorkflowCommand `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (m *Success) Reset()      { *m = Success{} }
func (*Success) ProtoMessage() {}
func (*Success) Descriptor() ([]byte, []int) {
	return fileDescriptor_f037412b9927842e, []int{1}
}
func (m *Success) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Success) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Success.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Success) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Success.Merge(m, src)
}
func (m *Success) XXX_Size() int {
	return m.Size()
}
func (m *Success) XXX_DiscardUnknown() {
	xxx_messageInfo_Success.DiscardUnknown(m)
}

var xxx_messageInfo_Success proto.InternalMessageInfo

func (m *Success) GetCommands() []*workflowcommandspb.WorkflowCommand {
	if m != nil {
		return m.Commands
	}
	return nil
}

/// Failure to activate or execute a workflow
type Failure struct {
	Failure *v1.Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (m *Failure) Reset()      { *m = Failure{} }
func (*Failure) ProtoMessage() {}
func (*Failure) Descriptor() ([]byte, []int) {
	return fileDescriptor_f037412b9927842e, []int{2}
}
func (m *Failure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Failure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Failure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Failure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Failure.Merge(m, src)
}
func (m *Failure) XXX_Size() int {
	return m.Size()
}
func (m *Failure) XXX_DiscardUnknown() {
	xxx_messageInfo_Failure.DiscardUnknown(m)
}

var xxx_messageInfo_Failure proto.InternalMessageInfo

func (m *Failure) GetFailure() *v1.Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func init() {
	proto.RegisterType((*WFActivationCompletion)(nil), "coresdk.workflow_completion.WFActivationCompletion")
	proto.RegisterType((*Success)(nil), "coresdk.workflow_completion.Success")
	proto.RegisterType((*Failure)(nil), "coresdk.workflow_completion.Failure")
}

func init() { proto.RegisterFile("workflow_completion.proto", fileDescriptor_f037412b9927842e) }

var fileDescriptor_f037412b9927842e = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0xbf, 0x4e, 0xc2, 0x40,
	0x1c, 0xbe, 0x13, 0x2d, 0x70, 0x38, 0x35, 0x51, 0x2b, 0xc6, 0x4b, 0x43, 0x34, 0x21, 0x0e, 0xd7,
	0x80, 0x4e, 0x0e, 0x26, 0x42, 0x6c, 0x70, 0xa4, 0x0e, 0x8c, 0xe4, 0x6c, 0x0f, 0xd3, 0xd0, 0xf6,
	0x6a, 0xaf, 0x07, 0xab, 0x8f, 0xe0, 0x63, 0xf8, 0x28, 0x8e, 0x8c, 0x8c, 0x50, 0x16, 0x47, 0x1e,
	0xc1, 0x94, 0xb6, 0x84, 0x81, 0x18, 0xd7, 0xef, 0xef, 0xfd, 0xbe, 0x43, 0xe7, 0x53, 0x1e, 0x8d,
	0x47, 0x1e, 0x9f, 0x0e, 0x6d, 0xee, 0x87, 0x1e, 0x8b, 0x5d, 0x1e, 0x90, 0x30, 0xe2, 0x31, 0x57,
	0x2f, 0x6c, 0x1e, 0x31, 0xe1, 0x8c, 0xc9, 0x1e, 0x49, 0xfd, 0xd8, 0xe6, 0xbe, 0x5f, 0x48, 0xeb,
	0x67, 0xbb, 0x12, 0x9f, 0x06, 0x8e, 0xc8, 0x89, 0xeb, 0x98, 0xf9, 0x21, 0x8f, 0xa8, 0x67, 0xd0,
	0xd0, 0x35, 0x46, 0xd4, 0xf5, 0x64, 0xc4, 0x8c, 0x49, 0xcb, 0xf0, 0x99, 0x10, 0xf4, 0x8d, 0x65,
	0xb2, 0xc6, 0x02, 0xa2, 0xd3, 0x81, 0xf9, 0x68, 0xc7, 0xee, 0x84, 0xa6, 0xf1, 0xdd, 0x6d, 0x91,
	0x7a, 0x89, 0x50, 0x4c, 0xc5, 0x78, 0xf8, 0x2e, 0x99, 0x64, 0x1a, 0xd4, 0x61, 0xb3, 0x6a, 0x55,
	0x53, 0xa4, 0x9f, 0x02, 0xea, 0x09, 0x52, 0x22, 0x19, 0x0c, 0x5d, 0x47, 0x3b, 0xd8, 0x50, 0x47,
	0x91, 0x0c, 0x9e, 0x1d, 0xd5, 0x44, 0x48, 0x48, 0xdb, 0x66, 0x42, 0x8c, 0xa4, 0xa7, 0x95, 0x74,
	0xd8, 0xac, 0xb5, 0xaf, 0xc8, 0x1f, 0x07, 0x91, 0x97, 0x4c, 0xde, 0x03, 0xd6, 0x8e, 0x53, 0x7d,
	0x40, 0x4a, 0xfa, 0x68, 0xe6, 0x68, 0x87, 0xff, 0xc8, 0x30, 0xb3, 0xfb, 0x7a, 0xc0, 0xca, 0x5d,
	0x9d, 0x0a, 0x52, 0x44, 0x4c, 0x63, 0x29, 0x1a, 0x7d, 0x54, 0xce, 0x2b, 0x54, 0x13, 0x55, 0x8a,
	0x99, 0x34, 0xa8, 0x97, 0x9a, 0xb5, 0xf6, 0xcd, 0xde, 0xd8, 0x6c, 0xc8, 0x41, 0x8e, 0x74, 0x33,
	0xc0, 0xda, 0x7a, 0x1b, 0x4f, 0xa8, 0x9c, 0x37, 0xaa, 0xf7, 0xa8, 0x9c, 0x8f, 0xbb, 0x99, 0xa8,
	0xd6, 0xd6, 0x49, 0xb1, 0x3c, 0xa1, 0xa1, 0x4b, 0x72, 0x92, 0x4c, 0x5a, 0xc5, 0x23, 0xad, 0xc2,
	0xd0, 0xb9, 0x9b, 0x2d, 0x31, 0x98, 0x2f, 0x31, 0x58, 0x2f, 0x31, 0xfc, 0x48, 0x30, 0xfc, 0x4a,
	0x30, 0xfc, 0x4e, 0x30, 0x9c, 0x25, 0x18, 0x2e, 0x12, 0x0c, 0x7f, 0x12, 0x0c, 0xd6, 0x09, 0x86,
	0x9f, 0x2b, 0x0c, 0x66, 0x2b, 0x0c, 0xe6, 0x2b, 0x0c, 0x5e, 0x95, 0xcd, 0xcf, 0xdd, 0xfe, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x3f, 0xed, 0x99, 0x70, 0x41, 0x02, 0x00, 0x00,
}

func (this *WFActivationCompletion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WFActivationCompletion)
	if !ok {
		that2, ok := that.(WFActivationCompletion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if that1.Status == nil {
		if this.Status != nil {
			return false
		}
	} else if this.Status == nil {
		return false
	} else if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *WFActivationCompletion_Successful) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WFActivationCompletion_Successful)
	if !ok {
		that2, ok := that.(WFActivationCompletion_Successful)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Successful.Equal(that1.Successful) {
		return false
	}
	return true
}
func (this *WFActivationCompletion_Failed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WFActivationCompletion_Failed)
	if !ok {
		that2, ok := that.(WFActivationCompletion_Failed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failed.Equal(that1.Failed) {
		return false
	}
	return true
}
func (this *Success) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Success)
	if !ok {
		that2, ok := that.(Success)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Commands) != len(that1.Commands) {
		return false
	}
	for i := range this.Commands {
		if !this.Commands[i].Equal(that1.Commands[i]) {
			return false
		}
	}
	return true
}
func (this *Failure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Failure)
	if !ok {
		that2, ok := that.(Failure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	return true
}
func (this *WFActivationCompletion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&coresdk_workflow_completion.WFActivationCompletion{")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WFActivationCompletion_Successful) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_completion.WFActivationCompletion_Successful{` +
		`Successful:` + fmt.Sprintf("%#v", this.Successful) + `}`}, ", ")
	return s
}
func (this *WFActivationCompletion_Failed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_completion.WFActivationCompletion_Failed{` +
		`Failed:` + fmt.Sprintf("%#v", this.Failed) + `}`}, ", ")
	return s
}
func (this *Success) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_workflow_completion.Success{")
	if this.Commands != nil {
		s = append(s, "Commands: "+fmt.Sprintf("%#v", this.Commands)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Failure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_workflow_completion.Failure{")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringWorkflowCompletion(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *WFActivationCompletion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WFActivationCompletion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WFActivationCompletion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size := m.Status.Size()
			i -= size
			if _, err := m.Status.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintWorkflowCompletion(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintWorkflowCompletion(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WFActivationCompletion_Successful) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WFActivationCompletion_Successful) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Successful != nil {
		{
			size, err := m.Successful.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCompletion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *WFActivationCompletion_Failed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WFActivationCompletion_Failed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Failed != nil {
		{
			size, err := m.Failed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCompletion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Success) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Success) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Success) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commands) > 0 {
		for iNdEx := len(m.Commands) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commands[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkflowCompletion(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Failure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Failure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCompletion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWorkflowCompletion(dAtA []byte, offset int, v uint64) int {
	offset -= sovWorkflowCompletion(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WFActivationCompletion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovWorkflowCompletion(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovWorkflowCompletion(uint64(l))
	}
	if m.Status != nil {
		n += m.Status.Size()
	}
	return n
}

func (m *WFActivationCompletion_Successful) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful != nil {
		l = m.Successful.Size()
		n += 1 + l + sovWorkflowCompletion(uint64(l))
	}
	return n
}
func (m *WFActivationCompletion_Failed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failed != nil {
		l = m.Failed.Size()
		n += 1 + l + sovWorkflowCompletion(uint64(l))
	}
	return n
}
func (m *Success) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Commands) > 0 {
		for _, e := range m.Commands {
			l = e.Size()
			n += 1 + l + sovWorkflowCompletion(uint64(l))
		}
	}
	return n
}

func (m *Failure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovWorkflowCompletion(uint64(l))
	}
	return n
}

func sovWorkflowCompletion(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWorkflowCompletion(x uint64) (n int) {
	return sovWorkflowCompletion(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *WFActivationCompletion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WFActivationCompletion{`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WFActivationCompletion_Successful) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WFActivationCompletion_Successful{`,
		`Successful:` + strings.Replace(fmt.Sprintf("%v", this.Successful), "Success", "Success", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WFActivationCompletion_Failed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WFActivationCompletion_Failed{`,
		`Failed:` + strings.Replace(fmt.Sprintf("%v", this.Failed), "Failure", "Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Success) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCommands := "[]*WorkflowCommand{"
	for _, f := range this.Commands {
		repeatedStringForCommands += strings.Replace(fmt.Sprintf("%v", f), "WorkflowCommand", "workflowcommandspb.WorkflowCommand", 1) + ","
	}
	repeatedStringForCommands += "}"
	s := strings.Join([]string{`&Success{`,
		`Commands:` + repeatedStringForCommands + `,`,
		`}`,
	}, "")
	return s
}
func (this *Failure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Failure{`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "v1.Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringWorkflowCompletion(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *WFActivationCompletion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowCompletion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WFActivationCompletion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WFActivationCompletion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCompletion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowCompletion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCompletion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCompletion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowCompletion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCompletion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCompletion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCompletion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCompletion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Success{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &WFActivationCompletion_Successful{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCompletion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCompletion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCompletion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Failure{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &WFActivationCompletion_Failed{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowCompletion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowCompletion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Success) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowCompletion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Success: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Success: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCompletion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCompletion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCompletion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commands = append(m.Commands, &workflowcommandspb.WorkflowCommand{})
			if err := m.Commands[len(m.Commands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowCompletion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowCompletion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Failure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowCompletion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Failure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Failure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCompletion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCompletion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCompletion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &v1.Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowCompletion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowCompletion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkflowCompletion(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkflowCompletion
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflowCompletion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflowCompletion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWorkflowCompletion
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWorkflowCompletion
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWorkflowCompletion
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWorkflowCompletion        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkflowCompletion          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWorkflowCompletion = fmt.Errorf("proto: unexpected end of group")
)
