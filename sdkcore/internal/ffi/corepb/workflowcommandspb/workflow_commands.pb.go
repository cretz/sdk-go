// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: workflow_commands.proto

//*
// Definitions for commands from a workflow in lang SDK to core. While a workflow processes a batch
// of activation jobs, it accumulates these commands to be sent back to core to conclude that
// activation.

package workflowcommandspb

import (
	v1 "go.temporal.io/api/failure/v1"
	childworkflowpb "go.temporal.io/sdk/sdkcore/internal/ffi/corepb/childworkflowpb"
	commonpb "go.temporal.io/sdk/sdkcore/internal/ffi/corepb/commonpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActivityCancellationType int32

const (
	/// Initiate a cancellation request and immediately report cancellation to the workflow.
	ActivityCancellationType_TRY_CANCEL ActivityCancellationType = 0
	/// Wait for activity cancellation completion. Note that activity must heartbeat to receive a
	/// cancellation notification. This can block the cancellation for a long time if activity
	/// doesn't heartbeat or chooses to ignore the cancellation request.
	ActivityCancellationType_WAIT_CANCELLATION_COMPLETED ActivityCancellationType = 1
	/// Do not request cancellation of the activity and immediately report cancellation to the
	/// workflow
	ActivityCancellationType_ABANDON ActivityCancellationType = 2
)

// Enum value maps for ActivityCancellationType.
var (
	ActivityCancellationType_name = map[int32]string{
		0: "TRY_CANCEL",
		1: "WAIT_CANCELLATION_COMPLETED",
		2: "ABANDON",
	}
	ActivityCancellationType_value = map[string]int32{
		"TRY_CANCEL":                  0,
		"WAIT_CANCELLATION_COMPLETED": 1,
		"ABANDON":                     2,
	}
)

func (x ActivityCancellationType) Enum() *ActivityCancellationType {
	p := new(ActivityCancellationType)
	*p = x
	return p
}

func (x ActivityCancellationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivityCancellationType) Descriptor() protoreflect.EnumDescriptor {
	return file_workflow_commands_proto_enumTypes[0].Descriptor()
}

func (ActivityCancellationType) Type() protoreflect.EnumType {
	return &file_workflow_commands_proto_enumTypes[0]
}

func (x ActivityCancellationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActivityCancellationType.Descriptor instead.
func (ActivityCancellationType) EnumDescriptor() ([]byte, []int) {
	return file_workflow_commands_proto_rawDescGZIP(), []int{0}
}

type WorkflowCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//	*WorkflowCommand_StartTimer
	//	*WorkflowCommand_ScheduleActivity
	//	*WorkflowCommand_RespondToQuery
	//	*WorkflowCommand_RequestCancelActivity
	//	*WorkflowCommand_CancelTimer
	//	*WorkflowCommand_CompleteWorkflowExecution
	//	*WorkflowCommand_FailWorkflowExecution
	//	*WorkflowCommand_ContinueAsNewWorkflowExecution
	//	*WorkflowCommand_CancelWorkflowExecution
	//	*WorkflowCommand_SetPatchMarker
	//	*WorkflowCommand_StartChildWorkflowExecution
	//	*WorkflowCommand_CancelUnstartedChildWorkflowExecution
	//	*WorkflowCommand_RequestCancelExternalWorkflowExecution
	//	*WorkflowCommand_SignalExternalWorkflowExecution
	//	*WorkflowCommand_CancelSignalWorkflow
	Variant isWorkflowCommand_Variant `protobuf_oneof:"variant"`
}

func (x *WorkflowCommand) Reset() {
	*x = WorkflowCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_commands_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowCommand) ProtoMessage() {}

func (x *WorkflowCommand) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_commands_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowCommand.ProtoReflect.Descriptor instead.
func (*WorkflowCommand) Descriptor() ([]byte, []int) {
	return file_workflow_commands_proto_rawDescGZIP(), []int{0}
}

func (m *WorkflowCommand) GetVariant() isWorkflowCommand_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *WorkflowCommand) GetStartTimer() *StartTimer {
	if x, ok := x.GetVariant().(*WorkflowCommand_StartTimer); ok {
		return x.StartTimer
	}
	return nil
}

func (x *WorkflowCommand) GetScheduleActivity() *ScheduleActivity {
	if x, ok := x.GetVariant().(*WorkflowCommand_ScheduleActivity); ok {
		return x.ScheduleActivity
	}
	return nil
}

func (x *WorkflowCommand) GetRespondToQuery() *QueryResult {
	if x, ok := x.GetVariant().(*WorkflowCommand_RespondToQuery); ok {
		return x.RespondToQuery
	}
	return nil
}

func (x *WorkflowCommand) GetRequestCancelActivity() *RequestCancelActivity {
	if x, ok := x.GetVariant().(*WorkflowCommand_RequestCancelActivity); ok {
		return x.RequestCancelActivity
	}
	return nil
}

func (x *WorkflowCommand) GetCancelTimer() *CancelTimer {
	if x, ok := x.GetVariant().(*WorkflowCommand_CancelTimer); ok {
		return x.CancelTimer
	}
	return nil
}

func (x *WorkflowCommand) GetCompleteWorkflowExecution() *CompleteWorkflowExecution {
	if x, ok := x.GetVariant().(*WorkflowCommand_CompleteWorkflowExecution); ok {
		return x.CompleteWorkflowExecution
	}
	return nil
}

func (x *WorkflowCommand) GetFailWorkflowExecution() *FailWorkflowExecution {
	if x, ok := x.GetVariant().(*WorkflowCommand_FailWorkflowExecution); ok {
		return x.FailWorkflowExecution
	}
	return nil
}

func (x *WorkflowCommand) GetContinueAsNewWorkflowExecution() *ContinueAsNewWorkflowExecution {
	if x, ok := x.GetVariant().(*WorkflowCommand_ContinueAsNewWorkflowExecution); ok {
		return x.ContinueAsNewWorkflowExecution
	}
	return nil
}

func (x *WorkflowCommand) GetCancelWorkflowExecution() *CancelWorkflowExecution {
	if x, ok := x.GetVariant().(*WorkflowCommand_CancelWorkflowExecution); ok {
		return x.CancelWorkflowExecution
	}
	return nil
}

func (x *WorkflowCommand) GetSetPatchMarker() *SetPatchMarker {
	if x, ok := x.GetVariant().(*WorkflowCommand_SetPatchMarker); ok {
		return x.SetPatchMarker
	}
	return nil
}

func (x *WorkflowCommand) GetStartChildWorkflowExecution() *StartChildWorkflowExecution {
	if x, ok := x.GetVariant().(*WorkflowCommand_StartChildWorkflowExecution); ok {
		return x.StartChildWorkflowExecution
	}
	return nil
}

func (x *WorkflowCommand) GetCancelUnstartedChildWorkflowExecution() *CancelUnstartedChildWorkflowExecution {
	if x, ok := x.GetVariant().(*WorkflowCommand_CancelUnstartedChildWorkflowExecution); ok {
		return x.CancelUnstartedChildWorkflowExecution
	}
	return nil
}

func (x *WorkflowCommand) GetRequestCancelExternalWorkflowExecution() *RequestCancelExternalWorkflowExecution {
	if x, ok := x.GetVariant().(*WorkflowCommand_RequestCancelExternalWorkflowExecution); ok {
		return x.RequestCancelExternalWorkflowExecution
	}
	return nil
}

func (x *WorkflowCommand) GetSignalExternalWorkflowExecution() *SignalExternalWorkflowExecution {
	if x, ok := x.GetVariant().(*WorkflowCommand_SignalExternalWorkflowExecution); ok {
		return x.SignalExternalWorkflowExecution
	}
	return nil
}

func (x *WorkflowCommand) GetCancelSignalWorkflow() *CancelSignalWorkflow {
	if x, ok := x.GetVariant().(*WorkflowCommand_CancelSignalWorkflow); ok {
		return x.CancelSignalWorkflow
	}
	return nil
}

type isWorkflowCommand_Variant interface {
	isWorkflowCommand_Variant()
}

type WorkflowCommand_StartTimer struct {
	StartTimer *StartTimer `protobuf:"bytes,1,opt,name=start_timer,json=startTimer,proto3,oneof"`
}

type WorkflowCommand_ScheduleActivity struct {
	ScheduleActivity *ScheduleActivity `protobuf:"bytes,2,opt,name=schedule_activity,json=scheduleActivity,proto3,oneof"`
}

type WorkflowCommand_RespondToQuery struct {
	RespondToQuery *QueryResult `protobuf:"bytes,3,opt,name=respond_to_query,json=respondToQuery,proto3,oneof"`
}

type WorkflowCommand_RequestCancelActivity struct {
	RequestCancelActivity *RequestCancelActivity `protobuf:"bytes,4,opt,name=request_cancel_activity,json=requestCancelActivity,proto3,oneof"`
}

type WorkflowCommand_CancelTimer struct {
	CancelTimer *CancelTimer `protobuf:"bytes,5,opt,name=cancel_timer,json=cancelTimer,proto3,oneof"`
}

type WorkflowCommand_CompleteWorkflowExecution struct {
	CompleteWorkflowExecution *CompleteWorkflowExecution `protobuf:"bytes,6,opt,name=complete_workflow_execution,json=completeWorkflowExecution,proto3,oneof"`
}

type WorkflowCommand_FailWorkflowExecution struct {
	FailWorkflowExecution *FailWorkflowExecution `protobuf:"bytes,7,opt,name=fail_workflow_execution,json=failWorkflowExecution,proto3,oneof"`
}

type WorkflowCommand_ContinueAsNewWorkflowExecution struct {
	ContinueAsNewWorkflowExecution *ContinueAsNewWorkflowExecution `protobuf:"bytes,8,opt,name=continue_as_new_workflow_execution,json=continueAsNewWorkflowExecution,proto3,oneof"`
}

type WorkflowCommand_CancelWorkflowExecution struct {
	CancelWorkflowExecution *CancelWorkflowExecution `protobuf:"bytes,9,opt,name=cancel_workflow_execution,json=cancelWorkflowExecution,proto3,oneof"`
}

type WorkflowCommand_SetPatchMarker struct {
	SetPatchMarker *SetPatchMarker `protobuf:"bytes,10,opt,name=set_patch_marker,json=setPatchMarker,proto3,oneof"`
}

type WorkflowCommand_StartChildWorkflowExecution struct {
	StartChildWorkflowExecution *StartChildWorkflowExecution `protobuf:"bytes,11,opt,name=start_child_workflow_execution,json=startChildWorkflowExecution,proto3,oneof"`
}

type WorkflowCommand_CancelUnstartedChildWorkflowExecution struct {
	CancelUnstartedChildWorkflowExecution *CancelUnstartedChildWorkflowExecution `protobuf:"bytes,12,opt,name=cancel_unstarted_child_workflow_execution,json=cancelUnstartedChildWorkflowExecution,proto3,oneof"`
}

type WorkflowCommand_RequestCancelExternalWorkflowExecution struct {
	RequestCancelExternalWorkflowExecution *RequestCancelExternalWorkflowExecution `protobuf:"bytes,13,opt,name=request_cancel_external_workflow_execution,json=requestCancelExternalWorkflowExecution,proto3,oneof"`
}

type WorkflowCommand_SignalExternalWorkflowExecution struct {
	SignalExternalWorkflowExecution *SignalExternalWorkflowExecution `protobuf:"bytes,14,opt,name=signal_external_workflow_execution,json=signalExternalWorkflowExecution,proto3,oneof"`
}

type WorkflowCommand_CancelSignalWorkflow struct {
	CancelSignalWorkflow *CancelSignalWorkflow `protobuf:"bytes,15,opt,name=cancel_signal_workflow,json=cancelSignalWorkflow,proto3,oneof"`
}

func (*WorkflowCommand_StartTimer) isWorkflowCommand_Variant() {}

func (*WorkflowCommand_ScheduleActivity) isWorkflowCommand_Variant() {}

func (*WorkflowCommand_RespondToQuery) isWorkflowCommand_Variant() {}

func (*WorkflowCommand_RequestCancelActivity) isWorkflowCommand_Variant() {}

func (*WorkflowCommand_CancelTimer) isWorkflowCommand_Variant() {}

func (*WorkflowCommand_CompleteWorkflowExecution) isWorkflowCommand_Variant() {}

func (*WorkflowCommand_FailWorkflowExecution) isWorkflowCommand_Variant() {}

func (*WorkflowCommand_ContinueAsNewWorkflowExecution) isWorkflowCommand_Variant() {}

func (*WorkflowCommand_CancelWorkflowExecution) isWorkflowCommand_Variant() {}

func (*WorkflowCommand_SetPatchMarker) isWorkflowCommand_Variant() {}

func (*WorkflowCommand_StartChildWorkflowExecution) isWorkflowCommand_Variant() {}

func (*WorkflowCommand_CancelUnstartedChildWorkflowExecution) isWorkflowCommand_Variant() {}

func (*WorkflowCommand_RequestCancelExternalWorkflowExecution) isWorkflowCommand_Variant() {}

func (*WorkflowCommand_SignalExternalWorkflowExecution) isWorkflowCommand_Variant() {}

func (*WorkflowCommand_CancelSignalWorkflow) isWorkflowCommand_Variant() {}

type StartTimer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Lang's incremental sequence number, used as the operation identifier
	Seq                uint32               `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	StartToFireTimeout *durationpb.Duration `protobuf:"bytes,2,opt,name=start_to_fire_timeout,json=startToFireTimeout,proto3" json:"start_to_fire_timeout,omitempty"`
}

func (x *StartTimer) Reset() {
	*x = StartTimer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_commands_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTimer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTimer) ProtoMessage() {}

func (x *StartTimer) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_commands_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTimer.ProtoReflect.Descriptor instead.
func (*StartTimer) Descriptor() ([]byte, []int) {
	return file_workflow_commands_proto_rawDescGZIP(), []int{1}
}

func (x *StartTimer) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *StartTimer) GetStartToFireTimeout() *durationpb.Duration {
	if x != nil {
		return x.StartToFireTimeout
	}
	return nil
}

type CancelTimer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Lang's incremental sequence number as passed to `StartTimer`
	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *CancelTimer) Reset() {
	*x = CancelTimer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_commands_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTimer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTimer) ProtoMessage() {}

func (x *CancelTimer) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_commands_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTimer.ProtoReflect.Descriptor instead.
func (*CancelTimer) Descriptor() ([]byte, []int) {
	return file_workflow_commands_proto_rawDescGZIP(), []int{2}
}

func (x *CancelTimer) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type ScheduleActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Lang's incremental sequence number, used as the operation identifier
	Seq          uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	ActivityId   string `protobuf:"bytes,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ActivityType string `protobuf:"bytes,3,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	Namespace    string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The name of the task queue to place this activity request in
	TaskQueue    string                       `protobuf:"bytes,5,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	HeaderFields map[string]*commonpb.Payload `protobuf:"bytes,6,rep,name=header_fields,json=headerFields,proto3" json:"header_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// Arguments/input to the activity. Called "input" upstream.
	Arguments []*commonpb.Payload `protobuf:"bytes,7,rep,name=arguments,proto3" json:"arguments,omitempty"`
	/// Indicates how long the caller is willing to wait for an activity completion. Limits how long
	/// retries will be attempted. Either this or start_to_close_timeout_seconds must be specified.
	/// When not specified defaults to the workflow execution timeout.
	ScheduleToCloseTimeout *durationpb.Duration `protobuf:"bytes,8,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3" json:"schedule_to_close_timeout,omitempty"`
	/// Limits time an activity task can stay in a task queue before a worker picks it up. This
	/// timeout is always non retryable as all a retry would achieve is to put it back into the same
	/// queue. Defaults to schedule_to_close_timeout or workflow execution timeout if not specified.
	ScheduleToStartTimeout *durationpb.Duration `protobuf:"bytes,9,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3" json:"schedule_to_start_timeout,omitempty"`
	/// Maximum time an activity is allowed to execute after a pick up by a worker. This timeout is
	/// always retryable. Either this or schedule_to_close_timeout must be specified.
	StartToCloseTimeout *durationpb.Duration `protobuf:"bytes,10,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3" json:"start_to_close_timeout,omitempty"`
	/// Maximum time allowed between successful worker heartbeats.
	HeartbeatTimeout *durationpb.Duration `protobuf:"bytes,11,opt,name=heartbeat_timeout,json=heartbeatTimeout,proto3" json:"heartbeat_timeout,omitempty"`
	/// Activities are provided by a default retry policy controlled through the service dynamic
	/// configuration. Retries are happening up to schedule_to_close_timeout. To disable retries set
	/// retry_policy.maximum_attempts to 2.
	RetryPolicy *commonpb.RetryPolicy `protobuf:"bytes,12,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	/// Defines behaviour of the underlying workflow when activity cancellation has been requested.
	CancellationType ActivityCancellationType `protobuf:"varint,13,opt,name=cancellation_type,json=cancellationType,proto3,enum=coresdk.workflow_commands.ActivityCancellationType" json:"cancellation_type,omitempty"`
}

func (x *ScheduleActivity) Reset() {
	*x = ScheduleActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_commands_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleActivity) ProtoMessage() {}

func (x *ScheduleActivity) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_commands_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleActivity.ProtoReflect.Descriptor instead.
func (*ScheduleActivity) Descriptor() ([]byte, []int) {
	return file_workflow_commands_proto_rawDescGZIP(), []int{3}
}

func (x *ScheduleActivity) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *ScheduleActivity) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *ScheduleActivity) GetActivityType() string {
	if x != nil {
		return x.ActivityType
	}
	return ""
}

func (x *ScheduleActivity) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ScheduleActivity) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *ScheduleActivity) GetHeaderFields() map[string]*commonpb.Payload {
	if x != nil {
		return x.HeaderFields
	}
	return nil
}

func (x *ScheduleActivity) GetArguments() []*commonpb.Payload {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *ScheduleActivity) GetScheduleToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.ScheduleToCloseTimeout
	}
	return nil
}

func (x *ScheduleActivity) GetScheduleToStartTimeout() *durationpb.Duration {
	if x != nil {
		return x.ScheduleToStartTimeout
	}
	return nil
}

func (x *ScheduleActivity) GetStartToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.StartToCloseTimeout
	}
	return nil
}

func (x *ScheduleActivity) GetHeartbeatTimeout() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatTimeout
	}
	return nil
}

func (x *ScheduleActivity) GetRetryPolicy() *commonpb.RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *ScheduleActivity) GetCancellationType() ActivityCancellationType {
	if x != nil {
		return x.CancellationType
	}
	return ActivityCancellationType_TRY_CANCEL
}

type RequestCancelActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Lang's incremental sequence number as passed to `ScheduleActivity`
	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *RequestCancelActivity) Reset() {
	*x = RequestCancelActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_commands_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCancelActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCancelActivity) ProtoMessage() {}

func (x *RequestCancelActivity) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_commands_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCancelActivity.ProtoReflect.Descriptor instead.
func (*RequestCancelActivity) Descriptor() ([]byte, []int) {
	return file_workflow_commands_proto_rawDescGZIP(), []int{4}
}

func (x *RequestCancelActivity) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type QueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Corresponds to the id provided in the activation job
	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// Types that are assignable to Variant:
	//	*QueryResult_Succeeded
	//	*QueryResult_Failed
	Variant isQueryResult_Variant `protobuf_oneof:"variant"`
}

func (x *QueryResult) Reset() {
	*x = QueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_commands_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResult) ProtoMessage() {}

func (x *QueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_commands_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResult.ProtoReflect.Descriptor instead.
func (*QueryResult) Descriptor() ([]byte, []int) {
	return file_workflow_commands_proto_rawDescGZIP(), []int{5}
}

func (x *QueryResult) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (m *QueryResult) GetVariant() isQueryResult_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *QueryResult) GetSucceeded() *QuerySuccess {
	if x, ok := x.GetVariant().(*QueryResult_Succeeded); ok {
		return x.Succeeded
	}
	return nil
}

func (x *QueryResult) GetFailed() *v1.Failure {
	if x, ok := x.GetVariant().(*QueryResult_Failed); ok {
		return x.Failed
	}
	return nil
}

type isQueryResult_Variant interface {
	isQueryResult_Variant()
}

type QueryResult_Succeeded struct {
	Succeeded *QuerySuccess `protobuf:"bytes,2,opt,name=succeeded,proto3,oneof"`
}

type QueryResult_Failed struct {
	Failed *v1.Failure `protobuf:"bytes,3,opt,name=failed,proto3,oneof"`
}

func (*QueryResult_Succeeded) isQueryResult_Variant() {}

func (*QueryResult_Failed) isQueryResult_Variant() {}

type QuerySuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *commonpb.Payload `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *QuerySuccess) Reset() {
	*x = QuerySuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_commands_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySuccess) ProtoMessage() {}

func (x *QuerySuccess) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_commands_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySuccess.ProtoReflect.Descriptor instead.
func (*QuerySuccess) Descriptor() ([]byte, []int) {
	return file_workflow_commands_proto_rawDescGZIP(), []int{6}
}

func (x *QuerySuccess) GetResponse() *commonpb.Payload {
	if x != nil {
		return x.Response
	}
	return nil
}

/// Issued when the workflow completes successfully
type CompleteWorkflowExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *commonpb.Payload `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CompleteWorkflowExecution) Reset() {
	*x = CompleteWorkflowExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_commands_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteWorkflowExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteWorkflowExecution) ProtoMessage() {}

func (x *CompleteWorkflowExecution) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_commands_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteWorkflowExecution.ProtoReflect.Descriptor instead.
func (*CompleteWorkflowExecution) Descriptor() ([]byte, []int) {
	return file_workflow_commands_proto_rawDescGZIP(), []int{7}
}

func (x *CompleteWorkflowExecution) GetResult() *commonpb.Payload {
	if x != nil {
		return x.Result
	}
	return nil
}

/// Issued when the workflow errors out
type FailWorkflowExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failure *v1.Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (x *FailWorkflowExecution) Reset() {
	*x = FailWorkflowExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_commands_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailWorkflowExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailWorkflowExecution) ProtoMessage() {}

func (x *FailWorkflowExecution) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_commands_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailWorkflowExecution.ProtoReflect.Descriptor instead.
func (*FailWorkflowExecution) Descriptor() ([]byte, []int) {
	return file_workflow_commands_proto_rawDescGZIP(), []int{8}
}

func (x *FailWorkflowExecution) GetFailure() *v1.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

// TODO: Maybe combine all execution resolves into one message
/// Continue the workflow as a new execution. Unless noted otherwise, unset or default field values
/// will re-use the issuing workflow's values.
type ContinueAsNewWorkflowExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The identifier the lang-specific sdk uses to execute workflow code
	WorkflowType string `protobuf:"bytes,1,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	/// Task queue for the new workflow execution
	TaskQueue string `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	/// Inputs to the workflow code. Should be specified. Will not re-use old arguments, as that
	/// typically wouldn't make any sense.
	Arguments []*commonpb.Payload `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
	/// Timeout for a single run of the new workflow.
	WorkflowRunTimeout *durationpb.Duration `protobuf:"bytes,4,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3" json:"workflow_run_timeout,omitempty"`
	/// Timeout of a single workflow task.
	WorkflowTaskTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=workflow_task_timeout,json=workflowTaskTimeout,proto3" json:"workflow_task_timeout,omitempty"`
	/// Memo fields
	Memo map[string]*commonpb.Payload `protobuf:"bytes,6,rep,name=memo,proto3" json:"memo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// Header fields
	Header map[string]*commonpb.Payload `protobuf:"bytes,7,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// Search attributes
	SearchAttributes map[string]*commonpb.Payload `protobuf:"bytes,8,rep,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ContinueAsNewWorkflowExecution) Reset() {
	*x = ContinueAsNewWorkflowExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_commands_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinueAsNewWorkflowExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinueAsNewWorkflowExecution) ProtoMessage() {}

func (x *ContinueAsNewWorkflowExecution) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_commands_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinueAsNewWorkflowExecution.ProtoReflect.Descriptor instead.
func (*ContinueAsNewWorkflowExecution) Descriptor() ([]byte, []int) {
	return file_workflow_commands_proto_rawDescGZIP(), []int{9}
}

func (x *ContinueAsNewWorkflowExecution) GetWorkflowType() string {
	if x != nil {
		return x.WorkflowType
	}
	return ""
}

func (x *ContinueAsNewWorkflowExecution) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *ContinueAsNewWorkflowExecution) GetArguments() []*commonpb.Payload {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecution) GetWorkflowRunTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowRunTimeout
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecution) GetWorkflowTaskTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowTaskTimeout
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecution) GetMemo() map[string]*commonpb.Payload {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecution) GetHeader() map[string]*commonpb.Payload {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecution) GetSearchAttributes() map[string]*commonpb.Payload {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

/// Indicate a workflow has completed as cancelled. Generally sent as a response to an activation
/// containing a cancellation job.
type CancelWorkflowExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelWorkflowExecution) Reset() {
	*x = CancelWorkflowExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_commands_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelWorkflowExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelWorkflowExecution) ProtoMessage() {}

func (x *CancelWorkflowExecution) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_commands_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelWorkflowExecution.ProtoReflect.Descriptor instead.
func (*CancelWorkflowExecution) Descriptor() ([]byte, []int) {
	return file_workflow_commands_proto_rawDescGZIP(), []int{10}
}

/// A request to set/check if a certain patch is present or not
type SetPatchMarker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A user-chosen identifier for this patch. If the same identifier is used in multiple places in
	// the code, those places are considered to be versioned as one unit. IE: The check call will
	// return the same result for all of them
	PatchId string `protobuf:"bytes,1,opt,name=patch_id,json=patchId,proto3" json:"patch_id,omitempty"`
	// Can be set to true to indicate that branches using this change are being removed, and all
	// future worker deployments will only have the "with change" code in them.
	Deprecated bool `protobuf:"varint,2,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
}

func (x *SetPatchMarker) Reset() {
	*x = SetPatchMarker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_commands_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPatchMarker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPatchMarker) ProtoMessage() {}

func (x *SetPatchMarker) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_commands_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPatchMarker.ProtoReflect.Descriptor instead.
func (*SetPatchMarker) Descriptor() ([]byte, []int) {
	return file_workflow_commands_proto_rawDescGZIP(), []int{11}
}

func (x *SetPatchMarker) GetPatchId() string {
	if x != nil {
		return x.PatchId
	}
	return ""
}

func (x *SetPatchMarker) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

/// Start a child workflow execution
type StartChildWorkflowExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Lang's incremental sequence number, used as the operation identifier
	Seq          uint32              `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Namespace    string              `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowId   string              `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowType string              `protobuf:"bytes,4,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskQueue    string              `protobuf:"bytes,5,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	Input        []*commonpb.Payload `protobuf:"bytes,6,rep,name=input,proto3" json:"input,omitempty"`
	/// Total workflow execution timeout including retries and continue as new.
	WorkflowExecutionTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=workflow_execution_timeout,json=workflowExecutionTimeout,proto3" json:"workflow_execution_timeout,omitempty"`
	/// Timeout of a single workflow run.
	WorkflowRunTimeout *durationpb.Duration `protobuf:"bytes,8,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3" json:"workflow_run_timeout,omitempty"`
	/// Timeout of a single workflow task.
	WorkflowTaskTimeout *durationpb.Duration `protobuf:"bytes,9,opt,name=workflow_task_timeout,json=workflowTaskTimeout,proto3" json:"workflow_task_timeout,omitempty"`
	/// Default: PARENT_CLOSE_POLICY_TERMINATE.
	ParentClosePolicy childworkflowpb.ParentClosePolicy `protobuf:"varint,10,opt,name=parent_close_policy,json=parentClosePolicy,proto3,enum=coresdk.child_workflow.ParentClosePolicy" json:"parent_close_policy,omitempty"`
	// string control = 11; (unused from StartChildWorkflowExecutionCommandAttributes)
	// Default: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
	WorkflowIdReusePolicy commonpb.WorkflowIdReusePolicy `protobuf:"varint,12,opt,name=workflow_id_reuse_policy,json=workflowIdReusePolicy,proto3,enum=coresdk.common.WorkflowIdReusePolicy" json:"workflow_id_reuse_policy,omitempty"`
	RetryPolicy           *commonpb.RetryPolicy          `protobuf:"bytes,13,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	CronSchedule          string                         `protobuf:"bytes,14,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	/// Header fields
	Header map[string]*commonpb.Payload `protobuf:"bytes,15,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// Memo fields
	Memo map[string]*commonpb.Payload `protobuf:"bytes,16,rep,name=memo,proto3" json:"memo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// Search attributes
	SearchAttributes map[string]*commonpb.Payload `protobuf:"bytes,17,rep,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// Defines behaviour of the underlying workflow when child workflow cancellation has been requested.
	CancellationType childworkflowpb.ChildWorkflowCancellationType `protobuf:"varint,18,opt,name=cancellation_type,json=cancellationType,proto3,enum=coresdk.child_workflow.ChildWorkflowCancellationType" json:"cancellation_type,omitempty"`
}

func (x *StartChildWorkflowExecution) Reset() {
	*x = StartChildWorkflowExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_commands_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartChildWorkflowExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartChildWorkflowExecution) ProtoMessage() {}

func (x *StartChildWorkflowExecution) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_commands_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartChildWorkflowExecution.ProtoReflect.Descriptor instead.
func (*StartChildWorkflowExecution) Descriptor() ([]byte, []int) {
	return file_workflow_commands_proto_rawDescGZIP(), []int{12}
}

func (x *StartChildWorkflowExecution) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *StartChildWorkflowExecution) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *StartChildWorkflowExecution) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *StartChildWorkflowExecution) GetWorkflowType() string {
	if x != nil {
		return x.WorkflowType
	}
	return ""
}

func (x *StartChildWorkflowExecution) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *StartChildWorkflowExecution) GetInput() []*commonpb.Payload {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *StartChildWorkflowExecution) GetWorkflowExecutionTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowExecutionTimeout
	}
	return nil
}

func (x *StartChildWorkflowExecution) GetWorkflowRunTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowRunTimeout
	}
	return nil
}

func (x *StartChildWorkflowExecution) GetWorkflowTaskTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowTaskTimeout
	}
	return nil
}

func (x *StartChildWorkflowExecution) GetParentClosePolicy() childworkflowpb.ParentClosePolicy {
	if x != nil {
		return x.ParentClosePolicy
	}
	return childworkflowpb.ParentClosePolicy(0)
}

func (x *StartChildWorkflowExecution) GetWorkflowIdReusePolicy() commonpb.WorkflowIdReusePolicy {
	if x != nil {
		return x.WorkflowIdReusePolicy
	}
	return commonpb.WorkflowIdReusePolicy(0)
}

func (x *StartChildWorkflowExecution) GetRetryPolicy() *commonpb.RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *StartChildWorkflowExecution) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

func (x *StartChildWorkflowExecution) GetHeader() map[string]*commonpb.Payload {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StartChildWorkflowExecution) GetMemo() map[string]*commonpb.Payload {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *StartChildWorkflowExecution) GetSearchAttributes() map[string]*commonpb.Payload {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

func (x *StartChildWorkflowExecution) GetCancellationType() childworkflowpb.ChildWorkflowCancellationType {
	if x != nil {
		return x.CancellationType
	}
	return childworkflowpb.ChildWorkflowCancellationType(0)
}

/// Cancel a not-yet-started child workflow
type CancelUnstartedChildWorkflowExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence number as given to the `StartChildWorkflowExecution` command
	ChildWorkflowSeq uint32 `protobuf:"varint,1,opt,name=child_workflow_seq,json=childWorkflowSeq,proto3" json:"child_workflow_seq,omitempty"`
}

func (x *CancelUnstartedChildWorkflowExecution) Reset() {
	*x = CancelUnstartedChildWorkflowExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_commands_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelUnstartedChildWorkflowExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelUnstartedChildWorkflowExecution) ProtoMessage() {}

func (x *CancelUnstartedChildWorkflowExecution) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_commands_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelUnstartedChildWorkflowExecution.ProtoReflect.Descriptor instead.
func (*CancelUnstartedChildWorkflowExecution) Descriptor() ([]byte, []int) {
	return file_workflow_commands_proto_rawDescGZIP(), []int{13}
}

func (x *CancelUnstartedChildWorkflowExecution) GetChildWorkflowSeq() uint32 {
	if x != nil {
		return x.ChildWorkflowSeq
	}
	return 0
}

/// Request cancellation of an external workflow execution (which may be a started child)
type RequestCancelExternalWorkflowExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Lang's incremental sequence number, used as the operation identifier
	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	// What workflow is being targeted
	//
	// Types that are assignable to Target:
	//	*RequestCancelExternalWorkflowExecution_WorkflowExecution
	//	*RequestCancelExternalWorkflowExecution_ChildWorkflowId
	Target isRequestCancelExternalWorkflowExecution_Target `protobuf_oneof:"target"`
}

func (x *RequestCancelExternalWorkflowExecution) Reset() {
	*x = RequestCancelExternalWorkflowExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_commands_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCancelExternalWorkflowExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCancelExternalWorkflowExecution) ProtoMessage() {}

func (x *RequestCancelExternalWorkflowExecution) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_commands_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCancelExternalWorkflowExecution.ProtoReflect.Descriptor instead.
func (*RequestCancelExternalWorkflowExecution) Descriptor() ([]byte, []int) {
	return file_workflow_commands_proto_rawDescGZIP(), []int{14}
}

func (x *RequestCancelExternalWorkflowExecution) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (m *RequestCancelExternalWorkflowExecution) GetTarget() isRequestCancelExternalWorkflowExecution_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *RequestCancelExternalWorkflowExecution) GetWorkflowExecution() *commonpb.NamespacedWorkflowExecution {
	if x, ok := x.GetTarget().(*RequestCancelExternalWorkflowExecution_WorkflowExecution); ok {
		return x.WorkflowExecution
	}
	return nil
}

func (x *RequestCancelExternalWorkflowExecution) GetChildWorkflowId() string {
	if x, ok := x.GetTarget().(*RequestCancelExternalWorkflowExecution_ChildWorkflowId); ok {
		return x.ChildWorkflowId
	}
	return ""
}

type isRequestCancelExternalWorkflowExecution_Target interface {
	isRequestCancelExternalWorkflowExecution_Target()
}

type RequestCancelExternalWorkflowExecution_WorkflowExecution struct {
	// A specific workflow instance
	WorkflowExecution *commonpb.NamespacedWorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3,oneof"`
}

type RequestCancelExternalWorkflowExecution_ChildWorkflowId struct {
	// The desired target must be a child of the issuing workflow, and this is its workflow id
	ChildWorkflowId string `protobuf:"bytes,3,opt,name=child_workflow_id,json=childWorkflowId,proto3,oneof"`
}

func (*RequestCancelExternalWorkflowExecution_WorkflowExecution) isRequestCancelExternalWorkflowExecution_Target() {
}

func (*RequestCancelExternalWorkflowExecution_ChildWorkflowId) isRequestCancelExternalWorkflowExecution_Target() {
}

/// Send a signal to an external or child workflow
type SignalExternalWorkflowExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Lang's incremental sequence number, used as the operation identifier
	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	// What workflow is being targeted
	//
	// Types that are assignable to Target:
	//	*SignalExternalWorkflowExecution_WorkflowExecution
	//	*SignalExternalWorkflowExecution_ChildWorkflowId
	Target isSignalExternalWorkflowExecution_Target `protobuf_oneof:"target"`
	/// Name of the signal handler
	SignalName string `protobuf:"bytes,4,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
	/// Arguments for the handler
	Args []*commonpb.Payload `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *SignalExternalWorkflowExecution) Reset() {
	*x = SignalExternalWorkflowExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_commands_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalExternalWorkflowExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalExternalWorkflowExecution) ProtoMessage() {}

func (x *SignalExternalWorkflowExecution) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_commands_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalExternalWorkflowExecution.ProtoReflect.Descriptor instead.
func (*SignalExternalWorkflowExecution) Descriptor() ([]byte, []int) {
	return file_workflow_commands_proto_rawDescGZIP(), []int{15}
}

func (x *SignalExternalWorkflowExecution) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (m *SignalExternalWorkflowExecution) GetTarget() isSignalExternalWorkflowExecution_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *SignalExternalWorkflowExecution) GetWorkflowExecution() *commonpb.NamespacedWorkflowExecution {
	if x, ok := x.GetTarget().(*SignalExternalWorkflowExecution_WorkflowExecution); ok {
		return x.WorkflowExecution
	}
	return nil
}

func (x *SignalExternalWorkflowExecution) GetChildWorkflowId() string {
	if x, ok := x.GetTarget().(*SignalExternalWorkflowExecution_ChildWorkflowId); ok {
		return x.ChildWorkflowId
	}
	return ""
}

func (x *SignalExternalWorkflowExecution) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

func (x *SignalExternalWorkflowExecution) GetArgs() []*commonpb.Payload {
	if x != nil {
		return x.Args
	}
	return nil
}

type isSignalExternalWorkflowExecution_Target interface {
	isSignalExternalWorkflowExecution_Target()
}

type SignalExternalWorkflowExecution_WorkflowExecution struct {
	// A specific workflow instance
	WorkflowExecution *commonpb.NamespacedWorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3,oneof"`
}

type SignalExternalWorkflowExecution_ChildWorkflowId struct {
	// The desired target must be a child of the issuing workflow, and this is its workflow id
	ChildWorkflowId string `protobuf:"bytes,3,opt,name=child_workflow_id,json=childWorkflowId,proto3,oneof"`
}

func (*SignalExternalWorkflowExecution_WorkflowExecution) isSignalExternalWorkflowExecution_Target() {
}

func (*SignalExternalWorkflowExecution_ChildWorkflowId) isSignalExternalWorkflowExecution_Target() {}

/// Can be used to cancel not-already-sent `SignalExternalWorkflowExecution` commands
type CancelSignalWorkflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Lang's incremental sequence number as passed to `SignalExternalWorkflowExecution`
	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *CancelSignalWorkflow) Reset() {
	*x = CancelSignalWorkflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_commands_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelSignalWorkflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSignalWorkflow) ProtoMessage() {}

func (x *CancelSignalWorkflow) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_commands_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSignalWorkflow.ProtoReflect.Descriptor instead.
func (*CancelSignalWorkflow) Descriptor() ([]byte, []int) {
	return file_workflow_commands_proto_rawDescGZIP(), []int{16}
}

func (x *CancelSignalWorkflow) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

var File_workflow_commands_proto protoreflect.FileDescriptor

var file_workflow_commands_proto_rawDesc = []byte{
	0x0a, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xbb, 0x0d, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x48, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x5a, 0x0a,
	0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x10, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x6a, 0x0a,
	0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a,
	0x0a, 0x17, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x46, 0x61, 0x69, 0x6c,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x15, 0x66, 0x61, 0x69, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x87, 0x01, 0x0a, 0x22, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64,
	0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x73, 0x4e, 0x65,
	0x77, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x73,
	0x4e, 0x65, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x19, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64,
	0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x73,
	0x65, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x7d, 0x0a,
	0x1e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x1b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9c, 0x01, 0x0a,
	0x29, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x25, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x6e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9f, 0x01, 0x0a, 0x2a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x26, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x89, 0x01,
	0x0a, 0x22, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x16, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x14, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0x6c, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x4c, 0x0a,
	0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f,
	0x46, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x1f, 0x0a, 0x0b, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x82, 0x07, 0x0a,
	0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x73, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x62, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x54, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x54, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4e, 0x0a,
	0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x46, 0x0a,
	0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x60, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x33, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x58, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x29, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0xb8, 0x01, 0x0a,
	0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x12, 0x3a, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x48, 0x00, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x0a, 0x19,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x53, 0x0a, 0x15, 0x46, 0x61,
	0x69, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22,
	0xf1, 0x06, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x73, 0x4e, 0x65,
	0x77, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4b, 0x0a,
	0x14, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x15, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x57, 0x0a, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64,
	0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x73, 0x4e, 0x65,
	0x77, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x12, 0x5d, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x7c, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x65, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a,
	0x50, 0x0a, 0x09, 0x4d, 0x65, 0x6d, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x52, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b,
	0x0a, 0x0e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0x8b, 0x0b, 0x0a, 0x1b,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x57, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4b, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x59, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x11, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x5e, 0x0a, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x5f, 0x72,
	0x65, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x52, 0x65, 0x75,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x5a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x54, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x79, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x62, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x52, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x50, 0x0a, 0x09, 0x4d, 0x65, 0x6d,
	0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64,
	0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x15, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x25, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x71,
	0x22, 0xd0, 0x01, 0x0a, 0x26, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x5c, 0x0a,
	0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x22, 0x97, 0x02, 0x0a, 0x1f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x5c, 0x0a, 0x12, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x28, 0x0a,
	0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x2a, 0x58, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x10,
	0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_workflow_commands_proto_rawDescOnce sync.Once
	file_workflow_commands_proto_rawDescData = file_workflow_commands_proto_rawDesc
)

func file_workflow_commands_proto_rawDescGZIP() []byte {
	file_workflow_commands_proto_rawDescOnce.Do(func() {
		file_workflow_commands_proto_rawDescData = protoimpl.X.CompressGZIP(file_workflow_commands_proto_rawDescData)
	})
	return file_workflow_commands_proto_rawDescData
}

var file_workflow_commands_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_workflow_commands_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_workflow_commands_proto_goTypes = []interface{}{
	(ActivityCancellationType)(0),                  // 0: coresdk.workflow_commands.ActivityCancellationType
	(*WorkflowCommand)(nil),                        // 1: coresdk.workflow_commands.WorkflowCommand
	(*StartTimer)(nil),                             // 2: coresdk.workflow_commands.StartTimer
	(*CancelTimer)(nil),                            // 3: coresdk.workflow_commands.CancelTimer
	(*ScheduleActivity)(nil),                       // 4: coresdk.workflow_commands.ScheduleActivity
	(*RequestCancelActivity)(nil),                  // 5: coresdk.workflow_commands.RequestCancelActivity
	(*QueryResult)(nil),                            // 6: coresdk.workflow_commands.QueryResult
	(*QuerySuccess)(nil),                           // 7: coresdk.workflow_commands.QuerySuccess
	(*CompleteWorkflowExecution)(nil),              // 8: coresdk.workflow_commands.CompleteWorkflowExecution
	(*FailWorkflowExecution)(nil),                  // 9: coresdk.workflow_commands.FailWorkflowExecution
	(*ContinueAsNewWorkflowExecution)(nil),         // 10: coresdk.workflow_commands.ContinueAsNewWorkflowExecution
	(*CancelWorkflowExecution)(nil),                // 11: coresdk.workflow_commands.CancelWorkflowExecution
	(*SetPatchMarker)(nil),                         // 12: coresdk.workflow_commands.SetPatchMarker
	(*StartChildWorkflowExecution)(nil),            // 13: coresdk.workflow_commands.StartChildWorkflowExecution
	(*CancelUnstartedChildWorkflowExecution)(nil),  // 14: coresdk.workflow_commands.CancelUnstartedChildWorkflowExecution
	(*RequestCancelExternalWorkflowExecution)(nil), // 15: coresdk.workflow_commands.RequestCancelExternalWorkflowExecution
	(*SignalExternalWorkflowExecution)(nil),        // 16: coresdk.workflow_commands.SignalExternalWorkflowExecution
	(*CancelSignalWorkflow)(nil),                   // 17: coresdk.workflow_commands.CancelSignalWorkflow
	nil,                                            // 18: coresdk.workflow_commands.ScheduleActivity.HeaderFieldsEntry
	nil,                                            // 19: coresdk.workflow_commands.ContinueAsNewWorkflowExecution.MemoEntry
	nil,                                            // 20: coresdk.workflow_commands.ContinueAsNewWorkflowExecution.HeaderEntry
	nil,                                            // 21: coresdk.workflow_commands.ContinueAsNewWorkflowExecution.SearchAttributesEntry
	nil,                                            // 22: coresdk.workflow_commands.StartChildWorkflowExecution.HeaderEntry
	nil,                                            // 23: coresdk.workflow_commands.StartChildWorkflowExecution.MemoEntry
	nil,                                            // 24: coresdk.workflow_commands.StartChildWorkflowExecution.SearchAttributesEntry
	(*durationpb.Duration)(nil),                    // 25: google.protobuf.Duration
	(*commonpb.Payload)(nil),                       // 26: coresdk.common.Payload
	(*commonpb.RetryPolicy)(nil),                   // 27: coresdk.common.RetryPolicy
	(*v1.Failure)(nil),                             // 28: temporal.api.failure.v1.Failure
	(childworkflowpb.ParentClosePolicy)(0),         // 29: coresdk.child_workflow.ParentClosePolicy
	(commonpb.WorkflowIdReusePolicy)(0),            // 30: coresdk.common.WorkflowIdReusePolicy
	(childworkflowpb.ChildWorkflowCancellationType)(0), // 31: coresdk.child_workflow.ChildWorkflowCancellationType
	(*commonpb.NamespacedWorkflowExecution)(nil),       // 32: coresdk.common.NamespacedWorkflowExecution
}
var file_workflow_commands_proto_depIdxs = []int32{
	2,  // 0: coresdk.workflow_commands.WorkflowCommand.start_timer:type_name -> coresdk.workflow_commands.StartTimer
	4,  // 1: coresdk.workflow_commands.WorkflowCommand.schedule_activity:type_name -> coresdk.workflow_commands.ScheduleActivity
	6,  // 2: coresdk.workflow_commands.WorkflowCommand.respond_to_query:type_name -> coresdk.workflow_commands.QueryResult
	5,  // 3: coresdk.workflow_commands.WorkflowCommand.request_cancel_activity:type_name -> coresdk.workflow_commands.RequestCancelActivity
	3,  // 4: coresdk.workflow_commands.WorkflowCommand.cancel_timer:type_name -> coresdk.workflow_commands.CancelTimer
	8,  // 5: coresdk.workflow_commands.WorkflowCommand.complete_workflow_execution:type_name -> coresdk.workflow_commands.CompleteWorkflowExecution
	9,  // 6: coresdk.workflow_commands.WorkflowCommand.fail_workflow_execution:type_name -> coresdk.workflow_commands.FailWorkflowExecution
	10, // 7: coresdk.workflow_commands.WorkflowCommand.continue_as_new_workflow_execution:type_name -> coresdk.workflow_commands.ContinueAsNewWorkflowExecution
	11, // 8: coresdk.workflow_commands.WorkflowCommand.cancel_workflow_execution:type_name -> coresdk.workflow_commands.CancelWorkflowExecution
	12, // 9: coresdk.workflow_commands.WorkflowCommand.set_patch_marker:type_name -> coresdk.workflow_commands.SetPatchMarker
	13, // 10: coresdk.workflow_commands.WorkflowCommand.start_child_workflow_execution:type_name -> coresdk.workflow_commands.StartChildWorkflowExecution
	14, // 11: coresdk.workflow_commands.WorkflowCommand.cancel_unstarted_child_workflow_execution:type_name -> coresdk.workflow_commands.CancelUnstartedChildWorkflowExecution
	15, // 12: coresdk.workflow_commands.WorkflowCommand.request_cancel_external_workflow_execution:type_name -> coresdk.workflow_commands.RequestCancelExternalWorkflowExecution
	16, // 13: coresdk.workflow_commands.WorkflowCommand.signal_external_workflow_execution:type_name -> coresdk.workflow_commands.SignalExternalWorkflowExecution
	17, // 14: coresdk.workflow_commands.WorkflowCommand.cancel_signal_workflow:type_name -> coresdk.workflow_commands.CancelSignalWorkflow
	25, // 15: coresdk.workflow_commands.StartTimer.start_to_fire_timeout:type_name -> google.protobuf.Duration
	18, // 16: coresdk.workflow_commands.ScheduleActivity.header_fields:type_name -> coresdk.workflow_commands.ScheduleActivity.HeaderFieldsEntry
	26, // 17: coresdk.workflow_commands.ScheduleActivity.arguments:type_name -> coresdk.common.Payload
	25, // 18: coresdk.workflow_commands.ScheduleActivity.schedule_to_close_timeout:type_name -> google.protobuf.Duration
	25, // 19: coresdk.workflow_commands.ScheduleActivity.schedule_to_start_timeout:type_name -> google.protobuf.Duration
	25, // 20: coresdk.workflow_commands.ScheduleActivity.start_to_close_timeout:type_name -> google.protobuf.Duration
	25, // 21: coresdk.workflow_commands.ScheduleActivity.heartbeat_timeout:type_name -> google.protobuf.Duration
	27, // 22: coresdk.workflow_commands.ScheduleActivity.retry_policy:type_name -> coresdk.common.RetryPolicy
	0,  // 23: coresdk.workflow_commands.ScheduleActivity.cancellation_type:type_name -> coresdk.workflow_commands.ActivityCancellationType
	7,  // 24: coresdk.workflow_commands.QueryResult.succeeded:type_name -> coresdk.workflow_commands.QuerySuccess
	28, // 25: coresdk.workflow_commands.QueryResult.failed:type_name -> temporal.api.failure.v1.Failure
	26, // 26: coresdk.workflow_commands.QuerySuccess.response:type_name -> coresdk.common.Payload
	26, // 27: coresdk.workflow_commands.CompleteWorkflowExecution.result:type_name -> coresdk.common.Payload
	28, // 28: coresdk.workflow_commands.FailWorkflowExecution.failure:type_name -> temporal.api.failure.v1.Failure
	26, // 29: coresdk.workflow_commands.ContinueAsNewWorkflowExecution.arguments:type_name -> coresdk.common.Payload
	25, // 30: coresdk.workflow_commands.ContinueAsNewWorkflowExecution.workflow_run_timeout:type_name -> google.protobuf.Duration
	25, // 31: coresdk.workflow_commands.ContinueAsNewWorkflowExecution.workflow_task_timeout:type_name -> google.protobuf.Duration
	19, // 32: coresdk.workflow_commands.ContinueAsNewWorkflowExecution.memo:type_name -> coresdk.workflow_commands.ContinueAsNewWorkflowExecution.MemoEntry
	20, // 33: coresdk.workflow_commands.ContinueAsNewWorkflowExecution.header:type_name -> coresdk.workflow_commands.ContinueAsNewWorkflowExecution.HeaderEntry
	21, // 34: coresdk.workflow_commands.ContinueAsNewWorkflowExecution.search_attributes:type_name -> coresdk.workflow_commands.ContinueAsNewWorkflowExecution.SearchAttributesEntry
	26, // 35: coresdk.workflow_commands.StartChildWorkflowExecution.input:type_name -> coresdk.common.Payload
	25, // 36: coresdk.workflow_commands.StartChildWorkflowExecution.workflow_execution_timeout:type_name -> google.protobuf.Duration
	25, // 37: coresdk.workflow_commands.StartChildWorkflowExecution.workflow_run_timeout:type_name -> google.protobuf.Duration
	25, // 38: coresdk.workflow_commands.StartChildWorkflowExecution.workflow_task_timeout:type_name -> google.protobuf.Duration
	29, // 39: coresdk.workflow_commands.StartChildWorkflowExecution.parent_close_policy:type_name -> coresdk.child_workflow.ParentClosePolicy
	30, // 40: coresdk.workflow_commands.StartChildWorkflowExecution.workflow_id_reuse_policy:type_name -> coresdk.common.WorkflowIdReusePolicy
	27, // 41: coresdk.workflow_commands.StartChildWorkflowExecution.retry_policy:type_name -> coresdk.common.RetryPolicy
	22, // 42: coresdk.workflow_commands.StartChildWorkflowExecution.header:type_name -> coresdk.workflow_commands.StartChildWorkflowExecution.HeaderEntry
	23, // 43: coresdk.workflow_commands.StartChildWorkflowExecution.memo:type_name -> coresdk.workflow_commands.StartChildWorkflowExecution.MemoEntry
	24, // 44: coresdk.workflow_commands.StartChildWorkflowExecution.search_attributes:type_name -> coresdk.workflow_commands.StartChildWorkflowExecution.SearchAttributesEntry
	31, // 45: coresdk.workflow_commands.StartChildWorkflowExecution.cancellation_type:type_name -> coresdk.child_workflow.ChildWorkflowCancellationType
	32, // 46: coresdk.workflow_commands.RequestCancelExternalWorkflowExecution.workflow_execution:type_name -> coresdk.common.NamespacedWorkflowExecution
	32, // 47: coresdk.workflow_commands.SignalExternalWorkflowExecution.workflow_execution:type_name -> coresdk.common.NamespacedWorkflowExecution
	26, // 48: coresdk.workflow_commands.SignalExternalWorkflowExecution.args:type_name -> coresdk.common.Payload
	26, // 49: coresdk.workflow_commands.ScheduleActivity.HeaderFieldsEntry.value:type_name -> coresdk.common.Payload
	26, // 50: coresdk.workflow_commands.ContinueAsNewWorkflowExecution.MemoEntry.value:type_name -> coresdk.common.Payload
	26, // 51: coresdk.workflow_commands.ContinueAsNewWorkflowExecution.HeaderEntry.value:type_name -> coresdk.common.Payload
	26, // 52: coresdk.workflow_commands.ContinueAsNewWorkflowExecution.SearchAttributesEntry.value:type_name -> coresdk.common.Payload
	26, // 53: coresdk.workflow_commands.StartChildWorkflowExecution.HeaderEntry.value:type_name -> coresdk.common.Payload
	26, // 54: coresdk.workflow_commands.StartChildWorkflowExecution.MemoEntry.value:type_name -> coresdk.common.Payload
	26, // 55: coresdk.workflow_commands.StartChildWorkflowExecution.SearchAttributesEntry.value:type_name -> coresdk.common.Payload
	56, // [56:56] is the sub-list for method output_type
	56, // [56:56] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_workflow_commands_proto_init() }
func file_workflow_commands_proto_init() {
	if File_workflow_commands_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_workflow_commands_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_commands_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTimer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_commands_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTimer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_commands_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_commands_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCancelActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_commands_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_commands_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_commands_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteWorkflowExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_commands_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailWorkflowExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_commands_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinueAsNewWorkflowExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_commands_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelWorkflowExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_commands_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPatchMarker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_commands_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartChildWorkflowExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_commands_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelUnstartedChildWorkflowExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_commands_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCancelExternalWorkflowExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_commands_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalExternalWorkflowExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_commands_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelSignalWorkflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_workflow_commands_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*WorkflowCommand_StartTimer)(nil),
		(*WorkflowCommand_ScheduleActivity)(nil),
		(*WorkflowCommand_RespondToQuery)(nil),
		(*WorkflowCommand_RequestCancelActivity)(nil),
		(*WorkflowCommand_CancelTimer)(nil),
		(*WorkflowCommand_CompleteWorkflowExecution)(nil),
		(*WorkflowCommand_FailWorkflowExecution)(nil),
		(*WorkflowCommand_ContinueAsNewWorkflowExecution)(nil),
		(*WorkflowCommand_CancelWorkflowExecution)(nil),
		(*WorkflowCommand_SetPatchMarker)(nil),
		(*WorkflowCommand_StartChildWorkflowExecution)(nil),
		(*WorkflowCommand_CancelUnstartedChildWorkflowExecution)(nil),
		(*WorkflowCommand_RequestCancelExternalWorkflowExecution)(nil),
		(*WorkflowCommand_SignalExternalWorkflowExecution)(nil),
		(*WorkflowCommand_CancelSignalWorkflow)(nil),
	}
	file_workflow_commands_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*QueryResult_Succeeded)(nil),
		(*QueryResult_Failed)(nil),
	}
	file_workflow_commands_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*RequestCancelExternalWorkflowExecution_WorkflowExecution)(nil),
		(*RequestCancelExternalWorkflowExecution_ChildWorkflowId)(nil),
	}
	file_workflow_commands_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*SignalExternalWorkflowExecution_WorkflowExecution)(nil),
		(*SignalExternalWorkflowExecution_ChildWorkflowId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_workflow_commands_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_workflow_commands_proto_goTypes,
		DependencyIndexes: file_workflow_commands_proto_depIdxs,
		EnumInfos:         file_workflow_commands_proto_enumTypes,
		MessageInfos:      file_workflow_commands_proto_msgTypes,
	}.Build()
	File_workflow_commands_proto = out.File
	file_workflow_commands_proto_rawDesc = nil
	file_workflow_commands_proto_goTypes = nil
	file_workflow_commands_proto_depIdxs = nil
}
