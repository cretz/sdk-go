// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: workflow_commands.proto

//*
// Definitions for commands from a workflow in lang SDK to core. While a workflow processes a batch
// of activation jobs, it accumulates these commands to be sent back to core to conclude that
// activation.

package coresdk_workflow_commands

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	v1 "go.temporal.io/api/failure/v1"
	childworkflowpb "go.temporal.io/sdk/sdkcore/internal/ffi/corepb/childworkflowpb"
	commonpb "go.temporal.io/sdk/sdkcore/internal/ffi/corepb/commonpb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ActivityCancellationType int32

const (
	/// Initiate a cancellation request and immediately report cancellation to the workflow.
	TRY_CANCEL ActivityCancellationType = 0
	/// Wait for activity cancellation completion. Note that activity must heartbeat to receive a
	/// cancellation notification. This can block the cancellation for a long time if activity
	/// doesn't heartbeat or chooses to ignore the cancellation request.
	WAIT_CANCELLATION_COMPLETED ActivityCancellationType = 1
	/// Do not request cancellation of the activity and immediately report cancellation to the
	/// workflow
	ABANDON ActivityCancellationType = 2
)

var ActivityCancellationType_name = map[int32]string{
	0: "TRY_CANCEL",
	1: "WAIT_CANCELLATION_COMPLETED",
	2: "ABANDON",
}

var ActivityCancellationType_value = map[string]int32{
	"TRY_CANCEL":                  0,
	"WAIT_CANCELLATION_COMPLETED": 1,
	"ABANDON":                     2,
}

func (ActivityCancellationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c27752d5c26de951, []int{0}
}

type WorkflowCommand struct {
	// Types that are valid to be assigned to Variant:
	//	*WorkflowCommand_StartTimer
	//	*WorkflowCommand_ScheduleActivity
	//	*WorkflowCommand_RespondToQuery
	//	*WorkflowCommand_RequestCancelActivity
	//	*WorkflowCommand_CancelTimer
	//	*WorkflowCommand_CompleteWorkflowExecution
	//	*WorkflowCommand_FailWorkflowExecution
	//	*WorkflowCommand_ContinueAsNewWorkflowExecution
	//	*WorkflowCommand_CancelWorkflowExecution
	//	*WorkflowCommand_SetPatchMarker
	//	*WorkflowCommand_StartChildWorkflowExecution
	//	*WorkflowCommand_CancelUnstartedChildWorkflowExecution
	//	*WorkflowCommand_RequestCancelExternalWorkflowExecution
	//	*WorkflowCommand_SignalExternalWorkflowExecution
	//	*WorkflowCommand_CancelSignalWorkflow
	Variant isWorkflowCommand_Variant `protobuf_oneof:"variant"`
}

func (m *WorkflowCommand) Reset()      { *m = WorkflowCommand{} }
func (*WorkflowCommand) ProtoMessage() {}
func (*WorkflowCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_c27752d5c26de951, []int{0}
}
func (m *WorkflowCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowCommand.Merge(m, src)
}
func (m *WorkflowCommand) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowCommand.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowCommand proto.InternalMessageInfo

type isWorkflowCommand_Variant interface {
	isWorkflowCommand_Variant()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WorkflowCommand_StartTimer struct {
	StartTimer *StartTimer `protobuf:"bytes,1,opt,name=start_timer,json=startTimer,proto3,oneof" json:"start_timer,omitempty"`
}
type WorkflowCommand_ScheduleActivity struct {
	ScheduleActivity *ScheduleActivity `protobuf:"bytes,2,opt,name=schedule_activity,json=scheduleActivity,proto3,oneof" json:"schedule_activity,omitempty"`
}
type WorkflowCommand_RespondToQuery struct {
	RespondToQuery *QueryResult `protobuf:"bytes,3,opt,name=respond_to_query,json=respondToQuery,proto3,oneof" json:"respond_to_query,omitempty"`
}
type WorkflowCommand_RequestCancelActivity struct {
	RequestCancelActivity *RequestCancelActivity `protobuf:"bytes,4,opt,name=request_cancel_activity,json=requestCancelActivity,proto3,oneof" json:"request_cancel_activity,omitempty"`
}
type WorkflowCommand_CancelTimer struct {
	CancelTimer *CancelTimer `protobuf:"bytes,5,opt,name=cancel_timer,json=cancelTimer,proto3,oneof" json:"cancel_timer,omitempty"`
}
type WorkflowCommand_CompleteWorkflowExecution struct {
	CompleteWorkflowExecution *CompleteWorkflowExecution `protobuf:"bytes,6,opt,name=complete_workflow_execution,json=completeWorkflowExecution,proto3,oneof" json:"complete_workflow_execution,omitempty"`
}
type WorkflowCommand_FailWorkflowExecution struct {
	FailWorkflowExecution *FailWorkflowExecution `protobuf:"bytes,7,opt,name=fail_workflow_execution,json=failWorkflowExecution,proto3,oneof" json:"fail_workflow_execution,omitempty"`
}
type WorkflowCommand_ContinueAsNewWorkflowExecution struct {
	ContinueAsNewWorkflowExecution *ContinueAsNewWorkflowExecution `protobuf:"bytes,8,opt,name=continue_as_new_workflow_execution,json=continueAsNewWorkflowExecution,proto3,oneof" json:"continue_as_new_workflow_execution,omitempty"`
}
type WorkflowCommand_CancelWorkflowExecution struct {
	CancelWorkflowExecution *CancelWorkflowExecution `protobuf:"bytes,9,opt,name=cancel_workflow_execution,json=cancelWorkflowExecution,proto3,oneof" json:"cancel_workflow_execution,omitempty"`
}
type WorkflowCommand_SetPatchMarker struct {
	SetPatchMarker *SetPatchMarker `protobuf:"bytes,10,opt,name=set_patch_marker,json=setPatchMarker,proto3,oneof" json:"set_patch_marker,omitempty"`
}
type WorkflowCommand_StartChildWorkflowExecution struct {
	StartChildWorkflowExecution *StartChildWorkflowExecution `protobuf:"bytes,11,opt,name=start_child_workflow_execution,json=startChildWorkflowExecution,proto3,oneof" json:"start_child_workflow_execution,omitempty"`
}
type WorkflowCommand_CancelUnstartedChildWorkflowExecution struct {
	CancelUnstartedChildWorkflowExecution *CancelUnstartedChildWorkflowExecution `protobuf:"bytes,12,opt,name=cancel_unstarted_child_workflow_execution,json=cancelUnstartedChildWorkflowExecution,proto3,oneof" json:"cancel_unstarted_child_workflow_execution,omitempty"`
}
type WorkflowCommand_RequestCancelExternalWorkflowExecution struct {
	RequestCancelExternalWorkflowExecution *RequestCancelExternalWorkflowExecution `protobuf:"bytes,13,opt,name=request_cancel_external_workflow_execution,json=requestCancelExternalWorkflowExecution,proto3,oneof" json:"request_cancel_external_workflow_execution,omitempty"`
}
type WorkflowCommand_SignalExternalWorkflowExecution struct {
	SignalExternalWorkflowExecution *SignalExternalWorkflowExecution `protobuf:"bytes,14,opt,name=signal_external_workflow_execution,json=signalExternalWorkflowExecution,proto3,oneof" json:"signal_external_workflow_execution,omitempty"`
}
type WorkflowCommand_CancelSignalWorkflow struct {
	CancelSignalWorkflow *CancelSignalWorkflow `protobuf:"bytes,15,opt,name=cancel_signal_workflow,json=cancelSignalWorkflow,proto3,oneof" json:"cancel_signal_workflow,omitempty"`
}

func (*WorkflowCommand_StartTimer) isWorkflowCommand_Variant()                             {}
func (*WorkflowCommand_ScheduleActivity) isWorkflowCommand_Variant()                       {}
func (*WorkflowCommand_RespondToQuery) isWorkflowCommand_Variant()                         {}
func (*WorkflowCommand_RequestCancelActivity) isWorkflowCommand_Variant()                  {}
func (*WorkflowCommand_CancelTimer) isWorkflowCommand_Variant()                            {}
func (*WorkflowCommand_CompleteWorkflowExecution) isWorkflowCommand_Variant()              {}
func (*WorkflowCommand_FailWorkflowExecution) isWorkflowCommand_Variant()                  {}
func (*WorkflowCommand_ContinueAsNewWorkflowExecution) isWorkflowCommand_Variant()         {}
func (*WorkflowCommand_CancelWorkflowExecution) isWorkflowCommand_Variant()                {}
func (*WorkflowCommand_SetPatchMarker) isWorkflowCommand_Variant()                         {}
func (*WorkflowCommand_StartChildWorkflowExecution) isWorkflowCommand_Variant()            {}
func (*WorkflowCommand_CancelUnstartedChildWorkflowExecution) isWorkflowCommand_Variant()  {}
func (*WorkflowCommand_RequestCancelExternalWorkflowExecution) isWorkflowCommand_Variant() {}
func (*WorkflowCommand_SignalExternalWorkflowExecution) isWorkflowCommand_Variant()        {}
func (*WorkflowCommand_CancelSignalWorkflow) isWorkflowCommand_Variant()                   {}

func (m *WorkflowCommand) GetVariant() isWorkflowCommand_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (m *WorkflowCommand) GetStartTimer() *StartTimer {
	if x, ok := m.GetVariant().(*WorkflowCommand_StartTimer); ok {
		return x.StartTimer
	}
	return nil
}

func (m *WorkflowCommand) GetScheduleActivity() *ScheduleActivity {
	if x, ok := m.GetVariant().(*WorkflowCommand_ScheduleActivity); ok {
		return x.ScheduleActivity
	}
	return nil
}

func (m *WorkflowCommand) GetRespondToQuery() *QueryResult {
	if x, ok := m.GetVariant().(*WorkflowCommand_RespondToQuery); ok {
		return x.RespondToQuery
	}
	return nil
}

func (m *WorkflowCommand) GetRequestCancelActivity() *RequestCancelActivity {
	if x, ok := m.GetVariant().(*WorkflowCommand_RequestCancelActivity); ok {
		return x.RequestCancelActivity
	}
	return nil
}

func (m *WorkflowCommand) GetCancelTimer() *CancelTimer {
	if x, ok := m.GetVariant().(*WorkflowCommand_CancelTimer); ok {
		return x.CancelTimer
	}
	return nil
}

func (m *WorkflowCommand) GetCompleteWorkflowExecution() *CompleteWorkflowExecution {
	if x, ok := m.GetVariant().(*WorkflowCommand_CompleteWorkflowExecution); ok {
		return x.CompleteWorkflowExecution
	}
	return nil
}

func (m *WorkflowCommand) GetFailWorkflowExecution() *FailWorkflowExecution {
	if x, ok := m.GetVariant().(*WorkflowCommand_FailWorkflowExecution); ok {
		return x.FailWorkflowExecution
	}
	return nil
}

func (m *WorkflowCommand) GetContinueAsNewWorkflowExecution() *ContinueAsNewWorkflowExecution {
	if x, ok := m.GetVariant().(*WorkflowCommand_ContinueAsNewWorkflowExecution); ok {
		return x.ContinueAsNewWorkflowExecution
	}
	return nil
}

func (m *WorkflowCommand) GetCancelWorkflowExecution() *CancelWorkflowExecution {
	if x, ok := m.GetVariant().(*WorkflowCommand_CancelWorkflowExecution); ok {
		return x.CancelWorkflowExecution
	}
	return nil
}

func (m *WorkflowCommand) GetSetPatchMarker() *SetPatchMarker {
	if x, ok := m.GetVariant().(*WorkflowCommand_SetPatchMarker); ok {
		return x.SetPatchMarker
	}
	return nil
}

func (m *WorkflowCommand) GetStartChildWorkflowExecution() *StartChildWorkflowExecution {
	if x, ok := m.GetVariant().(*WorkflowCommand_StartChildWorkflowExecution); ok {
		return x.StartChildWorkflowExecution
	}
	return nil
}

func (m *WorkflowCommand) GetCancelUnstartedChildWorkflowExecution() *CancelUnstartedChildWorkflowExecution {
	if x, ok := m.GetVariant().(*WorkflowCommand_CancelUnstartedChildWorkflowExecution); ok {
		return x.CancelUnstartedChildWorkflowExecution
	}
	return nil
}

func (m *WorkflowCommand) GetRequestCancelExternalWorkflowExecution() *RequestCancelExternalWorkflowExecution {
	if x, ok := m.GetVariant().(*WorkflowCommand_RequestCancelExternalWorkflowExecution); ok {
		return x.RequestCancelExternalWorkflowExecution
	}
	return nil
}

func (m *WorkflowCommand) GetSignalExternalWorkflowExecution() *SignalExternalWorkflowExecution {
	if x, ok := m.GetVariant().(*WorkflowCommand_SignalExternalWorkflowExecution); ok {
		return x.SignalExternalWorkflowExecution
	}
	return nil
}

func (m *WorkflowCommand) GetCancelSignalWorkflow() *CancelSignalWorkflow {
	if x, ok := m.GetVariant().(*WorkflowCommand_CancelSignalWorkflow); ok {
		return x.CancelSignalWorkflow
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WorkflowCommand) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WorkflowCommand_StartTimer)(nil),
		(*WorkflowCommand_ScheduleActivity)(nil),
		(*WorkflowCommand_RespondToQuery)(nil),
		(*WorkflowCommand_RequestCancelActivity)(nil),
		(*WorkflowCommand_CancelTimer)(nil),
		(*WorkflowCommand_CompleteWorkflowExecution)(nil),
		(*WorkflowCommand_FailWorkflowExecution)(nil),
		(*WorkflowCommand_ContinueAsNewWorkflowExecution)(nil),
		(*WorkflowCommand_CancelWorkflowExecution)(nil),
		(*WorkflowCommand_SetPatchMarker)(nil),
		(*WorkflowCommand_StartChildWorkflowExecution)(nil),
		(*WorkflowCommand_CancelUnstartedChildWorkflowExecution)(nil),
		(*WorkflowCommand_RequestCancelExternalWorkflowExecution)(nil),
		(*WorkflowCommand_SignalExternalWorkflowExecution)(nil),
		(*WorkflowCommand_CancelSignalWorkflow)(nil),
	}
}

type StartTimer struct {
	/// Lang's incremental sequence number, used as the operation identifier
	Seq                uint32          `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	StartToFireTimeout *types.Duration `protobuf:"bytes,2,opt,name=start_to_fire_timeout,json=startToFireTimeout,proto3" json:"start_to_fire_timeout,omitempty"`
}

func (m *StartTimer) Reset()      { *m = StartTimer{} }
func (*StartTimer) ProtoMessage() {}
func (*StartTimer) Descriptor() ([]byte, []int) {
	return fileDescriptor_c27752d5c26de951, []int{1}
}
func (m *StartTimer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartTimer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartTimer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartTimer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartTimer.Merge(m, src)
}
func (m *StartTimer) XXX_Size() int {
	return m.Size()
}
func (m *StartTimer) XXX_DiscardUnknown() {
	xxx_messageInfo_StartTimer.DiscardUnknown(m)
}

var xxx_messageInfo_StartTimer proto.InternalMessageInfo

func (m *StartTimer) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *StartTimer) GetStartToFireTimeout() *types.Duration {
	if m != nil {
		return m.StartToFireTimeout
	}
	return nil
}

type CancelTimer struct {
	/// Lang's incremental sequence number as passed to `StartTimer`
	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *CancelTimer) Reset()      { *m = CancelTimer{} }
func (*CancelTimer) ProtoMessage() {}
func (*CancelTimer) Descriptor() ([]byte, []int) {
	return fileDescriptor_c27752d5c26de951, []int{2}
}
func (m *CancelTimer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelTimer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelTimer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelTimer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelTimer.Merge(m, src)
}
func (m *CancelTimer) XXX_Size() int {
	return m.Size()
}
func (m *CancelTimer) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelTimer.DiscardUnknown(m)
}

var xxx_messageInfo_CancelTimer proto.InternalMessageInfo

func (m *CancelTimer) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type ScheduleActivity struct {
	/// Lang's incremental sequence number, used as the operation identifier
	Seq          uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	ActivityId   string `protobuf:"bytes,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ActivityType string `protobuf:"bytes,3,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	Namespace    string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The name of the task queue to place this activity request in
	TaskQueue    string                       `protobuf:"bytes,5,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	HeaderFields map[string]*commonpb.Payload `protobuf:"bytes,6,rep,name=header_fields,json=headerFields,proto3" json:"header_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// Arguments/input to the activity. Called "input" upstream.
	Arguments []*commonpb.Payload `protobuf:"bytes,7,rep,name=arguments,proto3" json:"arguments,omitempty"`
	/// Indicates how long the caller is willing to wait for an activity completion. Limits how long
	/// retries will be attempted. Either this or start_to_close_timeout_seconds must be specified.
	/// When not specified defaults to the workflow execution timeout.
	ScheduleToCloseTimeout *types.Duration `protobuf:"bytes,8,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3" json:"schedule_to_close_timeout,omitempty"`
	/// Limits time an activity task can stay in a task queue before a worker picks it up. This
	/// timeout is always non retryable as all a retry would achieve is to put it back into the same
	/// queue. Defaults to schedule_to_close_timeout or workflow execution timeout if not specified.
	ScheduleToStartTimeout *types.Duration `protobuf:"bytes,9,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3" json:"schedule_to_start_timeout,omitempty"`
	/// Maximum time an activity is allowed to execute after a pick up by a worker. This timeout is
	/// always retryable. Either this or schedule_to_close_timeout must be specified.
	StartToCloseTimeout *types.Duration `protobuf:"bytes,10,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3" json:"start_to_close_timeout,omitempty"`
	/// Maximum time allowed between successful worker heartbeats.
	HeartbeatTimeout *types.Duration `protobuf:"bytes,11,opt,name=heartbeat_timeout,json=heartbeatTimeout,proto3" json:"heartbeat_timeout,omitempty"`
	/// Activities are provided by a default retry policy controlled through the service dynamic
	/// configuration. Retries are happening up to schedule_to_close_timeout. To disable retries set
	/// retry_policy.maximum_attempts to 2.
	RetryPolicy *commonpb.RetryPolicy `protobuf:"bytes,12,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	/// Defines behaviour of the underlying workflow when activity cancellation has been requested.
	CancellationType ActivityCancellationType `protobuf:"varint,13,opt,name=cancellation_type,json=cancellationType,proto3,enum=coresdk.workflow_commands.ActivityCancellationType" json:"cancellation_type,omitempty"`
}

func (m *ScheduleActivity) Reset()      { *m = ScheduleActivity{} }
func (*ScheduleActivity) ProtoMessage() {}
func (*ScheduleActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_c27752d5c26de951, []int{3}
}
func (m *ScheduleActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduleActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduleActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduleActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleActivity.Merge(m, src)
}
func (m *ScheduleActivity) XXX_Size() int {
	return m.Size()
}
func (m *ScheduleActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleActivity.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleActivity proto.InternalMessageInfo

func (m *ScheduleActivity) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ScheduleActivity) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *ScheduleActivity) GetActivityType() string {
	if m != nil {
		return m.ActivityType
	}
	return ""
}

func (m *ScheduleActivity) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ScheduleActivity) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

func (m *ScheduleActivity) GetHeaderFields() map[string]*commonpb.Payload {
	if m != nil {
		return m.HeaderFields
	}
	return nil
}

func (m *ScheduleActivity) GetArguments() []*commonpb.Payload {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *ScheduleActivity) GetScheduleToCloseTimeout() *types.Duration {
	if m != nil {
		return m.ScheduleToCloseTimeout
	}
	return nil
}

func (m *ScheduleActivity) GetScheduleToStartTimeout() *types.Duration {
	if m != nil {
		return m.ScheduleToStartTimeout
	}
	return nil
}

func (m *ScheduleActivity) GetStartToCloseTimeout() *types.Duration {
	if m != nil {
		return m.StartToCloseTimeout
	}
	return nil
}

func (m *ScheduleActivity) GetHeartbeatTimeout() *types.Duration {
	if m != nil {
		return m.HeartbeatTimeout
	}
	return nil
}

func (m *ScheduleActivity) GetRetryPolicy() *commonpb.RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *ScheduleActivity) GetCancellationType() ActivityCancellationType {
	if m != nil {
		return m.CancellationType
	}
	return TRY_CANCEL
}

type RequestCancelActivity struct {
	/// Lang's incremental sequence number as passed to `ScheduleActivity`
	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *RequestCancelActivity) Reset()      { *m = RequestCancelActivity{} }
func (*RequestCancelActivity) ProtoMessage() {}
func (*RequestCancelActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_c27752d5c26de951, []int{4}
}
func (m *RequestCancelActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCancelActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCancelActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCancelActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCancelActivity.Merge(m, src)
}
func (m *RequestCancelActivity) XXX_Size() int {
	return m.Size()
}
func (m *RequestCancelActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCancelActivity.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCancelActivity proto.InternalMessageInfo

func (m *RequestCancelActivity) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type QueryResult struct {
	/// Corresponds to the id provided in the activation job
	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// Types that are valid to be assigned to Variant:
	//	*QueryResult_Succeeded
	//	*QueryResult_Failed
	Variant isQueryResult_Variant `protobuf_oneof:"variant"`
}

func (m *QueryResult) Reset()      { *m = QueryResult{} }
func (*QueryResult) ProtoMessage() {}
func (*QueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_c27752d5c26de951, []int{5}
}
func (m *QueryResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResult.Merge(m, src)
}
func (m *QueryResult) XXX_Size() int {
	return m.Size()
}
func (m *QueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResult proto.InternalMessageInfo

type isQueryResult_Variant interface {
	isQueryResult_Variant()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type QueryResult_Succeeded struct {
	Succeeded *QuerySuccess `protobuf:"bytes,2,opt,name=succeeded,proto3,oneof" json:"succeeded,omitempty"`
}
type QueryResult_Failed struct {
	Failed *v1.Failure `protobuf:"bytes,3,opt,name=failed,proto3,oneof" json:"failed,omitempty"`
}

func (*QueryResult_Succeeded) isQueryResult_Variant() {}
func (*QueryResult_Failed) isQueryResult_Variant()    {}

func (m *QueryResult) GetVariant() isQueryResult_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (m *QueryResult) GetQueryId() string {
	if m != nil {
		return m.QueryId
	}
	return ""
}

func (m *QueryResult) GetSucceeded() *QuerySuccess {
	if x, ok := m.GetVariant().(*QueryResult_Succeeded); ok {
		return x.Succeeded
	}
	return nil
}

func (m *QueryResult) GetFailed() *v1.Failure {
	if x, ok := m.GetVariant().(*QueryResult_Failed); ok {
		return x.Failed
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueryResult) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueryResult_Succeeded)(nil),
		(*QueryResult_Failed)(nil),
	}
}

type QuerySuccess struct {
	Response *commonpb.Payload `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *QuerySuccess) Reset()      { *m = QuerySuccess{} }
func (*QuerySuccess) ProtoMessage() {}
func (*QuerySuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_c27752d5c26de951, []int{6}
}
func (m *QuerySuccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySuccess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySuccess.Merge(m, src)
}
func (m *QuerySuccess) XXX_Size() int {
	return m.Size()
}
func (m *QuerySuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySuccess.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySuccess proto.InternalMessageInfo

func (m *QuerySuccess) GetResponse() *commonpb.Payload {
	if m != nil {
		return m.Response
	}
	return nil
}

/// Issued when the workflow completes successfully
type CompleteWorkflowExecution struct {
	Result *commonpb.Payload `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *CompleteWorkflowExecution) Reset()      { *m = CompleteWorkflowExecution{} }
func (*CompleteWorkflowExecution) ProtoMessage() {}
func (*CompleteWorkflowExecution) Descriptor() ([]byte, []int) {
	return fileDescriptor_c27752d5c26de951, []int{7}
}
func (m *CompleteWorkflowExecution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompleteWorkflowExecution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompleteWorkflowExecution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompleteWorkflowExecution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompleteWorkflowExecution.Merge(m, src)
}
func (m *CompleteWorkflowExecution) XXX_Size() int {
	return m.Size()
}
func (m *CompleteWorkflowExecution) XXX_DiscardUnknown() {
	xxx_messageInfo_CompleteWorkflowExecution.DiscardUnknown(m)
}

var xxx_messageInfo_CompleteWorkflowExecution proto.InternalMessageInfo

func (m *CompleteWorkflowExecution) GetResult() *commonpb.Payload {
	if m != nil {
		return m.Result
	}
	return nil
}

/// Issued when the workflow errors out
type FailWorkflowExecution struct {
	Failure *v1.Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (m *FailWorkflowExecution) Reset()      { *m = FailWorkflowExecution{} }
func (*FailWorkflowExecution) ProtoMessage() {}
func (*FailWorkflowExecution) Descriptor() ([]byte, []int) {
	return fileDescriptor_c27752d5c26de951, []int{8}
}
func (m *FailWorkflowExecution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FailWorkflowExecution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FailWorkflowExecution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FailWorkflowExecution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailWorkflowExecution.Merge(m, src)
}
func (m *FailWorkflowExecution) XXX_Size() int {
	return m.Size()
}
func (m *FailWorkflowExecution) XXX_DiscardUnknown() {
	xxx_messageInfo_FailWorkflowExecution.DiscardUnknown(m)
}

var xxx_messageInfo_FailWorkflowExecution proto.InternalMessageInfo

func (m *FailWorkflowExecution) GetFailure() *v1.Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

// TODO: Maybe combine all execution resolves into one message
/// Continue the workflow as a new execution. Unless noted otherwise, unset or default field values
/// will re-use the issuing workflow's values.
type ContinueAsNewWorkflowExecution struct {
	/// The identifier the lang-specific sdk uses to execute workflow code
	WorkflowType string `protobuf:"bytes,1,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	/// Task queue for the new workflow execution
	TaskQueue string `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	/// Inputs to the workflow code. Should be specified. Will not re-use old arguments, as that
	/// typically wouldn't make any sense.
	Arguments []*commonpb.Payload `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
	/// Timeout for a single run of the new workflow.
	WorkflowRunTimeout *types.Duration `protobuf:"bytes,4,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3" json:"workflow_run_timeout,omitempty"`
	/// Timeout of a single workflow task.
	WorkflowTaskTimeout *types.Duration `protobuf:"bytes,5,opt,name=workflow_task_timeout,json=workflowTaskTimeout,proto3" json:"workflow_task_timeout,omitempty"`
	/// Memo fields
	Memo map[string]*commonpb.Payload `protobuf:"bytes,6,rep,name=memo,proto3" json:"memo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// Header fields
	Header map[string]*commonpb.Payload `protobuf:"bytes,7,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// Search attributes
	SearchAttributes map[string]*commonpb.Payload `protobuf:"bytes,8,rep,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ContinueAsNewWorkflowExecution) Reset()      { *m = ContinueAsNewWorkflowExecution{} }
func (*ContinueAsNewWorkflowExecution) ProtoMessage() {}
func (*ContinueAsNewWorkflowExecution) Descriptor() ([]byte, []int) {
	return fileDescriptor_c27752d5c26de951, []int{9}
}
func (m *ContinueAsNewWorkflowExecution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContinueAsNewWorkflowExecution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContinueAsNewWorkflowExecution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContinueAsNewWorkflowExecution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContinueAsNewWorkflowExecution.Merge(m, src)
}
func (m *ContinueAsNewWorkflowExecution) XXX_Size() int {
	return m.Size()
}
func (m *ContinueAsNewWorkflowExecution) XXX_DiscardUnknown() {
	xxx_messageInfo_ContinueAsNewWorkflowExecution.DiscardUnknown(m)
}

var xxx_messageInfo_ContinueAsNewWorkflowExecution proto.InternalMessageInfo

func (m *ContinueAsNewWorkflowExecution) GetWorkflowType() string {
	if m != nil {
		return m.WorkflowType
	}
	return ""
}

func (m *ContinueAsNewWorkflowExecution) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

func (m *ContinueAsNewWorkflowExecution) GetArguments() []*commonpb.Payload {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecution) GetWorkflowRunTimeout() *types.Duration {
	if m != nil {
		return m.WorkflowRunTimeout
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecution) GetWorkflowTaskTimeout() *types.Duration {
	if m != nil {
		return m.WorkflowTaskTimeout
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecution) GetMemo() map[string]*commonpb.Payload {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecution) GetHeader() map[string]*commonpb.Payload {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecution) GetSearchAttributes() map[string]*commonpb.Payload {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

/// Indicate a workflow has completed as cancelled. Generally sent as a response to an activation
/// containing a cancellation job.
type CancelWorkflowExecution struct {
}

func (m *CancelWorkflowExecution) Reset()      { *m = CancelWorkflowExecution{} }
func (*CancelWorkflowExecution) ProtoMessage() {}
func (*CancelWorkflowExecution) Descriptor() ([]byte, []int) {
	return fileDescriptor_c27752d5c26de951, []int{10}
}
func (m *CancelWorkflowExecution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelWorkflowExecution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelWorkflowExecution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelWorkflowExecution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelWorkflowExecution.Merge(m, src)
}
func (m *CancelWorkflowExecution) XXX_Size() int {
	return m.Size()
}
func (m *CancelWorkflowExecution) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelWorkflowExecution.DiscardUnknown(m)
}

var xxx_messageInfo_CancelWorkflowExecution proto.InternalMessageInfo

/// A request to set/check if a certain patch is present or not
type SetPatchMarker struct {
	// A user-chosen identifier for this patch. If the same identifier is used in multiple places in
	// the code, those places are considered to be versioned as one unit. IE: The check call will
	// return the same result for all of them
	PatchId string `protobuf:"bytes,1,opt,name=patch_id,json=patchId,proto3" json:"patch_id,omitempty"`
	// Can be set to true to indicate that branches using this change are being removed, and all
	// future worker deployments will only have the "with change" code in them.
	Deprecated bool `protobuf:"varint,2,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
}

func (m *SetPatchMarker) Reset()      { *m = SetPatchMarker{} }
func (*SetPatchMarker) ProtoMessage() {}
func (*SetPatchMarker) Descriptor() ([]byte, []int) {
	return fileDescriptor_c27752d5c26de951, []int{11}
}
func (m *SetPatchMarker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetPatchMarker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetPatchMarker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetPatchMarker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPatchMarker.Merge(m, src)
}
func (m *SetPatchMarker) XXX_Size() int {
	return m.Size()
}
func (m *SetPatchMarker) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPatchMarker.DiscardUnknown(m)
}

var xxx_messageInfo_SetPatchMarker proto.InternalMessageInfo

func (m *SetPatchMarker) GetPatchId() string {
	if m != nil {
		return m.PatchId
	}
	return ""
}

func (m *SetPatchMarker) GetDeprecated() bool {
	if m != nil {
		return m.Deprecated
	}
	return false
}

/// Start a child workflow execution
type StartChildWorkflowExecution struct {
	/// Lang's incremental sequence number, used as the operation identifier
	Seq          uint32              `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Namespace    string              `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowId   string              `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowType string              `protobuf:"bytes,4,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskQueue    string              `protobuf:"bytes,5,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	Input        []*commonpb.Payload `protobuf:"bytes,6,rep,name=input,proto3" json:"input,omitempty"`
	/// Total workflow execution timeout including retries and continue as new.
	WorkflowExecutionTimeout *types.Duration `protobuf:"bytes,7,opt,name=workflow_execution_timeout,json=workflowExecutionTimeout,proto3" json:"workflow_execution_timeout,omitempty"`
	/// Timeout of a single workflow run.
	WorkflowRunTimeout *types.Duration `protobuf:"bytes,8,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3" json:"workflow_run_timeout,omitempty"`
	/// Timeout of a single workflow task.
	WorkflowTaskTimeout *types.Duration `protobuf:"bytes,9,opt,name=workflow_task_timeout,json=workflowTaskTimeout,proto3" json:"workflow_task_timeout,omitempty"`
	/// Default: PARENT_CLOSE_POLICY_TERMINATE.
	ParentClosePolicy childworkflowpb.ParentClosePolicy `protobuf:"varint,10,opt,name=parent_close_policy,json=parentClosePolicy,proto3,enum=coresdk.child_workflow.ParentClosePolicy" json:"parent_close_policy,omitempty"`
	// string control = 11; (unused from StartChildWorkflowExecutionCommandAttributes)
	// Default: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
	WorkflowIdReusePolicy commonpb.WorkflowIdReusePolicy `protobuf:"varint,12,opt,name=workflow_id_reuse_policy,json=workflowIdReusePolicy,proto3,enum=coresdk.common.WorkflowIdReusePolicy" json:"workflow_id_reuse_policy,omitempty"`
	RetryPolicy           *commonpb.RetryPolicy          `protobuf:"bytes,13,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	CronSchedule          string                         `protobuf:"bytes,14,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	/// Header fields
	Header map[string]*commonpb.Payload `protobuf:"bytes,15,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// Memo fields
	Memo map[string]*commonpb.Payload `protobuf:"bytes,16,rep,name=memo,proto3" json:"memo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// Search attributes
	SearchAttributes map[string]*commonpb.Payload `protobuf:"bytes,17,rep,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// Defines behaviour of the underlying workflow when child workflow cancellation has been requested.
	CancellationType childworkflowpb.ChildWorkflowCancellationType `protobuf:"varint,18,opt,name=cancellation_type,json=cancellationType,proto3,enum=coresdk.child_workflow.ChildWorkflowCancellationType" json:"cancellation_type,omitempty"`
}

func (m *StartChildWorkflowExecution) Reset()      { *m = StartChildWorkflowExecution{} }
func (*StartChildWorkflowExecution) ProtoMessage() {}
func (*StartChildWorkflowExecution) Descriptor() ([]byte, []int) {
	return fileDescriptor_c27752d5c26de951, []int{12}
}
func (m *StartChildWorkflowExecution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartChildWorkflowExecution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartChildWorkflowExecution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartChildWorkflowExecution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartChildWorkflowExecution.Merge(m, src)
}
func (m *StartChildWorkflowExecution) XXX_Size() int {
	return m.Size()
}
func (m *StartChildWorkflowExecution) XXX_DiscardUnknown() {
	xxx_messageInfo_StartChildWorkflowExecution.DiscardUnknown(m)
}

var xxx_messageInfo_StartChildWorkflowExecution proto.InternalMessageInfo

func (m *StartChildWorkflowExecution) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *StartChildWorkflowExecution) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *StartChildWorkflowExecution) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *StartChildWorkflowExecution) GetWorkflowType() string {
	if m != nil {
		return m.WorkflowType
	}
	return ""
}

func (m *StartChildWorkflowExecution) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

func (m *StartChildWorkflowExecution) GetInput() []*commonpb.Payload {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *StartChildWorkflowExecution) GetWorkflowExecutionTimeout() *types.Duration {
	if m != nil {
		return m.WorkflowExecutionTimeout
	}
	return nil
}

func (m *StartChildWorkflowExecution) GetWorkflowRunTimeout() *types.Duration {
	if m != nil {
		return m.WorkflowRunTimeout
	}
	return nil
}

func (m *StartChildWorkflowExecution) GetWorkflowTaskTimeout() *types.Duration {
	if m != nil {
		return m.WorkflowTaskTimeout
	}
	return nil
}

func (m *StartChildWorkflowExecution) GetParentClosePolicy() childworkflowpb.ParentClosePolicy {
	if m != nil {
		return m.ParentClosePolicy
	}
	return childworkflowpb.PARENT_CLOSE_POLICY_UNSPECIFIED
}

func (m *StartChildWorkflowExecution) GetWorkflowIdReusePolicy() commonpb.WorkflowIdReusePolicy {
	if m != nil {
		return m.WorkflowIdReusePolicy
	}
	return commonpb.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED
}

func (m *StartChildWorkflowExecution) GetRetryPolicy() *commonpb.RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *StartChildWorkflowExecution) GetCronSchedule() string {
	if m != nil {
		return m.CronSchedule
	}
	return ""
}

func (m *StartChildWorkflowExecution) GetHeader() map[string]*commonpb.Payload {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *StartChildWorkflowExecution) GetMemo() map[string]*commonpb.Payload {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *StartChildWorkflowExecution) GetSearchAttributes() map[string]*commonpb.Payload {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

func (m *StartChildWorkflowExecution) GetCancellationType() childworkflowpb.ChildWorkflowCancellationType {
	if m != nil {
		return m.CancellationType
	}
	return childworkflowpb.ABANDON
}

/// Cancel a not-yet-started child workflow
type CancelUnstartedChildWorkflowExecution struct {
	// Sequence number as given to the `StartChildWorkflowExecution` command
	ChildWorkflowSeq uint32 `protobuf:"varint,1,opt,name=child_workflow_seq,json=childWorkflowSeq,proto3" json:"child_workflow_seq,omitempty"`
}

func (m *CancelUnstartedChildWorkflowExecution) Reset()      { *m = CancelUnstartedChildWorkflowExecution{} }
func (*CancelUnstartedChildWorkflowExecution) ProtoMessage() {}
func (*CancelUnstartedChildWorkflowExecution) Descriptor() ([]byte, []int) {
	return fileDescriptor_c27752d5c26de951, []int{13}
}
func (m *CancelUnstartedChildWorkflowExecution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelUnstartedChildWorkflowExecution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelUnstartedChildWorkflowExecution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelUnstartedChildWorkflowExecution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelUnstartedChildWorkflowExecution.Merge(m, src)
}
func (m *CancelUnstartedChildWorkflowExecution) XXX_Size() int {
	return m.Size()
}
func (m *CancelUnstartedChildWorkflowExecution) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelUnstartedChildWorkflowExecution.DiscardUnknown(m)
}

var xxx_messageInfo_CancelUnstartedChildWorkflowExecution proto.InternalMessageInfo

func (m *CancelUnstartedChildWorkflowExecution) GetChildWorkflowSeq() uint32 {
	if m != nil {
		return m.ChildWorkflowSeq
	}
	return 0
}

/// Request cancellation of an external workflow execution (which may be a started child)
type RequestCancelExternalWorkflowExecution struct {
	/// Lang's incremental sequence number, used as the operation identifier
	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	// What workflow is being targeted
	//
	// Types that are valid to be assigned to Target:
	//	*RequestCancelExternalWorkflowExecution_WorkflowExecution
	//	*RequestCancelExternalWorkflowExecution_ChildWorkflowId
	Target isRequestCancelExternalWorkflowExecution_Target `protobuf_oneof:"target"`
}

func (m *RequestCancelExternalWorkflowExecution) Reset() {
	*m = RequestCancelExternalWorkflowExecution{}
}
func (*RequestCancelExternalWorkflowExecution) ProtoMessage() {}
func (*RequestCancelExternalWorkflowExecution) Descriptor() ([]byte, []int) {
	return fileDescriptor_c27752d5c26de951, []int{14}
}
func (m *RequestCancelExternalWorkflowExecution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCancelExternalWorkflowExecution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCancelExternalWorkflowExecution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCancelExternalWorkflowExecution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCancelExternalWorkflowExecution.Merge(m, src)
}
func (m *RequestCancelExternalWorkflowExecution) XXX_Size() int {
	return m.Size()
}
func (m *RequestCancelExternalWorkflowExecution) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCancelExternalWorkflowExecution.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCancelExternalWorkflowExecution proto.InternalMessageInfo

type isRequestCancelExternalWorkflowExecution_Target interface {
	isRequestCancelExternalWorkflowExecution_Target()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RequestCancelExternalWorkflowExecution_WorkflowExecution struct {
	WorkflowExecution *commonpb.NamespacedWorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3,oneof" json:"workflow_execution,omitempty"`
}
type RequestCancelExternalWorkflowExecution_ChildWorkflowId struct {
	ChildWorkflowId string `protobuf:"bytes,3,opt,name=child_workflow_id,json=childWorkflowId,proto3,oneof" json:"child_workflow_id,omitempty"`
}

func (*RequestCancelExternalWorkflowExecution_WorkflowExecution) isRequestCancelExternalWorkflowExecution_Target() {
}
func (*RequestCancelExternalWorkflowExecution_ChildWorkflowId) isRequestCancelExternalWorkflowExecution_Target() {
}

func (m *RequestCancelExternalWorkflowExecution) GetTarget() isRequestCancelExternalWorkflowExecution_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *RequestCancelExternalWorkflowExecution) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *RequestCancelExternalWorkflowExecution) GetWorkflowExecution() *commonpb.NamespacedWorkflowExecution {
	if x, ok := m.GetTarget().(*RequestCancelExternalWorkflowExecution_WorkflowExecution); ok {
		return x.WorkflowExecution
	}
	return nil
}

func (m *RequestCancelExternalWorkflowExecution) GetChildWorkflowId() string {
	if x, ok := m.GetTarget().(*RequestCancelExternalWorkflowExecution_ChildWorkflowId); ok {
		return x.ChildWorkflowId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RequestCancelExternalWorkflowExecution) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RequestCancelExternalWorkflowExecution_WorkflowExecution)(nil),
		(*RequestCancelExternalWorkflowExecution_ChildWorkflowId)(nil),
	}
}

/// Send a signal to an external or child workflow
type SignalExternalWorkflowExecution struct {
	/// Lang's incremental sequence number, used as the operation identifier
	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	// What workflow is being targeted
	//
	// Types that are valid to be assigned to Target:
	//	*SignalExternalWorkflowExecution_WorkflowExecution
	//	*SignalExternalWorkflowExecution_ChildWorkflowId
	Target isSignalExternalWorkflowExecution_Target `protobuf_oneof:"target"`
	/// Name of the signal handler
	SignalName string `protobuf:"bytes,4,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
	/// Arguments for the handler
	Args []*commonpb.Payload `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *SignalExternalWorkflowExecution) Reset()      { *m = SignalExternalWorkflowExecution{} }
func (*SignalExternalWorkflowExecution) ProtoMessage() {}
func (*SignalExternalWorkflowExecution) Descriptor() ([]byte, []int) {
	return fileDescriptor_c27752d5c26de951, []int{15}
}
func (m *SignalExternalWorkflowExecution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalExternalWorkflowExecution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalExternalWorkflowExecution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalExternalWorkflowExecution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalExternalWorkflowExecution.Merge(m, src)
}
func (m *SignalExternalWorkflowExecution) XXX_Size() int {
	return m.Size()
}
func (m *SignalExternalWorkflowExecution) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalExternalWorkflowExecution.DiscardUnknown(m)
}

var xxx_messageInfo_SignalExternalWorkflowExecution proto.InternalMessageInfo

type isSignalExternalWorkflowExecution_Target interface {
	isSignalExternalWorkflowExecution_Target()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SignalExternalWorkflowExecution_WorkflowExecution struct {
	WorkflowExecution *commonpb.NamespacedWorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3,oneof" json:"workflow_execution,omitempty"`
}
type SignalExternalWorkflowExecution_ChildWorkflowId struct {
	ChildWorkflowId string `protobuf:"bytes,3,opt,name=child_workflow_id,json=childWorkflowId,proto3,oneof" json:"child_workflow_id,omitempty"`
}

func (*SignalExternalWorkflowExecution_WorkflowExecution) isSignalExternalWorkflowExecution_Target() {
}
func (*SignalExternalWorkflowExecution_ChildWorkflowId) isSignalExternalWorkflowExecution_Target() {}

func (m *SignalExternalWorkflowExecution) GetTarget() isSignalExternalWorkflowExecution_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *SignalExternalWorkflowExecution) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *SignalExternalWorkflowExecution) GetWorkflowExecution() *commonpb.NamespacedWorkflowExecution {
	if x, ok := m.GetTarget().(*SignalExternalWorkflowExecution_WorkflowExecution); ok {
		return x.WorkflowExecution
	}
	return nil
}

func (m *SignalExternalWorkflowExecution) GetChildWorkflowId() string {
	if x, ok := m.GetTarget().(*SignalExternalWorkflowExecution_ChildWorkflowId); ok {
		return x.ChildWorkflowId
	}
	return ""
}

func (m *SignalExternalWorkflowExecution) GetSignalName() string {
	if m != nil {
		return m.SignalName
	}
	return ""
}

func (m *SignalExternalWorkflowExecution) GetArgs() []*commonpb.Payload {
	if m != nil {
		return m.Args
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SignalExternalWorkflowExecution) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SignalExternalWorkflowExecution_WorkflowExecution)(nil),
		(*SignalExternalWorkflowExecution_ChildWorkflowId)(nil),
	}
}

/// Can be used to cancel not-already-sent `SignalExternalWorkflowExecution` commands
type CancelSignalWorkflow struct {
	/// Lang's incremental sequence number as passed to `SignalExternalWorkflowExecution`
	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *CancelSignalWorkflow) Reset()      { *m = CancelSignalWorkflow{} }
func (*CancelSignalWorkflow) ProtoMessage() {}
func (*CancelSignalWorkflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_c27752d5c26de951, []int{16}
}
func (m *CancelSignalWorkflow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelSignalWorkflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelSignalWorkflow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelSignalWorkflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelSignalWorkflow.Merge(m, src)
}
func (m *CancelSignalWorkflow) XXX_Size() int {
	return m.Size()
}
func (m *CancelSignalWorkflow) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelSignalWorkflow.DiscardUnknown(m)
}

var xxx_messageInfo_CancelSignalWorkflow proto.InternalMessageInfo

func (m *CancelSignalWorkflow) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func init() {
	proto.RegisterEnum("coresdk.workflow_commands.ActivityCancellationType", ActivityCancellationType_name, ActivityCancellationType_value)
	proto.RegisterType((*WorkflowCommand)(nil), "coresdk.workflow_commands.WorkflowCommand")
	proto.RegisterType((*StartTimer)(nil), "coresdk.workflow_commands.StartTimer")
	proto.RegisterType((*CancelTimer)(nil), "coresdk.workflow_commands.CancelTimer")
	proto.RegisterType((*ScheduleActivity)(nil), "coresdk.workflow_commands.ScheduleActivity")
	proto.RegisterMapType((map[string]*commonpb.Payload)(nil), "coresdk.workflow_commands.ScheduleActivity.HeaderFieldsEntry")
	proto.RegisterType((*RequestCancelActivity)(nil), "coresdk.workflow_commands.RequestCancelActivity")
	proto.RegisterType((*QueryResult)(nil), "coresdk.workflow_commands.QueryResult")
	proto.RegisterType((*QuerySuccess)(nil), "coresdk.workflow_commands.QuerySuccess")
	proto.RegisterType((*CompleteWorkflowExecution)(nil), "coresdk.workflow_commands.CompleteWorkflowExecution")
	proto.RegisterType((*FailWorkflowExecution)(nil), "coresdk.workflow_commands.FailWorkflowExecution")
	proto.RegisterType((*ContinueAsNewWorkflowExecution)(nil), "coresdk.workflow_commands.ContinueAsNewWorkflowExecution")
	proto.RegisterMapType((map[string]*commonpb.Payload)(nil), "coresdk.workflow_commands.ContinueAsNewWorkflowExecution.HeaderEntry")
	proto.RegisterMapType((map[string]*commonpb.Payload)(nil), "coresdk.workflow_commands.ContinueAsNewWorkflowExecution.MemoEntry")
	proto.RegisterMapType((map[string]*commonpb.Payload)(nil), "coresdk.workflow_commands.ContinueAsNewWorkflowExecution.SearchAttributesEntry")
	proto.RegisterType((*CancelWorkflowExecution)(nil), "coresdk.workflow_commands.CancelWorkflowExecution")
	proto.RegisterType((*SetPatchMarker)(nil), "coresdk.workflow_commands.SetPatchMarker")
	proto.RegisterType((*StartChildWorkflowExecution)(nil), "coresdk.workflow_commands.StartChildWorkflowExecution")
	proto.RegisterMapType((map[string]*commonpb.Payload)(nil), "coresdk.workflow_commands.StartChildWorkflowExecution.HeaderEntry")
	proto.RegisterMapType((map[string]*commonpb.Payload)(nil), "coresdk.workflow_commands.StartChildWorkflowExecution.MemoEntry")
	proto.RegisterMapType((map[string]*commonpb.Payload)(nil), "coresdk.workflow_commands.StartChildWorkflowExecution.SearchAttributesEntry")
	proto.RegisterType((*CancelUnstartedChildWorkflowExecution)(nil), "coresdk.workflow_commands.CancelUnstartedChildWorkflowExecution")
	proto.RegisterType((*RequestCancelExternalWorkflowExecution)(nil), "coresdk.workflow_commands.RequestCancelExternalWorkflowExecution")
	proto.RegisterType((*SignalExternalWorkflowExecution)(nil), "coresdk.workflow_commands.SignalExternalWorkflowExecution")
	proto.RegisterType((*CancelSignalWorkflow)(nil), "coresdk.workflow_commands.CancelSignalWorkflow")
}

func init() { proto.RegisterFile("workflow_commands.proto", fileDescriptor_c27752d5c26de951) }

var fileDescriptor_c27752d5c26de951 = []byte{
	// 1841 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4f, 0x6f, 0xdb, 0xc8,
	0x15, 0x17, 0x1d, 0xff, 0xd3, 0x93, 0xec, 0x48, 0xb3, 0x71, 0x2c, 0xdb, 0x2d, 0x1d, 0x68, 0xe1,
	0x34, 0xd9, 0xed, 0xca, 0xdd, 0x64, 0xb7, 0x68, 0x03, 0xb4, 0x58, 0x59, 0x71, 0x2a, 0x23, 0x8e,
	0xe3, 0xa5, 0x15, 0x78, 0x77, 0xb1, 0x2d, 0x3b, 0x26, 0xc7, 0x36, 0x6b, 0x8a, 0x64, 0x66, 0x86,
	0xf6, 0x0a, 0x68, 0x81, 0xa2, 0x97, 0xa2, 0xe8, 0xa5, 0xb7, 0x5e, 0x0a, 0xf4, 0xda, 0x8f, 0x50,
	0xa0, 0x5f, 0xa0, 0xc7, 0x1c, 0xf7, 0xd8, 0x38, 0x97, 0x1e, 0xb7, 0xdf, 0xa0, 0x98, 0xe1, 0x90,
	0x92, 0x68, 0x4a, 0x74, 0x0c, 0x2f, 0xb0, 0x37, 0xf1, 0xe9, 0xbd, 0xdf, 0x7b, 0x33, 0xf3, 0xe6,
	0xf7, 0x7e, 0x24, 0x2c, 0x9e, 0xf9, 0xf4, 0xe4, 0xd0, 0xf5, 0xcf, 0x4c, 0xcb, 0xef, 0x76, 0xb1,
	0x67, 0xb3, 0x46, 0x40, 0x7d, 0xee, 0xa3, 0x25, 0xcb, 0xa7, 0x84, 0xd9, 0x27, 0x8d, 0x0b, 0x0e,
	0xcb, 0x65, 0xf1, 0xcb, 0xf7, 0x22, 0xc7, 0xe5, 0x5b, 0xd6, 0xb1, 0xe3, 0xda, 0x66, 0xec, 0xa6,
	0xac, 0xfa, 0x91, 0xef, 0x1f, 0xb9, 0x64, 0x5d, 0x3e, 0x1d, 0x84, 0x87, 0xeb, 0x76, 0x48, 0x31,
	0x77, 0x92, 0xa8, 0x35, 0x4e, 0xba, 0x81, 0x4f, 0xb1, 0xbb, 0x8e, 0x03, 0x67, 0xfd, 0x10, 0x3b,
	0x6e, 0x48, 0xc9, 0xfa, 0xe9, 0x87, 0xeb, 0x5d, 0xc2, 0x18, 0x3e, 0x22, 0x91, 0x5b, 0xfd, 0x5f,
	0x73, 0x70, 0x73, 0x5f, 0x21, 0xb7, 0xa2, 0xfc, 0xa8, 0x0d, 0x25, 0xc6, 0x31, 0xe5, 0x26, 0x77,
	0xba, 0x84, 0xd6, 0xb4, 0x3b, 0xda, 0xbd, 0xd2, 0x83, 0xb5, 0xc6, 0xc8, 0x7a, 0x1b, 0x7b, 0xc2,
	0xbb, 0x23, 0x9c, 0xdb, 0x05, 0x03, 0x58, 0xf2, 0x84, 0xbe, 0x80, 0x2a, 0xb3, 0x8e, 0x89, 0x1d,
	0xba, 0xc4, 0xc4, 0x16, 0x77, 0x4e, 0x1d, 0xde, 0xab, 0x4d, 0x48, 0xbc, 0xf7, 0xc7, 0xe1, 0xa9,
	0x98, 0xa6, 0x0a, 0x69, 0x17, 0x8c, 0x0a, 0x4b, 0xd9, 0x90, 0x01, 0x15, 0x4a, 0x58, 0xe0, 0x7b,
	0xb6, 0xc9, 0x7d, 0xf3, 0x65, 0x48, 0x68, 0xaf, 0x76, 0x43, 0x42, 0xdf, 0x1d, 0x03, 0xfd, 0xa9,
	0xf0, 0x33, 0x08, 0x0b, 0x5d, 0xde, 0x2e, 0x18, 0xf3, 0x0a, 0xa1, 0xe3, 0x4b, 0x3b, 0xfa, 0x0d,
	0x2c, 0x52, 0xf2, 0x32, 0x24, 0x8c, 0x9b, 0x16, 0xf6, 0x2c, 0xe2, 0xf6, 0xab, 0x9e, 0x94, 0xd0,
	0x3f, 0x1a, 0x03, 0x6d, 0x44, 0x91, 0x2d, 0x19, 0x38, 0x50, 0xfa, 0x02, 0xcd, 0xfa, 0x03, 0x3d,
	0x85, 0xb2, 0xca, 0x11, 0x6d, 0xf3, 0x54, 0x6e, 0xed, 0x11, 0x40, 0xbc, 0xcf, 0x25, 0xab, 0xff,
	0x88, 0x4e, 0x61, 0xc5, 0xf2, 0xbb, 0x81, 0x4b, 0x38, 0x49, 0x1a, 0xc5, 0x24, 0x5f, 0x11, 0x2b,
	0x14, 0x2d, 0x51, 0x9b, 0x96, 0xd8, 0x1f, 0x8d, 0xc3, 0x56, 0xd1, 0x71, 0x2f, 0x6c, 0xc6, 0xb1,
	0xed, 0x82, 0xb1, 0x64, 0x8d, 0xfa, 0x53, 0x6c, 0x98, 0x68, 0xad, 0xac, 0x9c, 0x33, 0xb9, 0x1b,
	0xf6, 0x04, 0x3b, 0x6e, 0x56, 0xbe, 0x85, 0xc3, 0xac, 0x3f, 0xd0, 0x1f, 0x35, 0xa8, 0x5b, 0xbe,
	0xc7, 0x1d, 0x2f, 0x24, 0x26, 0x66, 0xa6, 0x47, 0xce, 0xb2, 0xf2, 0xce, 0xca, 0xbc, 0x3f, 0x1d,
	0xbb, 0xd6, 0x08, 0xa4, 0xc9, 0x76, 0xc8, 0x59, 0x56, 0x01, 0xba, 0x35, 0xd6, 0x03, 0x05, 0xb0,
	0xa4, 0x8e, 0x2e, 0x23, 0x7f, 0x51, 0xe6, 0x7f, 0x90, 0x7b, 0x8e, 0x59, 0x89, 0x17, 0xad, 0xec,
	0xbf, 0xd0, 0x0b, 0xa8, 0x30, 0xc2, 0xcd, 0x00, 0x73, 0xeb, 0xd8, 0xec, 0x62, 0x7a, 0x42, 0x68,
	0x0d, 0x64, 0xa2, 0xfb, 0xe3, 0xee, 0x11, 0xe1, 0xbb, 0x22, 0xe2, 0x99, 0x0c, 0x10, 0xfd, 0xce,
	0x86, 0x2c, 0xe8, 0x77, 0xa0, 0x47, 0x37, 0x7d, 0x98, 0x62, 0x06, 0x56, 0x53, 0x92, 0x49, 0x7e,
	0x9c, 0x77, 0xf9, 0x5b, 0x22, 0x3e, 0x6b, 0x45, 0x2b, 0x6c, 0xf4, 0xdf, 0xe8, 0x6f, 0x1a, 0xdc,
	0x57, 0x1b, 0x19, 0x7a, 0xd2, 0x91, 0xd8, 0xa3, 0x4b, 0x29, 0xcb, 0x52, 0x3e, 0xc9, 0xdd, 0xd8,
	0x17, 0x31, 0xd4, 0xc8, 0xa2, 0xd6, 0xac, 0xcb, 0x38, 0xa2, 0xbf, 0x6b, 0xf0, 0x5e, 0x8a, 0x0e,
	0xc8, 0x57, 0x9c, 0x50, 0x0f, 0x67, 0x1e, 0xfc, 0x9c, 0xac, 0xaf, 0x79, 0x59, 0x86, 0xd8, 0x54,
	0x50, 0x59, 0x05, 0xde, 0xa5, 0x97, 0xf2, 0x44, 0x7f, 0xd2, 0xa0, 0xce, 0x9c, 0x23, 0x51, 0xd0,
	0xb8, 0xca, 0xe6, 0x65, 0x65, 0x8f, 0xc6, 0x1d, 0xa2, 0x04, 0x19, 0x57, 0xd2, 0x2a, 0x1b, 0xef,
	0x82, 0x8e, 0xe0, 0xb6, 0xda, 0x24, 0x55, 0x51, 0x9c, 0xa5, 0x76, 0x53, 0xa6, 0x5f, 0xcf, 0x3d,
	0xb8, 0xa8, 0x88, 0x18, 0xb9, 0x5d, 0x30, 0x6e, 0x59, 0x19, 0xf6, 0x8d, 0x22, 0xcc, 0x9c, 0x62,
	0xea, 0x60, 0x8f, 0xd7, 0x5d, 0x80, 0xfe, 0xec, 0x41, 0x15, 0xb8, 0xc1, 0xc8, 0x4b, 0x39, 0xaf,
	0xe6, 0x0c, 0xf1, 0x13, 0x6d, 0xc3, 0x82, 0x9a, 0x64, 0xbe, 0x79, 0xe8, 0x50, 0x22, 0xa9, 0xd6,
	0x0f, 0xb9, 0x9a, 0x41, 0x4b, 0x8d, 0x68, 0x88, 0x36, 0xe2, 0x21, 0xda, 0x78, 0xac, 0x86, 0xa8,
	0x81, 0xa2, 0x29, 0xe6, 0x3f, 0x71, 0x28, 0xe9, 0x44, 0x41, 0xf5, 0x55, 0x28, 0x0d, 0x50, 0xf0,
	0xc5, 0x74, 0xf5, 0x3f, 0xcc, 0x40, 0x25, 0x3d, 0xbb, 0x32, 0xaa, 0x5a, 0x85, 0x52, 0x3c, 0x56,
	0x4c, 0xc7, 0x96, 0xb5, 0x14, 0x0d, 0x88, 0x4d, 0x5b, 0x36, 0x7a, 0x17, 0xe6, 0x12, 0x07, 0xde,
	0x0b, 0x88, 0x9c, 0x6b, 0x45, 0xa3, 0x1c, 0x1b, 0x3b, 0xbd, 0x80, 0xa0, 0xef, 0x41, 0xd1, 0xc3,
	0x5d, 0xc2, 0x02, 0x6c, 0x11, 0x39, 0x9d, 0x8a, 0x46, 0xdf, 0x80, 0xbe, 0x0f, 0xc0, 0x31, 0x3b,
	0x11, 0x73, 0x31, 0x24, 0x72, 0xb6, 0x14, 0x8d, 0xa2, 0xb0, 0x7c, 0x2a, 0x0c, 0xe8, 0x00, 0xe6,
	0x8e, 0x09, 0xb6, 0x09, 0x35, 0x0f, 0x1d, 0xe2, 0xda, 0xac, 0x36, 0x7d, 0xe7, 0xc6, 0xbd, 0xd2,
	0x83, 0x9f, 0xbd, 0xc5, 0x50, 0x6e, 0xb4, 0x25, 0xc0, 0x13, 0x19, 0xbf, 0xe9, 0x71, 0xda, 0x33,
	0xca, 0xc7, 0x03, 0x26, 0xf4, 0x31, 0x14, 0x31, 0x3d, 0x0a, 0xbb, 0xc4, 0xe3, 0xac, 0x36, 0x23,
	0xf1, 0x17, 0x13, 0x7c, 0xa5, 0x70, 0x76, 0x71, 0xcf, 0xf5, 0xb1, 0x6d, 0xf4, 0x3d, 0x51, 0x07,
	0x96, 0x12, 0xcd, 0xc0, 0x7d, 0xd3, 0x72, 0x7d, 0xd6, 0x3f, 0xb7, 0xd9, 0xbc, 0x73, 0xbb, 0x1d,
	0xc7, 0x76, 0xfc, 0x96, 0x88, 0x54, 0x67, 0x97, 0x46, 0xed, 0xeb, 0x1b, 0x81, 0x5a, 0x7c, 0x0b,
	0xd4, 0xa4, 0xdf, 0x04, 0xea, 0x0e, 0xdc, 0x4e, 0xfa, 0x6b, 0xb8, 0x50, 0xc8, 0x83, 0x7c, 0x47,
	0x35, 0xd8, 0x50, 0x95, 0x4f, 0xa0, 0x7a, 0x4c, 0x30, 0xe5, 0x07, 0x04, 0xf7, 0xab, 0x2b, 0xe5,
	0x41, 0x55, 0x92, 0x98, 0x18, 0xe7, 0xe7, 0x50, 0xa6, 0x84, 0xd3, 0x9e, 0x19, 0xf8, 0xae, 0x63,
	0xf5, 0x14, 0x75, 0xae, 0xa4, 0x77, 0xdf, 0x10, 0x3e, 0xbb, 0xd2, 0xc5, 0x28, 0xd1, 0xfe, 0x03,
	0xfa, 0x35, 0x54, 0xa3, 0xab, 0xe7, 0xca, 0x0c, 0x51, 0x13, 0x0a, 0x7e, 0x9b, 0x7f, 0xf0, 0x70,
	0x4c, 0x8b, 0xc4, 0xad, 0xd1, 0x1a, 0x88, 0x15, 0xbd, 0x6a, 0x54, 0xac, 0x94, 0x65, 0xf9, 0x33,
	0xa8, 0x5e, 0xe8, 0x1f, 0x71, 0x55, 0x4e, 0x48, 0x4f, 0x5e, 0x95, 0xa2, 0x21, 0x7e, 0xa2, 0x0f,
	0x60, 0xea, 0x14, 0xbb, 0x21, 0x51, 0x17, 0x76, 0x64, 0xff, 0x44, 0x5e, 0x8f, 0x26, 0x7e, 0xa2,
	0xd5, 0xef, 0xc3, 0x42, 0xa6, 0x12, 0xcb, 0xb8, 0xaf, 0xff, 0xd4, 0xa0, 0x34, 0x20, 0x08, 0xd1,
	0x12, 0xcc, 0x4a, 0x1d, 0x29, 0x6e, 0x65, 0x54, 0xc4, 0x8c, 0x7c, 0xde, 0xb2, 0xd1, 0x2f, 0xa0,
	0xc8, 0x42, 0xcb, 0x22, 0xc4, 0x26, 0xb6, 0x2a, 0xe6, 0x07, 0x79, 0x32, 0x73, 0x4f, 0x04, 0x30,
	0xd6, 0x2e, 0x18, 0xfd, 0x58, 0xf4, 0x08, 0xa6, 0x85, 0xbc, 0x21, 0xb6, 0x12, 0xab, 0x77, 0x1a,
	0xb1, 0x50, 0x6f, 0xe0, 0xc0, 0x69, 0x28, 0xa1, 0xde, 0x38, 0xfd, 0x50, 0xca, 0xa3, 0x90, 0x92,
	0x76, 0xc1, 0x50, 0x11, 0x83, 0xcc, 0xd7, 0x82, 0xf2, 0x60, 0x0e, 0xf4, 0x10, 0x66, 0x23, 0x2d,
	0xcb, 0x88, 0x12, 0xec, 0x23, 0xf7, 0x2a, 0x71, 0xac, 0x6f, 0xc3, 0xd2, 0x48, 0xdd, 0x87, 0xd6,
	0x61, 0x9a, 0xca, 0x6d, 0xc9, 0xc3, 0x53, 0x6e, 0xf5, 0x3d, 0x58, 0xc8, 0x54, 0x74, 0xe8, 0x11,
	0xcc, 0xa8, 0x65, 0x29, 0xa8, 0xdc, 0x35, 0x1b, 0x71, 0x40, 0xfd, 0x7f, 0xd3, 0xa0, 0x8f, 0xd7,
	0x6b, 0x82, 0x2d, 0x93, 0x03, 0x90, 0x8d, 0x1a, 0x1d, 0x5d, 0x39, 0x36, 0x4a, 0xb6, 0x1c, 0xe6,
	0xc3, 0x89, 0x34, 0x1f, 0x0e, 0x71, 0xd5, 0x8d, 0x4b, 0x73, 0xd5, 0x53, 0xb8, 0x95, 0xa4, 0xa6,
	0xa1, 0x97, 0x5c, 0xd9, 0xc9, 0xdc, 0xf1, 0x12, 0x87, 0x19, 0xa1, 0x17, 0x5f, 0xda, 0x67, 0xb0,
	0xd0, 0x5f, 0x87, 0xa8, 0x35, 0x46, 0x9b, 0xca, 0xe5, 0x92, 0x64, 0xa9, 0x98, 0x9d, 0xc4, 0x70,
	0xfb, 0x30, 0xd9, 0x25, 0x5d, 0x5f, 0x31, 0x7b, 0xeb, 0xca, 0x7a, 0xb8, 0xf1, 0x8c, 0x74, 0xfd,
	0x88, 0xdf, 0x25, 0x20, 0xfa, 0x25, 0x4c, 0x47, 0x3c, 0xaf, 0x48, 0x7d, 0xf3, 0xea, 0xd0, 0x11,
	0x05, 0x44, 0xe0, 0x0a, 0x14, 0xfd, 0x16, 0xaa, 0x8c, 0x60, 0x6a, 0x1d, 0x9b, 0x98, 0x73, 0xea,
	0x1c, 0x84, 0x9c, 0xb0, 0xda, 0xac, 0xcc, 0xf4, 0xfc, 0xea, 0x99, 0xf6, 0x24, 0x64, 0x33, 0x41,
	0x8c, 0x72, 0x56, 0x58, 0xca, 0xbc, 0xbc, 0x0b, 0xc5, 0x64, 0xbd, 0xd7, 0xc2, 0x47, 0xcb, 0x06,
	0x94, 0x06, 0x96, 0x79, 0x3d, 0x98, 0x5f, 0xc2, 0x42, 0xe6, 0x82, 0xae, 0x87, 0x41, 0x97, 0x60,
	0x71, 0xc4, 0x2b, 0x4a, 0xfd, 0x29, 0xcc, 0x0f, 0xbf, 0x54, 0x08, 0xce, 0x8c, 0xde, 0x4a, 0xfa,
	0x9c, 0x29, 0x9f, 0xb7, 0x6c, 0xa4, 0x03, 0xd8, 0x24, 0xa0, 0xc4, 0xc2, 0x5c, 0x91, 0xe6, 0xac,
	0x31, 0x60, 0xa9, 0xff, 0xb9, 0x04, 0x2b, 0x63, 0xde, 0x1e, 0x32, 0x94, 0xd3, 0x90, 0xe6, 0x99,
	0x48, 0x6b, 0x9e, 0x55, 0x28, 0x25, 0x7d, 0xe1, 0xd8, 0x4a, 0x34, 0x41, 0x6c, 0x8a, 0x74, 0xd5,
	0x30, 0x53, 0x4c, 0xe6, 0x32, 0xc5, 0x05, 0xe5, 0xf4, 0x01, 0x4c, 0x39, 0x5e, 0x10, 0x72, 0x75,
	0xaf, 0x46, 0xef, 0xa7, 0xf4, 0x42, 0xfb, 0xb0, 0x7c, 0x51, 0x90, 0x27, 0x37, 0x7b, 0x26, 0xef,
	0x66, 0xd7, 0xce, 0xd2, 0xbb, 0x12, 0x5f, 0xef, 0x51, 0xd4, 0x33, 0x7b, 0xad, 0xd4, 0x53, 0xbc,
	0x12, 0xf5, 0x7c, 0x0e, 0xef, 0x04, 0x98, 0x12, 0x8f, 0x2b, 0x51, 0xa4, 0x54, 0x08, 0x48, 0x01,
	0xd1, 0x7f, 0x61, 0x4d, 0x7d, 0xd7, 0xda, 0x95, 0x21, 0x52, 0x0f, 0x29, 0x4d, 0x52, 0x0d, 0xd2,
	0x26, 0xf4, 0x2b, 0xa8, 0x0d, 0x9c, 0xb1, 0x49, 0x49, 0xd8, 0xc7, 0x2f, 0x4b, 0xfc, 0xb5, 0xf4,
	0x89, 0xec, 0x27, 0x0d, 0x60, 0x08, 0x6f, 0x85, 0xbd, 0x70, 0x96, 0x65, 0xbe, 0xa0, 0x9c, 0xe6,
	0xde, 0x52, 0x39, 0xbd, 0x0b, 0x73, 0x16, 0xf5, 0x3d, 0x33, 0x16, 0x8c, 0xf2, 0xdd, 0xab, 0x68,
	0x94, 0x85, 0x31, 0x56, 0xd0, 0xe8, 0x8b, 0x84, 0x41, 0x6f, 0xca, 0x26, 0xda, 0xb8, 0xda, 0xeb,
	0x75, 0x26, 0x7d, 0x76, 0x14, 0xed, 0x57, 0x24, 0xf2, 0x27, 0x57, 0x44, 0x4e, 0x73, 0x7e, 0x2f,
	0x8b, 0x94, 0xab, 0x32, 0xc5, 0xf6, 0x15, 0x53, 0x5c, 0x92, 0x91, 0xd1, 0x41, 0x96, 0x16, 0x45,
	0xf2, 0xa8, 0x3f, 0x1e, 0xd5, 0x4a, 0x43, 0x29, 0x2f, 0xa1, 0x46, 0xbf, 0x0d, 0x8e, 0xbe, 0xfe,
	0x49, 0xf2, 0xed, 0xb2, 0xfe, 0x0b, 0x58, 0xbb, 0xd4, 0xf7, 0x13, 0xf4, 0x43, 0x40, 0xa9, 0x6f,
	0x34, 0x7d, 0x96, 0xae, 0x58, 0x83, 0x31, 0x7b, 0xe4, 0x65, 0xfd, 0x95, 0x06, 0x77, 0x2f, 0xf7,
	0xdd, 0x23, 0x83, 0xef, 0xbf, 0x04, 0x94, 0xf1, 0x39, 0x23, 0xfd, 0x01, 0x59, 0xad, 0x69, 0x27,
	0x1e, 0x04, 0x99, 0xdf, 0x7c, 0xaa, 0x67, 0x19, 0x0b, 0xa9, 0xa6, 0x16, 0x12, 0x4f, 0x8d, 0x76,
	0xc1, 0xb8, 0x39, 0xb4, 0x92, 0x2d, 0x7b, 0x63, 0x16, 0xa6, 0x39, 0xa6, 0x47, 0x84, 0xd7, 0xff,
	0x3a, 0x01, 0xab, 0x39, 0x1f, 0x4c, 0xbe, 0xdb, 0x6b, 0x11, 0x93, 0x52, 0x7d, 0xa4, 0x11, 0xd3,
	0x53, 0x8d, 0x41, 0x88, 0x4c, 0x22, 0x35, 0x7a, 0x1f, 0x26, 0x31, 0x3d, 0x62, 0xb5, 0xa9, 0xf1,
	0x43, 0x4e, 0x3a, 0x0d, 0xec, 0xcc, 0x3d, 0xb8, 0x95, 0xf5, 0x29, 0xe7, 0xe2, 0x6e, 0xbc, 0xf7,
	0x19, 0xd4, 0x46, 0xbd, 0x2d, 0xa2, 0x79, 0x80, 0x8e, 0xf1, 0xb9, 0xd9, 0x6a, 0xee, 0xb4, 0x36,
	0xb7, 0x2b, 0x05, 0xb4, 0x0a, 0x2b, 0xfb, 0xcd, 0xad, 0x8e, 0x32, 0x6c, 0x37, 0x3b, 0x5b, 0xcf,
	0x77, 0xcc, 0xd6, 0xf3, 0x67, 0xbb, 0xdb, 0x9b, 0x9d, 0xcd, 0xc7, 0x15, 0x0d, 0x95, 0x60, 0xa6,
	0xb9, 0xd1, 0xdc, 0x79, 0xfc, 0x7c, 0xa7, 0x32, 0xb1, 0xf1, 0xd1, 0xab, 0xd7, 0x7a, 0xe1, 0xeb,
	0xd7, 0x7a, 0xe1, 0x9b, 0xd7, 0xba, 0xf6, 0xfb, 0x73, 0x5d, 0xfb, 0xc7, 0xb9, 0xae, 0xfd, 0xfb,
	0x5c, 0xd7, 0x5e, 0x9d, 0xeb, 0xda, 0x7f, 0xce, 0x75, 0xed, 0xbf, 0xe7, 0x7a, 0xe1, 0x9b, 0x73,
	0x5d, 0xfb, 0xcb, 0x1b, 0xbd, 0xf0, 0xea, 0x8d, 0x5e, 0xf8, 0xfa, 0x8d, 0x5e, 0x38, 0x98, 0x96,
	0xa3, 0xed, 0xe1, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x41, 0x5a, 0x6b, 0x49, 0xaf, 0x19, 0x00,
	0x00,
}

func (x ActivityCancellationType) String() string {
	s, ok := ActivityCancellationType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *WorkflowCommand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowCommand)
	if !ok {
		that2, ok := that.(WorkflowCommand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Variant == nil {
		if this.Variant != nil {
			return false
		}
	} else if this.Variant == nil {
		return false
	} else if !this.Variant.Equal(that1.Variant) {
		return false
	}
	return true
}
func (this *WorkflowCommand_StartTimer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowCommand_StartTimer)
	if !ok {
		that2, ok := that.(WorkflowCommand_StartTimer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartTimer.Equal(that1.StartTimer) {
		return false
	}
	return true
}
func (this *WorkflowCommand_ScheduleActivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowCommand_ScheduleActivity)
	if !ok {
		that2, ok := that.(WorkflowCommand_ScheduleActivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ScheduleActivity.Equal(that1.ScheduleActivity) {
		return false
	}
	return true
}
func (this *WorkflowCommand_RespondToQuery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowCommand_RespondToQuery)
	if !ok {
		that2, ok := that.(WorkflowCommand_RespondToQuery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RespondToQuery.Equal(that1.RespondToQuery) {
		return false
	}
	return true
}
func (this *WorkflowCommand_RequestCancelActivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowCommand_RequestCancelActivity)
	if !ok {
		that2, ok := that.(WorkflowCommand_RequestCancelActivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestCancelActivity.Equal(that1.RequestCancelActivity) {
		return false
	}
	return true
}
func (this *WorkflowCommand_CancelTimer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowCommand_CancelTimer)
	if !ok {
		that2, ok := that.(WorkflowCommand_CancelTimer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CancelTimer.Equal(that1.CancelTimer) {
		return false
	}
	return true
}
func (this *WorkflowCommand_CompleteWorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowCommand_CompleteWorkflowExecution)
	if !ok {
		that2, ok := that.(WorkflowCommand_CompleteWorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CompleteWorkflowExecution.Equal(that1.CompleteWorkflowExecution) {
		return false
	}
	return true
}
func (this *WorkflowCommand_FailWorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowCommand_FailWorkflowExecution)
	if !ok {
		that2, ok := that.(WorkflowCommand_FailWorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FailWorkflowExecution.Equal(that1.FailWorkflowExecution) {
		return false
	}
	return true
}
func (this *WorkflowCommand_ContinueAsNewWorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowCommand_ContinueAsNewWorkflowExecution)
	if !ok {
		that2, ok := that.(WorkflowCommand_ContinueAsNewWorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ContinueAsNewWorkflowExecution.Equal(that1.ContinueAsNewWorkflowExecution) {
		return false
	}
	return true
}
func (this *WorkflowCommand_CancelWorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowCommand_CancelWorkflowExecution)
	if !ok {
		that2, ok := that.(WorkflowCommand_CancelWorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CancelWorkflowExecution.Equal(that1.CancelWorkflowExecution) {
		return false
	}
	return true
}
func (this *WorkflowCommand_SetPatchMarker) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowCommand_SetPatchMarker)
	if !ok {
		that2, ok := that.(WorkflowCommand_SetPatchMarker)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SetPatchMarker.Equal(that1.SetPatchMarker) {
		return false
	}
	return true
}
func (this *WorkflowCommand_StartChildWorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowCommand_StartChildWorkflowExecution)
	if !ok {
		that2, ok := that.(WorkflowCommand_StartChildWorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartChildWorkflowExecution.Equal(that1.StartChildWorkflowExecution) {
		return false
	}
	return true
}
func (this *WorkflowCommand_CancelUnstartedChildWorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowCommand_CancelUnstartedChildWorkflowExecution)
	if !ok {
		that2, ok := that.(WorkflowCommand_CancelUnstartedChildWorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CancelUnstartedChildWorkflowExecution.Equal(that1.CancelUnstartedChildWorkflowExecution) {
		return false
	}
	return true
}
func (this *WorkflowCommand_RequestCancelExternalWorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowCommand_RequestCancelExternalWorkflowExecution)
	if !ok {
		that2, ok := that.(WorkflowCommand_RequestCancelExternalWorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestCancelExternalWorkflowExecution.Equal(that1.RequestCancelExternalWorkflowExecution) {
		return false
	}
	return true
}
func (this *WorkflowCommand_SignalExternalWorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowCommand_SignalExternalWorkflowExecution)
	if !ok {
		that2, ok := that.(WorkflowCommand_SignalExternalWorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SignalExternalWorkflowExecution.Equal(that1.SignalExternalWorkflowExecution) {
		return false
	}
	return true
}
func (this *WorkflowCommand_CancelSignalWorkflow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowCommand_CancelSignalWorkflow)
	if !ok {
		that2, ok := that.(WorkflowCommand_CancelSignalWorkflow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CancelSignalWorkflow.Equal(that1.CancelSignalWorkflow) {
		return false
	}
	return true
}
func (this *StartTimer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartTimer)
	if !ok {
		that2, ok := that.(StartTimer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !this.StartToFireTimeout.Equal(that1.StartToFireTimeout) {
		return false
	}
	return true
}
func (this *CancelTimer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancelTimer)
	if !ok {
		that2, ok := that.(CancelTimer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	return true
}
func (this *ScheduleActivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScheduleActivity)
	if !ok {
		that2, ok := that.(ScheduleActivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if this.ActivityType != that1.ActivityType {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	if len(this.HeaderFields) != len(that1.HeaderFields) {
		return false
	}
	for i := range this.HeaderFields {
		if !this.HeaderFields[i].Equal(that1.HeaderFields[i]) {
			return false
		}
	}
	if len(this.Arguments) != len(that1.Arguments) {
		return false
	}
	for i := range this.Arguments {
		if !this.Arguments[i].Equal(that1.Arguments[i]) {
			return false
		}
	}
	if !this.ScheduleToCloseTimeout.Equal(that1.ScheduleToCloseTimeout) {
		return false
	}
	if !this.ScheduleToStartTimeout.Equal(that1.ScheduleToStartTimeout) {
		return false
	}
	if !this.StartToCloseTimeout.Equal(that1.StartToCloseTimeout) {
		return false
	}
	if !this.HeartbeatTimeout.Equal(that1.HeartbeatTimeout) {
		return false
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	if this.CancellationType != that1.CancellationType {
		return false
	}
	return true
}
func (this *RequestCancelActivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestCancelActivity)
	if !ok {
		that2, ok := that.(RequestCancelActivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	return true
}
func (this *QueryResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryResult)
	if !ok {
		that2, ok := that.(QueryResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QueryId != that1.QueryId {
		return false
	}
	if that1.Variant == nil {
		if this.Variant != nil {
			return false
		}
	} else if this.Variant == nil {
		return false
	} else if !this.Variant.Equal(that1.Variant) {
		return false
	}
	return true
}
func (this *QueryResult_Succeeded) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryResult_Succeeded)
	if !ok {
		that2, ok := that.(QueryResult_Succeeded)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Succeeded.Equal(that1.Succeeded) {
		return false
	}
	return true
}
func (this *QueryResult_Failed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryResult_Failed)
	if !ok {
		that2, ok := that.(QueryResult_Failed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failed.Equal(that1.Failed) {
		return false
	}
	return true
}
func (this *QuerySuccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QuerySuccess)
	if !ok {
		that2, ok := that.(QuerySuccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Response.Equal(that1.Response) {
		return false
	}
	return true
}
func (this *CompleteWorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompleteWorkflowExecution)
	if !ok {
		that2, ok := that.(CompleteWorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *FailWorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FailWorkflowExecution)
	if !ok {
		that2, ok := that.(FailWorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	return true
}
func (this *ContinueAsNewWorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContinueAsNewWorkflowExecution)
	if !ok {
		that2, ok := that.(ContinueAsNewWorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WorkflowType != that1.WorkflowType {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	if len(this.Arguments) != len(that1.Arguments) {
		return false
	}
	for i := range this.Arguments {
		if !this.Arguments[i].Equal(that1.Arguments[i]) {
			return false
		}
	}
	if !this.WorkflowRunTimeout.Equal(that1.WorkflowRunTimeout) {
		return false
	}
	if !this.WorkflowTaskTimeout.Equal(that1.WorkflowTaskTimeout) {
		return false
	}
	if len(this.Memo) != len(that1.Memo) {
		return false
	}
	for i := range this.Memo {
		if !this.Memo[i].Equal(that1.Memo[i]) {
			return false
		}
	}
	if len(this.Header) != len(that1.Header) {
		return false
	}
	for i := range this.Header {
		if !this.Header[i].Equal(that1.Header[i]) {
			return false
		}
	}
	if len(this.SearchAttributes) != len(that1.SearchAttributes) {
		return false
	}
	for i := range this.SearchAttributes {
		if !this.SearchAttributes[i].Equal(that1.SearchAttributes[i]) {
			return false
		}
	}
	return true
}
func (this *CancelWorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancelWorkflowExecution)
	if !ok {
		that2, ok := that.(CancelWorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetPatchMarker) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetPatchMarker)
	if !ok {
		that2, ok := that.(SetPatchMarker)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PatchId != that1.PatchId {
		return false
	}
	if this.Deprecated != that1.Deprecated {
		return false
	}
	return true
}
func (this *StartChildWorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartChildWorkflowExecution)
	if !ok {
		that2, ok := that.(StartChildWorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.WorkflowType != that1.WorkflowType {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	if len(this.Input) != len(that1.Input) {
		return false
	}
	for i := range this.Input {
		if !this.Input[i].Equal(that1.Input[i]) {
			return false
		}
	}
	if !this.WorkflowExecutionTimeout.Equal(that1.WorkflowExecutionTimeout) {
		return false
	}
	if !this.WorkflowRunTimeout.Equal(that1.WorkflowRunTimeout) {
		return false
	}
	if !this.WorkflowTaskTimeout.Equal(that1.WorkflowTaskTimeout) {
		return false
	}
	if this.ParentClosePolicy != that1.ParentClosePolicy {
		return false
	}
	if this.WorkflowIdReusePolicy != that1.WorkflowIdReusePolicy {
		return false
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	if this.CronSchedule != that1.CronSchedule {
		return false
	}
	if len(this.Header) != len(that1.Header) {
		return false
	}
	for i := range this.Header {
		if !this.Header[i].Equal(that1.Header[i]) {
			return false
		}
	}
	if len(this.Memo) != len(that1.Memo) {
		return false
	}
	for i := range this.Memo {
		if !this.Memo[i].Equal(that1.Memo[i]) {
			return false
		}
	}
	if len(this.SearchAttributes) != len(that1.SearchAttributes) {
		return false
	}
	for i := range this.SearchAttributes {
		if !this.SearchAttributes[i].Equal(that1.SearchAttributes[i]) {
			return false
		}
	}
	if this.CancellationType != that1.CancellationType {
		return false
	}
	return true
}
func (this *CancelUnstartedChildWorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancelUnstartedChildWorkflowExecution)
	if !ok {
		that2, ok := that.(CancelUnstartedChildWorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChildWorkflowSeq != that1.ChildWorkflowSeq {
		return false
	}
	return true
}
func (this *RequestCancelExternalWorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestCancelExternalWorkflowExecution)
	if !ok {
		that2, ok := that.(RequestCancelExternalWorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if that1.Target == nil {
		if this.Target != nil {
			return false
		}
	} else if this.Target == nil {
		return false
	} else if !this.Target.Equal(that1.Target) {
		return false
	}
	return true
}
func (this *RequestCancelExternalWorkflowExecution_WorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestCancelExternalWorkflowExecution_WorkflowExecution)
	if !ok {
		that2, ok := that.(RequestCancelExternalWorkflowExecution_WorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	return true
}
func (this *RequestCancelExternalWorkflowExecution_ChildWorkflowId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestCancelExternalWorkflowExecution_ChildWorkflowId)
	if !ok {
		that2, ok := that.(RequestCancelExternalWorkflowExecution_ChildWorkflowId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChildWorkflowId != that1.ChildWorkflowId {
		return false
	}
	return true
}
func (this *SignalExternalWorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignalExternalWorkflowExecution)
	if !ok {
		that2, ok := that.(SignalExternalWorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if that1.Target == nil {
		if this.Target != nil {
			return false
		}
	} else if this.Target == nil {
		return false
	} else if !this.Target.Equal(that1.Target) {
		return false
	}
	if this.SignalName != that1.SignalName {
		return false
	}
	if len(this.Args) != len(that1.Args) {
		return false
	}
	for i := range this.Args {
		if !this.Args[i].Equal(that1.Args[i]) {
			return false
		}
	}
	return true
}
func (this *SignalExternalWorkflowExecution_WorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignalExternalWorkflowExecution_WorkflowExecution)
	if !ok {
		that2, ok := that.(SignalExternalWorkflowExecution_WorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	return true
}
func (this *SignalExternalWorkflowExecution_ChildWorkflowId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignalExternalWorkflowExecution_ChildWorkflowId)
	if !ok {
		that2, ok := that.(SignalExternalWorkflowExecution_ChildWorkflowId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChildWorkflowId != that1.ChildWorkflowId {
		return false
	}
	return true
}
func (this *CancelSignalWorkflow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancelSignalWorkflow)
	if !ok {
		that2, ok := that.(CancelSignalWorkflow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	return true
}
func (this *WorkflowCommand) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&coresdk_workflow_commands.WorkflowCommand{")
	if this.Variant != nil {
		s = append(s, "Variant: "+fmt.Sprintf("%#v", this.Variant)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowCommand_StartTimer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.WorkflowCommand_StartTimer{` +
		`StartTimer:` + fmt.Sprintf("%#v", this.StartTimer) + `}`}, ", ")
	return s
}
func (this *WorkflowCommand_ScheduleActivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.WorkflowCommand_ScheduleActivity{` +
		`ScheduleActivity:` + fmt.Sprintf("%#v", this.ScheduleActivity) + `}`}, ", ")
	return s
}
func (this *WorkflowCommand_RespondToQuery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.WorkflowCommand_RespondToQuery{` +
		`RespondToQuery:` + fmt.Sprintf("%#v", this.RespondToQuery) + `}`}, ", ")
	return s
}
func (this *WorkflowCommand_RequestCancelActivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.WorkflowCommand_RequestCancelActivity{` +
		`RequestCancelActivity:` + fmt.Sprintf("%#v", this.RequestCancelActivity) + `}`}, ", ")
	return s
}
func (this *WorkflowCommand_CancelTimer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.WorkflowCommand_CancelTimer{` +
		`CancelTimer:` + fmt.Sprintf("%#v", this.CancelTimer) + `}`}, ", ")
	return s
}
func (this *WorkflowCommand_CompleteWorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.WorkflowCommand_CompleteWorkflowExecution{` +
		`CompleteWorkflowExecution:` + fmt.Sprintf("%#v", this.CompleteWorkflowExecution) + `}`}, ", ")
	return s
}
func (this *WorkflowCommand_FailWorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.WorkflowCommand_FailWorkflowExecution{` +
		`FailWorkflowExecution:` + fmt.Sprintf("%#v", this.FailWorkflowExecution) + `}`}, ", ")
	return s
}
func (this *WorkflowCommand_ContinueAsNewWorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.WorkflowCommand_ContinueAsNewWorkflowExecution{` +
		`ContinueAsNewWorkflowExecution:` + fmt.Sprintf("%#v", this.ContinueAsNewWorkflowExecution) + `}`}, ", ")
	return s
}
func (this *WorkflowCommand_CancelWorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.WorkflowCommand_CancelWorkflowExecution{` +
		`CancelWorkflowExecution:` + fmt.Sprintf("%#v", this.CancelWorkflowExecution) + `}`}, ", ")
	return s
}
func (this *WorkflowCommand_SetPatchMarker) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.WorkflowCommand_SetPatchMarker{` +
		`SetPatchMarker:` + fmt.Sprintf("%#v", this.SetPatchMarker) + `}`}, ", ")
	return s
}
func (this *WorkflowCommand_StartChildWorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.WorkflowCommand_StartChildWorkflowExecution{` +
		`StartChildWorkflowExecution:` + fmt.Sprintf("%#v", this.StartChildWorkflowExecution) + `}`}, ", ")
	return s
}
func (this *WorkflowCommand_CancelUnstartedChildWorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.WorkflowCommand_CancelUnstartedChildWorkflowExecution{` +
		`CancelUnstartedChildWorkflowExecution:` + fmt.Sprintf("%#v", this.CancelUnstartedChildWorkflowExecution) + `}`}, ", ")
	return s
}
func (this *WorkflowCommand_RequestCancelExternalWorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.WorkflowCommand_RequestCancelExternalWorkflowExecution{` +
		`RequestCancelExternalWorkflowExecution:` + fmt.Sprintf("%#v", this.RequestCancelExternalWorkflowExecution) + `}`}, ", ")
	return s
}
func (this *WorkflowCommand_SignalExternalWorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.WorkflowCommand_SignalExternalWorkflowExecution{` +
		`SignalExternalWorkflowExecution:` + fmt.Sprintf("%#v", this.SignalExternalWorkflowExecution) + `}`}, ", ")
	return s
}
func (this *WorkflowCommand_CancelSignalWorkflow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.WorkflowCommand_CancelSignalWorkflow{` +
		`CancelSignalWorkflow:` + fmt.Sprintf("%#v", this.CancelSignalWorkflow) + `}`}, ", ")
	return s
}
func (this *StartTimer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&coresdk_workflow_commands.StartTimer{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	if this.StartToFireTimeout != nil {
		s = append(s, "StartToFireTimeout: "+fmt.Sprintf("%#v", this.StartToFireTimeout)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancelTimer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_workflow_commands.CancelTimer{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScheduleActivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&coresdk_workflow_commands.ScheduleActivity{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "ActivityId: "+fmt.Sprintf("%#v", this.ActivityId)+",\n")
	s = append(s, "ActivityType: "+fmt.Sprintf("%#v", this.ActivityType)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	keysForHeaderFields := make([]string, 0, len(this.HeaderFields))
	for k, _ := range this.HeaderFields {
		keysForHeaderFields = append(keysForHeaderFields, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeaderFields)
	mapStringForHeaderFields := "map[string]*commonpb.Payload{"
	for _, k := range keysForHeaderFields {
		mapStringForHeaderFields += fmt.Sprintf("%#v: %#v,", k, this.HeaderFields[k])
	}
	mapStringForHeaderFields += "}"
	if this.HeaderFields != nil {
		s = append(s, "HeaderFields: "+mapStringForHeaderFields+",\n")
	}
	if this.Arguments != nil {
		s = append(s, "Arguments: "+fmt.Sprintf("%#v", this.Arguments)+",\n")
	}
	if this.ScheduleToCloseTimeout != nil {
		s = append(s, "ScheduleToCloseTimeout: "+fmt.Sprintf("%#v", this.ScheduleToCloseTimeout)+",\n")
	}
	if this.ScheduleToStartTimeout != nil {
		s = append(s, "ScheduleToStartTimeout: "+fmt.Sprintf("%#v", this.ScheduleToStartTimeout)+",\n")
	}
	if this.StartToCloseTimeout != nil {
		s = append(s, "StartToCloseTimeout: "+fmt.Sprintf("%#v", this.StartToCloseTimeout)+",\n")
	}
	if this.HeartbeatTimeout != nil {
		s = append(s, "HeartbeatTimeout: "+fmt.Sprintf("%#v", this.HeartbeatTimeout)+",\n")
	}
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	s = append(s, "CancellationType: "+fmt.Sprintf("%#v", this.CancellationType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCancelActivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_workflow_commands.RequestCancelActivity{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&coresdk_workflow_commands.QueryResult{")
	s = append(s, "QueryId: "+fmt.Sprintf("%#v", this.QueryId)+",\n")
	if this.Variant != nil {
		s = append(s, "Variant: "+fmt.Sprintf("%#v", this.Variant)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryResult_Succeeded) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.QueryResult_Succeeded{` +
		`Succeeded:` + fmt.Sprintf("%#v", this.Succeeded) + `}`}, ", ")
	return s
}
func (this *QueryResult_Failed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.QueryResult_Failed{` +
		`Failed:` + fmt.Sprintf("%#v", this.Failed) + `}`}, ", ")
	return s
}
func (this *QuerySuccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_workflow_commands.QuerySuccess{")
	if this.Response != nil {
		s = append(s, "Response: "+fmt.Sprintf("%#v", this.Response)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompleteWorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_workflow_commands.CompleteWorkflowExecution{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FailWorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_workflow_commands.FailWorkflowExecution{")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ContinueAsNewWorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&coresdk_workflow_commands.ContinueAsNewWorkflowExecution{")
	s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	if this.Arguments != nil {
		s = append(s, "Arguments: "+fmt.Sprintf("%#v", this.Arguments)+",\n")
	}
	if this.WorkflowRunTimeout != nil {
		s = append(s, "WorkflowRunTimeout: "+fmt.Sprintf("%#v", this.WorkflowRunTimeout)+",\n")
	}
	if this.WorkflowTaskTimeout != nil {
		s = append(s, "WorkflowTaskTimeout: "+fmt.Sprintf("%#v", this.WorkflowTaskTimeout)+",\n")
	}
	keysForMemo := make([]string, 0, len(this.Memo))
	for k, _ := range this.Memo {
		keysForMemo = append(keysForMemo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMemo)
	mapStringForMemo := "map[string]*commonpb.Payload{"
	for _, k := range keysForMemo {
		mapStringForMemo += fmt.Sprintf("%#v: %#v,", k, this.Memo[k])
	}
	mapStringForMemo += "}"
	if this.Memo != nil {
		s = append(s, "Memo: "+mapStringForMemo+",\n")
	}
	keysForHeader := make([]string, 0, len(this.Header))
	for k, _ := range this.Header {
		keysForHeader = append(keysForHeader, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeader)
	mapStringForHeader := "map[string]*commonpb.Payload{"
	for _, k := range keysForHeader {
		mapStringForHeader += fmt.Sprintf("%#v: %#v,", k, this.Header[k])
	}
	mapStringForHeader += "}"
	if this.Header != nil {
		s = append(s, "Header: "+mapStringForHeader+",\n")
	}
	keysForSearchAttributes := make([]string, 0, len(this.SearchAttributes))
	for k, _ := range this.SearchAttributes {
		keysForSearchAttributes = append(keysForSearchAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSearchAttributes)
	mapStringForSearchAttributes := "map[string]*commonpb.Payload{"
	for _, k := range keysForSearchAttributes {
		mapStringForSearchAttributes += fmt.Sprintf("%#v: %#v,", k, this.SearchAttributes[k])
	}
	mapStringForSearchAttributes += "}"
	if this.SearchAttributes != nil {
		s = append(s, "SearchAttributes: "+mapStringForSearchAttributes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancelWorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&coresdk_workflow_commands.CancelWorkflowExecution{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetPatchMarker) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&coresdk_workflow_commands.SetPatchMarker{")
	s = append(s, "PatchId: "+fmt.Sprintf("%#v", this.PatchId)+",\n")
	s = append(s, "Deprecated: "+fmt.Sprintf("%#v", this.Deprecated)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartChildWorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&coresdk_workflow_commands.StartChildWorkflowExecution{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	if this.WorkflowExecutionTimeout != nil {
		s = append(s, "WorkflowExecutionTimeout: "+fmt.Sprintf("%#v", this.WorkflowExecutionTimeout)+",\n")
	}
	if this.WorkflowRunTimeout != nil {
		s = append(s, "WorkflowRunTimeout: "+fmt.Sprintf("%#v", this.WorkflowRunTimeout)+",\n")
	}
	if this.WorkflowTaskTimeout != nil {
		s = append(s, "WorkflowTaskTimeout: "+fmt.Sprintf("%#v", this.WorkflowTaskTimeout)+",\n")
	}
	s = append(s, "ParentClosePolicy: "+fmt.Sprintf("%#v", this.ParentClosePolicy)+",\n")
	s = append(s, "WorkflowIdReusePolicy: "+fmt.Sprintf("%#v", this.WorkflowIdReusePolicy)+",\n")
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	s = append(s, "CronSchedule: "+fmt.Sprintf("%#v", this.CronSchedule)+",\n")
	keysForHeader := make([]string, 0, len(this.Header))
	for k, _ := range this.Header {
		keysForHeader = append(keysForHeader, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeader)
	mapStringForHeader := "map[string]*commonpb.Payload{"
	for _, k := range keysForHeader {
		mapStringForHeader += fmt.Sprintf("%#v: %#v,", k, this.Header[k])
	}
	mapStringForHeader += "}"
	if this.Header != nil {
		s = append(s, "Header: "+mapStringForHeader+",\n")
	}
	keysForMemo := make([]string, 0, len(this.Memo))
	for k, _ := range this.Memo {
		keysForMemo = append(keysForMemo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMemo)
	mapStringForMemo := "map[string]*commonpb.Payload{"
	for _, k := range keysForMemo {
		mapStringForMemo += fmt.Sprintf("%#v: %#v,", k, this.Memo[k])
	}
	mapStringForMemo += "}"
	if this.Memo != nil {
		s = append(s, "Memo: "+mapStringForMemo+",\n")
	}
	keysForSearchAttributes := make([]string, 0, len(this.SearchAttributes))
	for k, _ := range this.SearchAttributes {
		keysForSearchAttributes = append(keysForSearchAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSearchAttributes)
	mapStringForSearchAttributes := "map[string]*commonpb.Payload{"
	for _, k := range keysForSearchAttributes {
		mapStringForSearchAttributes += fmt.Sprintf("%#v: %#v,", k, this.SearchAttributes[k])
	}
	mapStringForSearchAttributes += "}"
	if this.SearchAttributes != nil {
		s = append(s, "SearchAttributes: "+mapStringForSearchAttributes+",\n")
	}
	s = append(s, "CancellationType: "+fmt.Sprintf("%#v", this.CancellationType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancelUnstartedChildWorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_workflow_commands.CancelUnstartedChildWorkflowExecution{")
	s = append(s, "ChildWorkflowSeq: "+fmt.Sprintf("%#v", this.ChildWorkflowSeq)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCancelExternalWorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&coresdk_workflow_commands.RequestCancelExternalWorkflowExecution{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	if this.Target != nil {
		s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCancelExternalWorkflowExecution_WorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.RequestCancelExternalWorkflowExecution_WorkflowExecution{` +
		`WorkflowExecution:` + fmt.Sprintf("%#v", this.WorkflowExecution) + `}`}, ", ")
	return s
}
func (this *RequestCancelExternalWorkflowExecution_ChildWorkflowId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.RequestCancelExternalWorkflowExecution_ChildWorkflowId{` +
		`ChildWorkflowId:` + fmt.Sprintf("%#v", this.ChildWorkflowId) + `}`}, ", ")
	return s
}
func (this *SignalExternalWorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&coresdk_workflow_commands.SignalExternalWorkflowExecution{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	if this.Target != nil {
		s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	}
	s = append(s, "SignalName: "+fmt.Sprintf("%#v", this.SignalName)+",\n")
	if this.Args != nil {
		s = append(s, "Args: "+fmt.Sprintf("%#v", this.Args)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignalExternalWorkflowExecution_WorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.SignalExternalWorkflowExecution_WorkflowExecution{` +
		`WorkflowExecution:` + fmt.Sprintf("%#v", this.WorkflowExecution) + `}`}, ", ")
	return s
}
func (this *SignalExternalWorkflowExecution_ChildWorkflowId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_commands.SignalExternalWorkflowExecution_ChildWorkflowId{` +
		`ChildWorkflowId:` + fmt.Sprintf("%#v", this.ChildWorkflowId) + `}`}, ", ")
	return s
}
func (this *CancelSignalWorkflow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_workflow_commands.CancelSignalWorkflow{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringWorkflowCommands(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *WorkflowCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Variant != nil {
		{
			size := m.Variant.Size()
			i -= size
			if _, err := m.Variant.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowCommand_StartTimer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowCommand_StartTimer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StartTimer != nil {
		{
			size, err := m.StartTimer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *WorkflowCommand_ScheduleActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowCommand_ScheduleActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScheduleActivity != nil {
		{
			size, err := m.ScheduleActivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WorkflowCommand_RespondToQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowCommand_RespondToQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RespondToQuery != nil {
		{
			size, err := m.RespondToQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *WorkflowCommand_RequestCancelActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowCommand_RequestCancelActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestCancelActivity != nil {
		{
			size, err := m.RequestCancelActivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *WorkflowCommand_CancelTimer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowCommand_CancelTimer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelTimer != nil {
		{
			size, err := m.CancelTimer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *WorkflowCommand_CompleteWorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowCommand_CompleteWorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CompleteWorkflowExecution != nil {
		{
			size, err := m.CompleteWorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *WorkflowCommand_FailWorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowCommand_FailWorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FailWorkflowExecution != nil {
		{
			size, err := m.FailWorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *WorkflowCommand_ContinueAsNewWorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowCommand_ContinueAsNewWorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ContinueAsNewWorkflowExecution != nil {
		{
			size, err := m.ContinueAsNewWorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *WorkflowCommand_CancelWorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowCommand_CancelWorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelWorkflowExecution != nil {
		{
			size, err := m.CancelWorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *WorkflowCommand_SetPatchMarker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowCommand_SetPatchMarker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SetPatchMarker != nil {
		{
			size, err := m.SetPatchMarker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *WorkflowCommand_StartChildWorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowCommand_StartChildWorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StartChildWorkflowExecution != nil {
		{
			size, err := m.StartChildWorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *WorkflowCommand_CancelUnstartedChildWorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowCommand_CancelUnstartedChildWorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelUnstartedChildWorkflowExecution != nil {
		{
			size, err := m.CancelUnstartedChildWorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *WorkflowCommand_RequestCancelExternalWorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowCommand_RequestCancelExternalWorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestCancelExternalWorkflowExecution != nil {
		{
			size, err := m.RequestCancelExternalWorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *WorkflowCommand_SignalExternalWorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowCommand_SignalExternalWorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SignalExternalWorkflowExecution != nil {
		{
			size, err := m.SignalExternalWorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *WorkflowCommand_CancelSignalWorkflow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowCommand_CancelSignalWorkflow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelSignalWorkflow != nil {
		{
			size, err := m.CancelSignalWorkflow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *StartTimer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartTimer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartTimer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartToFireTimeout != nil {
		{
			size, err := m.StartToFireTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Seq != 0 {
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CancelTimer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelTimer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelTimer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ScheduleActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduleActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduleActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CancellationType != 0 {
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(m.CancellationType))
		i--
		dAtA[i] = 0x68
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.HeartbeatTimeout != nil {
		{
			size, err := m.HeartbeatTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.StartToCloseTimeout != nil {
		{
			size, err := m.StartToCloseTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ScheduleToStartTimeout != nil {
		{
			size, err := m.ScheduleToStartTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ScheduleToCloseTimeout != nil {
		{
			size, err := m.ScheduleToCloseTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Arguments) > 0 {
		for iNdEx := len(m.Arguments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Arguments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.HeaderFields) > 0 {
		for k := range m.HeaderFields {
			v := m.HeaderFields[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ActivityType) > 0 {
		i -= len(m.ActivityType)
		copy(dAtA[i:], m.ActivityType)
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(m.ActivityType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Seq != 0 {
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestCancelActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Variant != nil {
		{
			size := m.Variant.Size()
			i -= size
			if _, err := m.Variant.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.QueryId) > 0 {
		i -= len(m.QueryId)
		copy(dAtA[i:], m.QueryId)
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(m.QueryId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryResult_Succeeded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResult_Succeeded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Succeeded != nil {
		{
			size, err := m.Succeeded.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *QueryResult_Failed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResult_Failed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Failed != nil {
		{
			size, err := m.Failed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *QuerySuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySuccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySuccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompleteWorkflowExecution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompleteWorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompleteWorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FailWorkflowExecution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FailWorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailWorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContinueAsNewWorkflowExecution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContinueAsNewWorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContinueAsNewWorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SearchAttributes) > 0 {
		for k := range m.SearchAttributes {
			v := m.SearchAttributes[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Header) > 0 {
		for k := range m.Header {
			v := m.Header[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Memo) > 0 {
		for k := range m.Memo {
			v := m.Memo[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.WorkflowTaskTimeout != nil {
		{
			size, err := m.WorkflowTaskTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.WorkflowRunTimeout != nil {
		{
			size, err := m.WorkflowRunTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Arguments) > 0 {
		for iNdEx := len(m.Arguments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Arguments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WorkflowType) > 0 {
		i -= len(m.WorkflowType)
		copy(dAtA[i:], m.WorkflowType)
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(m.WorkflowType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelWorkflowExecution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelWorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelWorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SetPatchMarker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetPatchMarker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetPatchMarker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deprecated {
		i--
		if m.Deprecated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.PatchId) > 0 {
		i -= len(m.PatchId)
		copy(dAtA[i:], m.PatchId)
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(m.PatchId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartChildWorkflowExecution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartChildWorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartChildWorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CancellationType != 0 {
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(m.CancellationType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.SearchAttributes) > 0 {
		for k := range m.SearchAttributes {
			v := m.SearchAttributes[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.Memo) > 0 {
		for k := range m.Memo {
			v := m.Memo[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.Header) > 0 {
		for k := range m.Header {
			v := m.Header[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.CronSchedule) > 0 {
		i -= len(m.CronSchedule)
		copy(dAtA[i:], m.CronSchedule)
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(m.CronSchedule)))
		i--
		dAtA[i] = 0x72
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.WorkflowIdReusePolicy != 0 {
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(m.WorkflowIdReusePolicy))
		i--
		dAtA[i] = 0x60
	}
	if m.ParentClosePolicy != 0 {
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(m.ParentClosePolicy))
		i--
		dAtA[i] = 0x50
	}
	if m.WorkflowTaskTimeout != nil {
		{
			size, err := m.WorkflowTaskTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.WorkflowRunTimeout != nil {
		{
			size, err := m.WorkflowRunTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.WorkflowExecutionTimeout != nil {
		{
			size, err := m.WorkflowExecutionTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Input) > 0 {
		for iNdEx := len(m.Input) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Input[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WorkflowType) > 0 {
		i -= len(m.WorkflowType)
		copy(dAtA[i:], m.WorkflowType)
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(m.WorkflowType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Seq != 0 {
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CancelUnstartedChildWorkflowExecution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelUnstartedChildWorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelUnstartedChildWorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChildWorkflowSeq != 0 {
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(m.ChildWorkflowSeq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestCancelExternalWorkflowExecution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelExternalWorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelExternalWorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Target != nil {
		{
			size := m.Target.Size()
			i -= size
			if _, err := m.Target.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Seq != 0 {
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestCancelExternalWorkflowExecution_WorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelExternalWorkflowExecution_WorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RequestCancelExternalWorkflowExecution_ChildWorkflowId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelExternalWorkflowExecution_ChildWorkflowId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ChildWorkflowId)
	copy(dAtA[i:], m.ChildWorkflowId)
	i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(m.ChildWorkflowId)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *SignalExternalWorkflowExecution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalExternalWorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalExternalWorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Args[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SignalName) > 0 {
		i -= len(m.SignalName)
		copy(dAtA[i:], m.SignalName)
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(m.SignalName)))
		i--
		dAtA[i] = 0x22
	}
	if m.Target != nil {
		{
			size := m.Target.Size()
			i -= size
			if _, err := m.Target.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Seq != 0 {
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignalExternalWorkflowExecution_WorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalExternalWorkflowExecution_WorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowCommands(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SignalExternalWorkflowExecution_ChildWorkflowId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalExternalWorkflowExecution_ChildWorkflowId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ChildWorkflowId)
	copy(dAtA[i:], m.ChildWorkflowId)
	i = encodeVarintWorkflowCommands(dAtA, i, uint64(len(m.ChildWorkflowId)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *CancelSignalWorkflow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelSignalWorkflow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelSignalWorkflow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintWorkflowCommands(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWorkflowCommands(dAtA []byte, offset int, v uint64) int {
	offset -= sovWorkflowCommands(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WorkflowCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Variant != nil {
		n += m.Variant.Size()
	}
	return n
}

func (m *WorkflowCommand_StartTimer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTimer != nil {
		l = m.StartTimer.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}
func (m *WorkflowCommand_ScheduleActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduleActivity != nil {
		l = m.ScheduleActivity.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}
func (m *WorkflowCommand_RespondToQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RespondToQuery != nil {
		l = m.RespondToQuery.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}
func (m *WorkflowCommand_RequestCancelActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestCancelActivity != nil {
		l = m.RequestCancelActivity.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}
func (m *WorkflowCommand_CancelTimer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelTimer != nil {
		l = m.CancelTimer.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}
func (m *WorkflowCommand_CompleteWorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompleteWorkflowExecution != nil {
		l = m.CompleteWorkflowExecution.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}
func (m *WorkflowCommand_FailWorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FailWorkflowExecution != nil {
		l = m.FailWorkflowExecution.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}
func (m *WorkflowCommand_ContinueAsNewWorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContinueAsNewWorkflowExecution != nil {
		l = m.ContinueAsNewWorkflowExecution.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}
func (m *WorkflowCommand_CancelWorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelWorkflowExecution != nil {
		l = m.CancelWorkflowExecution.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}
func (m *WorkflowCommand_SetPatchMarker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetPatchMarker != nil {
		l = m.SetPatchMarker.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}
func (m *WorkflowCommand_StartChildWorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartChildWorkflowExecution != nil {
		l = m.StartChildWorkflowExecution.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}
func (m *WorkflowCommand_CancelUnstartedChildWorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelUnstartedChildWorkflowExecution != nil {
		l = m.CancelUnstartedChildWorkflowExecution.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}
func (m *WorkflowCommand_RequestCancelExternalWorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestCancelExternalWorkflowExecution != nil {
		l = m.RequestCancelExternalWorkflowExecution.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}
func (m *WorkflowCommand_SignalExternalWorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignalExternalWorkflowExecution != nil {
		l = m.SignalExternalWorkflowExecution.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}
func (m *WorkflowCommand_CancelSignalWorkflow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelSignalWorkflow != nil {
		l = m.CancelSignalWorkflow.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}
func (m *StartTimer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovWorkflowCommands(uint64(m.Seq))
	}
	if m.StartToFireTimeout != nil {
		l = m.StartToFireTimeout.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}

func (m *CancelTimer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovWorkflowCommands(uint64(m.Seq))
	}
	return n
}

func (m *ScheduleActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovWorkflowCommands(uint64(m.Seq))
	}
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	l = len(m.ActivityType)
	if l > 0 {
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	if len(m.HeaderFields) > 0 {
		for k, v := range m.HeaderFields {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovWorkflowCommands(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovWorkflowCommands(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovWorkflowCommands(uint64(mapEntrySize))
		}
	}
	if len(m.Arguments) > 0 {
		for _, e := range m.Arguments {
			l = e.Size()
			n += 1 + l + sovWorkflowCommands(uint64(l))
		}
	}
	if m.ScheduleToCloseTimeout != nil {
		l = m.ScheduleToCloseTimeout.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	if m.ScheduleToStartTimeout != nil {
		l = m.ScheduleToStartTimeout.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	if m.StartToCloseTimeout != nil {
		l = m.StartToCloseTimeout.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	if m.HeartbeatTimeout != nil {
		l = m.HeartbeatTimeout.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	if m.CancellationType != 0 {
		n += 1 + sovWorkflowCommands(uint64(m.CancellationType))
	}
	return n
}

func (m *RequestCancelActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovWorkflowCommands(uint64(m.Seq))
	}
	return n
}

func (m *QueryResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	if m.Variant != nil {
		n += m.Variant.Size()
	}
	return n
}

func (m *QueryResult_Succeeded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Succeeded != nil {
		l = m.Succeeded.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}
func (m *QueryResult_Failed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failed != nil {
		l = m.Failed.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}
func (m *QuerySuccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}

func (m *CompleteWorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}

func (m *FailWorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}

func (m *ContinueAsNewWorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkflowType)
	if l > 0 {
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	if len(m.Arguments) > 0 {
		for _, e := range m.Arguments {
			l = e.Size()
			n += 1 + l + sovWorkflowCommands(uint64(l))
		}
	}
	if m.WorkflowRunTimeout != nil {
		l = m.WorkflowRunTimeout.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	if m.WorkflowTaskTimeout != nil {
		l = m.WorkflowTaskTimeout.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	if len(m.Memo) > 0 {
		for k, v := range m.Memo {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovWorkflowCommands(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovWorkflowCommands(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovWorkflowCommands(uint64(mapEntrySize))
		}
	}
	if len(m.Header) > 0 {
		for k, v := range m.Header {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovWorkflowCommands(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovWorkflowCommands(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovWorkflowCommands(uint64(mapEntrySize))
		}
	}
	if len(m.SearchAttributes) > 0 {
		for k, v := range m.SearchAttributes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovWorkflowCommands(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovWorkflowCommands(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovWorkflowCommands(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CancelWorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetPatchMarker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PatchId)
	if l > 0 {
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	if m.Deprecated {
		n += 2
	}
	return n
}

func (m *StartChildWorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovWorkflowCommands(uint64(m.Seq))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	l = len(m.WorkflowType)
	if l > 0 {
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	if len(m.Input) > 0 {
		for _, e := range m.Input {
			l = e.Size()
			n += 1 + l + sovWorkflowCommands(uint64(l))
		}
	}
	if m.WorkflowExecutionTimeout != nil {
		l = m.WorkflowExecutionTimeout.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	if m.WorkflowRunTimeout != nil {
		l = m.WorkflowRunTimeout.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	if m.WorkflowTaskTimeout != nil {
		l = m.WorkflowTaskTimeout.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	if m.ParentClosePolicy != 0 {
		n += 1 + sovWorkflowCommands(uint64(m.ParentClosePolicy))
	}
	if m.WorkflowIdReusePolicy != 0 {
		n += 1 + sovWorkflowCommands(uint64(m.WorkflowIdReusePolicy))
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	l = len(m.CronSchedule)
	if l > 0 {
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	if len(m.Header) > 0 {
		for k, v := range m.Header {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovWorkflowCommands(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovWorkflowCommands(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovWorkflowCommands(uint64(mapEntrySize))
		}
	}
	if len(m.Memo) > 0 {
		for k, v := range m.Memo {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovWorkflowCommands(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovWorkflowCommands(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovWorkflowCommands(uint64(mapEntrySize))
		}
	}
	if len(m.SearchAttributes) > 0 {
		for k, v := range m.SearchAttributes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovWorkflowCommands(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovWorkflowCommands(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovWorkflowCommands(uint64(mapEntrySize))
		}
	}
	if m.CancellationType != 0 {
		n += 2 + sovWorkflowCommands(uint64(m.CancellationType))
	}
	return n
}

func (m *CancelUnstartedChildWorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildWorkflowSeq != 0 {
		n += 1 + sovWorkflowCommands(uint64(m.ChildWorkflowSeq))
	}
	return n
}

func (m *RequestCancelExternalWorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovWorkflowCommands(uint64(m.Seq))
	}
	if m.Target != nil {
		n += m.Target.Size()
	}
	return n
}

func (m *RequestCancelExternalWorkflowExecution_WorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}
func (m *RequestCancelExternalWorkflowExecution_ChildWorkflowId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChildWorkflowId)
	n += 1 + l + sovWorkflowCommands(uint64(l))
	return n
}
func (m *SignalExternalWorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovWorkflowCommands(uint64(m.Seq))
	}
	if m.Target != nil {
		n += m.Target.Size()
	}
	l = len(m.SignalName)
	if l > 0 {
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, e := range m.Args {
			l = e.Size()
			n += 1 + l + sovWorkflowCommands(uint64(l))
		}
	}
	return n
}

func (m *SignalExternalWorkflowExecution_WorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovWorkflowCommands(uint64(l))
	}
	return n
}
func (m *SignalExternalWorkflowExecution_ChildWorkflowId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChildWorkflowId)
	n += 1 + l + sovWorkflowCommands(uint64(l))
	return n
}
func (m *CancelSignalWorkflow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovWorkflowCommands(uint64(m.Seq))
	}
	return n
}

func sovWorkflowCommands(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWorkflowCommands(x uint64) (n int) {
	return sovWorkflowCommands(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *WorkflowCommand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowCommand{`,
		`Variant:` + fmt.Sprintf("%v", this.Variant) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowCommand_StartTimer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowCommand_StartTimer{`,
		`StartTimer:` + strings.Replace(fmt.Sprintf("%v", this.StartTimer), "StartTimer", "StartTimer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowCommand_ScheduleActivity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowCommand_ScheduleActivity{`,
		`ScheduleActivity:` + strings.Replace(fmt.Sprintf("%v", this.ScheduleActivity), "ScheduleActivity", "ScheduleActivity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowCommand_RespondToQuery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowCommand_RespondToQuery{`,
		`RespondToQuery:` + strings.Replace(fmt.Sprintf("%v", this.RespondToQuery), "QueryResult", "QueryResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowCommand_RequestCancelActivity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowCommand_RequestCancelActivity{`,
		`RequestCancelActivity:` + strings.Replace(fmt.Sprintf("%v", this.RequestCancelActivity), "RequestCancelActivity", "RequestCancelActivity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowCommand_CancelTimer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowCommand_CancelTimer{`,
		`CancelTimer:` + strings.Replace(fmt.Sprintf("%v", this.CancelTimer), "CancelTimer", "CancelTimer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowCommand_CompleteWorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowCommand_CompleteWorkflowExecution{`,
		`CompleteWorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.CompleteWorkflowExecution), "CompleteWorkflowExecution", "CompleteWorkflowExecution", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowCommand_FailWorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowCommand_FailWorkflowExecution{`,
		`FailWorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.FailWorkflowExecution), "FailWorkflowExecution", "FailWorkflowExecution", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowCommand_ContinueAsNewWorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowCommand_ContinueAsNewWorkflowExecution{`,
		`ContinueAsNewWorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.ContinueAsNewWorkflowExecution), "ContinueAsNewWorkflowExecution", "ContinueAsNewWorkflowExecution", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowCommand_CancelWorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowCommand_CancelWorkflowExecution{`,
		`CancelWorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.CancelWorkflowExecution), "CancelWorkflowExecution", "CancelWorkflowExecution", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowCommand_SetPatchMarker) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowCommand_SetPatchMarker{`,
		`SetPatchMarker:` + strings.Replace(fmt.Sprintf("%v", this.SetPatchMarker), "SetPatchMarker", "SetPatchMarker", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowCommand_StartChildWorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowCommand_StartChildWorkflowExecution{`,
		`StartChildWorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.StartChildWorkflowExecution), "StartChildWorkflowExecution", "StartChildWorkflowExecution", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowCommand_CancelUnstartedChildWorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowCommand_CancelUnstartedChildWorkflowExecution{`,
		`CancelUnstartedChildWorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.CancelUnstartedChildWorkflowExecution), "CancelUnstartedChildWorkflowExecution", "CancelUnstartedChildWorkflowExecution", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowCommand_RequestCancelExternalWorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowCommand_RequestCancelExternalWorkflowExecution{`,
		`RequestCancelExternalWorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.RequestCancelExternalWorkflowExecution), "RequestCancelExternalWorkflowExecution", "RequestCancelExternalWorkflowExecution", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowCommand_SignalExternalWorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowCommand_SignalExternalWorkflowExecution{`,
		`SignalExternalWorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.SignalExternalWorkflowExecution), "SignalExternalWorkflowExecution", "SignalExternalWorkflowExecution", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowCommand_CancelSignalWorkflow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowCommand_CancelSignalWorkflow{`,
		`CancelSignalWorkflow:` + strings.Replace(fmt.Sprintf("%v", this.CancelSignalWorkflow), "CancelSignalWorkflow", "CancelSignalWorkflow", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartTimer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartTimer{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`StartToFireTimeout:` + strings.Replace(fmt.Sprintf("%v", this.StartToFireTimeout), "Duration", "types.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancelTimer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelTimer{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScheduleActivity) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForArguments := "[]*Payload{"
	for _, f := range this.Arguments {
		repeatedStringForArguments += strings.Replace(fmt.Sprintf("%v", f), "Payload", "commonpb.Payload", 1) + ","
	}
	repeatedStringForArguments += "}"
	keysForHeaderFields := make([]string, 0, len(this.HeaderFields))
	for k, _ := range this.HeaderFields {
		keysForHeaderFields = append(keysForHeaderFields, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeaderFields)
	mapStringForHeaderFields := "map[string]*commonpb.Payload{"
	for _, k := range keysForHeaderFields {
		mapStringForHeaderFields += fmt.Sprintf("%v: %v,", k, this.HeaderFields[k])
	}
	mapStringForHeaderFields += "}"
	s := strings.Join([]string{`&ScheduleActivity{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`ActivityId:` + fmt.Sprintf("%v", this.ActivityId) + `,`,
		`ActivityType:` + fmt.Sprintf("%v", this.ActivityType) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`HeaderFields:` + mapStringForHeaderFields + `,`,
		`Arguments:` + repeatedStringForArguments + `,`,
		`ScheduleToCloseTimeout:` + strings.Replace(fmt.Sprintf("%v", this.ScheduleToCloseTimeout), "Duration", "types.Duration", 1) + `,`,
		`ScheduleToStartTimeout:` + strings.Replace(fmt.Sprintf("%v", this.ScheduleToStartTimeout), "Duration", "types.Duration", 1) + `,`,
		`StartToCloseTimeout:` + strings.Replace(fmt.Sprintf("%v", this.StartToCloseTimeout), "Duration", "types.Duration", 1) + `,`,
		`HeartbeatTimeout:` + strings.Replace(fmt.Sprintf("%v", this.HeartbeatTimeout), "Duration", "types.Duration", 1) + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicy", "commonpb.RetryPolicy", 1) + `,`,
		`CancellationType:` + fmt.Sprintf("%v", this.CancellationType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCancelActivity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCancelActivity{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryResult{`,
		`QueryId:` + fmt.Sprintf("%v", this.QueryId) + `,`,
		`Variant:` + fmt.Sprintf("%v", this.Variant) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryResult_Succeeded) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryResult_Succeeded{`,
		`Succeeded:` + strings.Replace(fmt.Sprintf("%v", this.Succeeded), "QuerySuccess", "QuerySuccess", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryResult_Failed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryResult_Failed{`,
		`Failed:` + strings.Replace(fmt.Sprintf("%v", this.Failed), "Failure", "v1.Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuerySuccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuerySuccess{`,
		`Response:` + strings.Replace(fmt.Sprintf("%v", this.Response), "Payload", "commonpb.Payload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompleteWorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompleteWorkflowExecution{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "Payload", "commonpb.Payload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FailWorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FailWorkflowExecution{`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "v1.Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContinueAsNewWorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForArguments := "[]*Payload{"
	for _, f := range this.Arguments {
		repeatedStringForArguments += strings.Replace(fmt.Sprintf("%v", f), "Payload", "commonpb.Payload", 1) + ","
	}
	repeatedStringForArguments += "}"
	keysForMemo := make([]string, 0, len(this.Memo))
	for k, _ := range this.Memo {
		keysForMemo = append(keysForMemo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMemo)
	mapStringForMemo := "map[string]*commonpb.Payload{"
	for _, k := range keysForMemo {
		mapStringForMemo += fmt.Sprintf("%v: %v,", k, this.Memo[k])
	}
	mapStringForMemo += "}"
	keysForHeader := make([]string, 0, len(this.Header))
	for k, _ := range this.Header {
		keysForHeader = append(keysForHeader, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeader)
	mapStringForHeader := "map[string]*commonpb.Payload{"
	for _, k := range keysForHeader {
		mapStringForHeader += fmt.Sprintf("%v: %v,", k, this.Header[k])
	}
	mapStringForHeader += "}"
	keysForSearchAttributes := make([]string, 0, len(this.SearchAttributes))
	for k, _ := range this.SearchAttributes {
		keysForSearchAttributes = append(keysForSearchAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSearchAttributes)
	mapStringForSearchAttributes := "map[string]*commonpb.Payload{"
	for _, k := range keysForSearchAttributes {
		mapStringForSearchAttributes += fmt.Sprintf("%v: %v,", k, this.SearchAttributes[k])
	}
	mapStringForSearchAttributes += "}"
	s := strings.Join([]string{`&ContinueAsNewWorkflowExecution{`,
		`WorkflowType:` + fmt.Sprintf("%v", this.WorkflowType) + `,`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`Arguments:` + repeatedStringForArguments + `,`,
		`WorkflowRunTimeout:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowRunTimeout), "Duration", "types.Duration", 1) + `,`,
		`WorkflowTaskTimeout:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowTaskTimeout), "Duration", "types.Duration", 1) + `,`,
		`Memo:` + mapStringForMemo + `,`,
		`Header:` + mapStringForHeader + `,`,
		`SearchAttributes:` + mapStringForSearchAttributes + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancelWorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelWorkflowExecution{`,
		`}`,
	}, "")
	return s
}
func (this *SetPatchMarker) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetPatchMarker{`,
		`PatchId:` + fmt.Sprintf("%v", this.PatchId) + `,`,
		`Deprecated:` + fmt.Sprintf("%v", this.Deprecated) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartChildWorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInput := "[]*Payload{"
	for _, f := range this.Input {
		repeatedStringForInput += strings.Replace(fmt.Sprintf("%v", f), "Payload", "commonpb.Payload", 1) + ","
	}
	repeatedStringForInput += "}"
	keysForHeader := make([]string, 0, len(this.Header))
	for k, _ := range this.Header {
		keysForHeader = append(keysForHeader, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeader)
	mapStringForHeader := "map[string]*commonpb.Payload{"
	for _, k := range keysForHeader {
		mapStringForHeader += fmt.Sprintf("%v: %v,", k, this.Header[k])
	}
	mapStringForHeader += "}"
	keysForMemo := make([]string, 0, len(this.Memo))
	for k, _ := range this.Memo {
		keysForMemo = append(keysForMemo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMemo)
	mapStringForMemo := "map[string]*commonpb.Payload{"
	for _, k := range keysForMemo {
		mapStringForMemo += fmt.Sprintf("%v: %v,", k, this.Memo[k])
	}
	mapStringForMemo += "}"
	keysForSearchAttributes := make([]string, 0, len(this.SearchAttributes))
	for k, _ := range this.SearchAttributes {
		keysForSearchAttributes = append(keysForSearchAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSearchAttributes)
	mapStringForSearchAttributes := "map[string]*commonpb.Payload{"
	for _, k := range keysForSearchAttributes {
		mapStringForSearchAttributes += fmt.Sprintf("%v: %v,", k, this.SearchAttributes[k])
	}
	mapStringForSearchAttributes += "}"
	s := strings.Join([]string{`&StartChildWorkflowExecution{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`WorkflowType:` + fmt.Sprintf("%v", this.WorkflowType) + `,`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`Input:` + repeatedStringForInput + `,`,
		`WorkflowExecutionTimeout:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecutionTimeout), "Duration", "types.Duration", 1) + `,`,
		`WorkflowRunTimeout:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowRunTimeout), "Duration", "types.Duration", 1) + `,`,
		`WorkflowTaskTimeout:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowTaskTimeout), "Duration", "types.Duration", 1) + `,`,
		`ParentClosePolicy:` + fmt.Sprintf("%v", this.ParentClosePolicy) + `,`,
		`WorkflowIdReusePolicy:` + fmt.Sprintf("%v", this.WorkflowIdReusePolicy) + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicy", "commonpb.RetryPolicy", 1) + `,`,
		`CronSchedule:` + fmt.Sprintf("%v", this.CronSchedule) + `,`,
		`Header:` + mapStringForHeader + `,`,
		`Memo:` + mapStringForMemo + `,`,
		`SearchAttributes:` + mapStringForSearchAttributes + `,`,
		`CancellationType:` + fmt.Sprintf("%v", this.CancellationType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancelUnstartedChildWorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelUnstartedChildWorkflowExecution{`,
		`ChildWorkflowSeq:` + fmt.Sprintf("%v", this.ChildWorkflowSeq) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCancelExternalWorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCancelExternalWorkflowExecution{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCancelExternalWorkflowExecution_WorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCancelExternalWorkflowExecution_WorkflowExecution{`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "NamespacedWorkflowExecution", "commonpb.NamespacedWorkflowExecution", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCancelExternalWorkflowExecution_ChildWorkflowId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCancelExternalWorkflowExecution_ChildWorkflowId{`,
		`ChildWorkflowId:` + fmt.Sprintf("%v", this.ChildWorkflowId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignalExternalWorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForArgs := "[]*Payload{"
	for _, f := range this.Args {
		repeatedStringForArgs += strings.Replace(fmt.Sprintf("%v", f), "Payload", "commonpb.Payload", 1) + ","
	}
	repeatedStringForArgs += "}"
	s := strings.Join([]string{`&SignalExternalWorkflowExecution{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`SignalName:` + fmt.Sprintf("%v", this.SignalName) + `,`,
		`Args:` + repeatedStringForArgs + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignalExternalWorkflowExecution_WorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignalExternalWorkflowExecution_WorkflowExecution{`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "NamespacedWorkflowExecution", "commonpb.NamespacedWorkflowExecution", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignalExternalWorkflowExecution_ChildWorkflowId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignalExternalWorkflowExecution_ChildWorkflowId{`,
		`ChildWorkflowId:` + fmt.Sprintf("%v", this.ChildWorkflowId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancelSignalWorkflow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelSignalWorkflow{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringWorkflowCommands(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *WorkflowCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StartTimer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WorkflowCommand_StartTimer{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleActivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScheduleActivity{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WorkflowCommand_ScheduleActivity{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespondToQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WorkflowCommand_RespondToQuery{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCancelActivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestCancelActivity{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WorkflowCommand_RequestCancelActivity{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTimer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelTimer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WorkflowCommand_CancelTimer{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteWorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CompleteWorkflowExecution{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WorkflowCommand_CompleteWorkflowExecution{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailWorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FailWorkflowExecution{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WorkflowCommand_FailWorkflowExecution{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinueAsNewWorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ContinueAsNewWorkflowExecution{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WorkflowCommand_ContinueAsNewWorkflowExecution{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelWorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelWorkflowExecution{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WorkflowCommand_CancelWorkflowExecution{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetPatchMarker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SetPatchMarker{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WorkflowCommand_SetPatchMarker{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartChildWorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StartChildWorkflowExecution{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WorkflowCommand_StartChildWorkflowExecution{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelUnstartedChildWorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelUnstartedChildWorkflowExecution{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WorkflowCommand_CancelUnstartedChildWorkflowExecution{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCancelExternalWorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestCancelExternalWorkflowExecution{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WorkflowCommand_RequestCancelExternalWorkflowExecution{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalExternalWorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SignalExternalWorkflowExecution{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WorkflowCommand_SignalExternalWorkflowExecution{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelSignalWorkflow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelSignalWorkflow{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WorkflowCommand_CancelSignalWorkflow{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartTimer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartTimer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartTimer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartToFireTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartToFireTimeout == nil {
				m.StartToFireTimeout = &types.Duration{}
			}
			if err := m.StartToFireTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelTimer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelTimer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelTimer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduleActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduleActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduleActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeaderFields == nil {
				m.HeaderFields = make(map[string]*commonpb.Payload)
			}
			var mapkey string
			var mapvalue *commonpb.Payload
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWorkflowCommands
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflowCommands
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflowCommands
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &commonpb.Payload{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.HeaderFields[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments, &commonpb.Payload{})
			if err := m.Arguments[len(m.Arguments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleToCloseTimeout == nil {
				m.ScheduleToCloseTimeout = &types.Duration{}
			}
			if err := m.ScheduleToCloseTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToStartTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleToStartTimeout == nil {
				m.ScheduleToStartTimeout = &types.Duration{}
			}
			if err := m.ScheduleToStartTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartToCloseTimeout == nil {
				m.StartToCloseTimeout = &types.Duration{}
			}
			if err := m.StartToCloseTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeartbeatTimeout == nil {
				m.HeartbeatTimeout = &types.Duration{}
			}
			if err := m.HeartbeatTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &commonpb.RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancellationType", wireType)
			}
			m.CancellationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CancellationType |= ActivityCancellationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeeded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QuerySuccess{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &QueryResult_Succeeded{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &v1.Failure{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &QueryResult_Failed{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySuccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySuccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySuccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &commonpb.Payload{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompleteWorkflowExecution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompleteWorkflowExecution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompleteWorkflowExecution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &commonpb.Payload{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FailWorkflowExecution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailWorkflowExecution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailWorkflowExecution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &v1.Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContinueAsNewWorkflowExecution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContinueAsNewWorkflowExecution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContinueAsNewWorkflowExecution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments, &commonpb.Payload{})
			if err := m.Arguments[len(m.Arguments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowRunTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowRunTimeout == nil {
				m.WorkflowRunTimeout = &types.Duration{}
			}
			if err := m.WorkflowRunTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowTaskTimeout == nil {
				m.WorkflowTaskTimeout = &types.Duration{}
			}
			if err := m.WorkflowTaskTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = make(map[string]*commonpb.Payload)
			}
			var mapkey string
			var mapvalue *commonpb.Payload
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWorkflowCommands
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflowCommands
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflowCommands
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &commonpb.Payload{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Memo[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = make(map[string]*commonpb.Payload)
			}
			var mapkey string
			var mapvalue *commonpb.Payload
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWorkflowCommands
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflowCommands
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflowCommands
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &commonpb.Payload{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Header[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = make(map[string]*commonpb.Payload)
			}
			var mapkey string
			var mapvalue *commonpb.Payload
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWorkflowCommands
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflowCommands
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflowCommands
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &commonpb.Payload{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SearchAttributes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelWorkflowExecution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelWorkflowExecution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelWorkflowExecution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPatchMarker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPatchMarker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPatchMarker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatchId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatchId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deprecated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deprecated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartChildWorkflowExecution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartChildWorkflowExecution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartChildWorkflowExecution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input, &commonpb.Payload{})
			if err := m.Input[len(m.Input)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecutionTimeout == nil {
				m.WorkflowExecutionTimeout = &types.Duration{}
			}
			if err := m.WorkflowExecutionTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowRunTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowRunTimeout == nil {
				m.WorkflowRunTimeout = &types.Duration{}
			}
			if err := m.WorkflowRunTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowTaskTimeout == nil {
				m.WorkflowTaskTimeout = &types.Duration{}
			}
			if err := m.WorkflowTaskTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentClosePolicy", wireType)
			}
			m.ParentClosePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentClosePolicy |= childworkflowpb.ParentClosePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowIdReusePolicy", wireType)
			}
			m.WorkflowIdReusePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowIdReusePolicy |= commonpb.WorkflowIdReusePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &commonpb.RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronSchedule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CronSchedule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = make(map[string]*commonpb.Payload)
			}
			var mapkey string
			var mapvalue *commonpb.Payload
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWorkflowCommands
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflowCommands
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflowCommands
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &commonpb.Payload{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Header[mapkey] = mapvalue
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = make(map[string]*commonpb.Payload)
			}
			var mapkey string
			var mapvalue *commonpb.Payload
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWorkflowCommands
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflowCommands
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflowCommands
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &commonpb.Payload{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Memo[mapkey] = mapvalue
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = make(map[string]*commonpb.Payload)
			}
			var mapkey string
			var mapvalue *commonpb.Payload
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWorkflowCommands
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflowCommands
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflowCommands
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &commonpb.Payload{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWorkflowCommands
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SearchAttributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancellationType", wireType)
			}
			m.CancellationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CancellationType |= childworkflowpb.ChildWorkflowCancellationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelUnstartedChildWorkflowExecution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelUnstartedChildWorkflowExecution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelUnstartedChildWorkflowExecution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowSeq", wireType)
			}
			m.ChildWorkflowSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChildWorkflowSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelExternalWorkflowExecution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelExternalWorkflowExecution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelExternalWorkflowExecution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &commonpb.NamespacedWorkflowExecution{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Target = &RequestCancelExternalWorkflowExecution_WorkflowExecution{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = &RequestCancelExternalWorkflowExecution_ChildWorkflowId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalExternalWorkflowExecution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalExternalWorkflowExecution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalExternalWorkflowExecution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &commonpb.NamespacedWorkflowExecution{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Target = &SignalExternalWorkflowExecution_WorkflowExecution{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = &SignalExternalWorkflowExecution_ChildWorkflowId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, &commonpb.Payload{})
			if err := m.Args[len(m.Args)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelSignalWorkflow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowCommands
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelSignalWorkflow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelSignalWorkflow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowCommands(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowCommands
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkflowCommands(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkflowCommands
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflowCommands
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWorkflowCommands
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWorkflowCommands
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWorkflowCommands
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWorkflowCommands        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkflowCommands          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWorkflowCommands = fmt.Errorf("proto: unexpected end of group")
)
