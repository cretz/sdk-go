// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: workflow_activation.proto

//*
// Definitions of the different workflow activation jobs returned from [crate::Core::poll_task]. The
// lang SDK applies these activation jobs to drive workflows.

package coresdk_workflow_activation

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	v1 "go.temporal.io/api/failure/v1"
	activityresultpb "go.temporal.io/sdk/sdkcore/internal/ffi/corepb/activityresultpb"
	childworkflowpb "go.temporal.io/sdk/sdkcore/internal/ffi/corepb/childworkflowpb"
	commonpb "go.temporal.io/sdk/sdkcore/internal/ffi/corepb/commonpb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

/// An instruction to the lang sdk to run some workflow code, whether for the first time or from
/// a cached state.
type WFActivation struct {
	/// The id of the currently active run of the workflow. Also used as a cache key. There may
	/// only ever be one active workflow task (and hence activation) of a run at one time.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	/// The current time as understood by the workflow, which is set by workflow task started events
	Timestamp *types.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	/// Whether or not the activation is replaying past events
	IsReplaying bool `protobuf:"varint,3,opt,name=is_replaying,json=isReplaying,proto3" json:"is_replaying,omitempty"`
	/// The things to do upon activating the workflow
	Jobs []*WFActivationJob `protobuf:"bytes,4,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (m *WFActivation) Reset()      { *m = WFActivation{} }
func (*WFActivation) ProtoMessage() {}
func (*WFActivation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3d2c0fc80d74bf1, []int{0}
}
func (m *WFActivation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WFActivation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WFActivation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WFActivation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WFActivation.Merge(m, src)
}
func (m *WFActivation) XXX_Size() int {
	return m.Size()
}
func (m *WFActivation) XXX_DiscardUnknown() {
	xxx_messageInfo_WFActivation.DiscardUnknown(m)
}

var xxx_messageInfo_WFActivation proto.InternalMessageInfo

func (m *WFActivation) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *WFActivation) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *WFActivation) GetIsReplaying() bool {
	if m != nil {
		return m.IsReplaying
	}
	return false
}

func (m *WFActivation) GetJobs() []*WFActivationJob {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type WFActivationJob struct {
	// Types that are valid to be assigned to Variant:
	//	*WFActivationJob_StartWorkflow
	//	*WFActivationJob_FireTimer
	//	*WFActivationJob_UpdateRandomSeed
	//	*WFActivationJob_QueryWorkflow
	//	*WFActivationJob_CancelWorkflow
	//	*WFActivationJob_SignalWorkflow
	//	*WFActivationJob_ResolveActivity
	//	*WFActivationJob_NotifyHasPatch
	//	*WFActivationJob_ResolveChildWorkflowExecutionStart
	//	*WFActivationJob_ResolveChildWorkflowExecution
	//	*WFActivationJob_ResolveSignalExternalWorkflow
	//	*WFActivationJob_ResolveRequestCancelExternalWorkflow
	//	*WFActivationJob_RemoveFromCache
	Variant isWFActivationJob_Variant `protobuf_oneof:"variant"`
}

func (m *WFActivationJob) Reset()      { *m = WFActivationJob{} }
func (*WFActivationJob) ProtoMessage() {}
func (*WFActivationJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3d2c0fc80d74bf1, []int{1}
}
func (m *WFActivationJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WFActivationJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WFActivationJob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WFActivationJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WFActivationJob.Merge(m, src)
}
func (m *WFActivationJob) XXX_Size() int {
	return m.Size()
}
func (m *WFActivationJob) XXX_DiscardUnknown() {
	xxx_messageInfo_WFActivationJob.DiscardUnknown(m)
}

var xxx_messageInfo_WFActivationJob proto.InternalMessageInfo

type isWFActivationJob_Variant interface {
	isWFActivationJob_Variant()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WFActivationJob_StartWorkflow struct {
	StartWorkflow *StartWorkflow `protobuf:"bytes,1,opt,name=start_workflow,json=startWorkflow,proto3,oneof" json:"start_workflow,omitempty"`
}
type WFActivationJob_FireTimer struct {
	FireTimer *FireTimer `protobuf:"bytes,2,opt,name=fire_timer,json=fireTimer,proto3,oneof" json:"fire_timer,omitempty"`
}
type WFActivationJob_UpdateRandomSeed struct {
	UpdateRandomSeed *UpdateRandomSeed `protobuf:"bytes,4,opt,name=update_random_seed,json=updateRandomSeed,proto3,oneof" json:"update_random_seed,omitempty"`
}
type WFActivationJob_QueryWorkflow struct {
	QueryWorkflow *QueryWorkflow `protobuf:"bytes,5,opt,name=query_workflow,json=queryWorkflow,proto3,oneof" json:"query_workflow,omitempty"`
}
type WFActivationJob_CancelWorkflow struct {
	CancelWorkflow *CancelWorkflow `protobuf:"bytes,6,opt,name=cancel_workflow,json=cancelWorkflow,proto3,oneof" json:"cancel_workflow,omitempty"`
}
type WFActivationJob_SignalWorkflow struct {
	SignalWorkflow *SignalWorkflow `protobuf:"bytes,7,opt,name=signal_workflow,json=signalWorkflow,proto3,oneof" json:"signal_workflow,omitempty"`
}
type WFActivationJob_ResolveActivity struct {
	ResolveActivity *ResolveActivity `protobuf:"bytes,8,opt,name=resolve_activity,json=resolveActivity,proto3,oneof" json:"resolve_activity,omitempty"`
}
type WFActivationJob_NotifyHasPatch struct {
	NotifyHasPatch *NotifyHasPatch `protobuf:"bytes,9,opt,name=notify_has_patch,json=notifyHasPatch,proto3,oneof" json:"notify_has_patch,omitempty"`
}
type WFActivationJob_ResolveChildWorkflowExecutionStart struct {
	ResolveChildWorkflowExecutionStart *ResolveChildWorkflowExecutionStart `protobuf:"bytes,10,opt,name=resolve_child_workflow_execution_start,json=resolveChildWorkflowExecutionStart,proto3,oneof" json:"resolve_child_workflow_execution_start,omitempty"`
}
type WFActivationJob_ResolveChildWorkflowExecution struct {
	ResolveChildWorkflowExecution *ResolveChildWorkflowExecution `protobuf:"bytes,11,opt,name=resolve_child_workflow_execution,json=resolveChildWorkflowExecution,proto3,oneof" json:"resolve_child_workflow_execution,omitempty"`
}
type WFActivationJob_ResolveSignalExternalWorkflow struct {
	ResolveSignalExternalWorkflow *ResolveSignalExternalWorkflow `protobuf:"bytes,12,opt,name=resolve_signal_external_workflow,json=resolveSignalExternalWorkflow,proto3,oneof" json:"resolve_signal_external_workflow,omitempty"`
}
type WFActivationJob_ResolveRequestCancelExternalWorkflow struct {
	ResolveRequestCancelExternalWorkflow *ResolveRequestCancelExternalWorkflow `protobuf:"bytes,13,opt,name=resolve_request_cancel_external_workflow,json=resolveRequestCancelExternalWorkflow,proto3,oneof" json:"resolve_request_cancel_external_workflow,omitempty"`
}
type WFActivationJob_RemoveFromCache struct {
	RemoveFromCache bool `protobuf:"varint,50,opt,name=remove_from_cache,json=removeFromCache,proto3,oneof" json:"remove_from_cache,omitempty"`
}

func (*WFActivationJob_StartWorkflow) isWFActivationJob_Variant()                        {}
func (*WFActivationJob_FireTimer) isWFActivationJob_Variant()                            {}
func (*WFActivationJob_UpdateRandomSeed) isWFActivationJob_Variant()                     {}
func (*WFActivationJob_QueryWorkflow) isWFActivationJob_Variant()                        {}
func (*WFActivationJob_CancelWorkflow) isWFActivationJob_Variant()                       {}
func (*WFActivationJob_SignalWorkflow) isWFActivationJob_Variant()                       {}
func (*WFActivationJob_ResolveActivity) isWFActivationJob_Variant()                      {}
func (*WFActivationJob_NotifyHasPatch) isWFActivationJob_Variant()                       {}
func (*WFActivationJob_ResolveChildWorkflowExecutionStart) isWFActivationJob_Variant()   {}
func (*WFActivationJob_ResolveChildWorkflowExecution) isWFActivationJob_Variant()        {}
func (*WFActivationJob_ResolveSignalExternalWorkflow) isWFActivationJob_Variant()        {}
func (*WFActivationJob_ResolveRequestCancelExternalWorkflow) isWFActivationJob_Variant() {}
func (*WFActivationJob_RemoveFromCache) isWFActivationJob_Variant()                      {}

func (m *WFActivationJob) GetVariant() isWFActivationJob_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (m *WFActivationJob) GetStartWorkflow() *StartWorkflow {
	if x, ok := m.GetVariant().(*WFActivationJob_StartWorkflow); ok {
		return x.StartWorkflow
	}
	return nil
}

func (m *WFActivationJob) GetFireTimer() *FireTimer {
	if x, ok := m.GetVariant().(*WFActivationJob_FireTimer); ok {
		return x.FireTimer
	}
	return nil
}

func (m *WFActivationJob) GetUpdateRandomSeed() *UpdateRandomSeed {
	if x, ok := m.GetVariant().(*WFActivationJob_UpdateRandomSeed); ok {
		return x.UpdateRandomSeed
	}
	return nil
}

func (m *WFActivationJob) GetQueryWorkflow() *QueryWorkflow {
	if x, ok := m.GetVariant().(*WFActivationJob_QueryWorkflow); ok {
		return x.QueryWorkflow
	}
	return nil
}

func (m *WFActivationJob) GetCancelWorkflow() *CancelWorkflow {
	if x, ok := m.GetVariant().(*WFActivationJob_CancelWorkflow); ok {
		return x.CancelWorkflow
	}
	return nil
}

func (m *WFActivationJob) GetSignalWorkflow() *SignalWorkflow {
	if x, ok := m.GetVariant().(*WFActivationJob_SignalWorkflow); ok {
		return x.SignalWorkflow
	}
	return nil
}

func (m *WFActivationJob) GetResolveActivity() *ResolveActivity {
	if x, ok := m.GetVariant().(*WFActivationJob_ResolveActivity); ok {
		return x.ResolveActivity
	}
	return nil
}

func (m *WFActivationJob) GetNotifyHasPatch() *NotifyHasPatch {
	if x, ok := m.GetVariant().(*WFActivationJob_NotifyHasPatch); ok {
		return x.NotifyHasPatch
	}
	return nil
}

func (m *WFActivationJob) GetResolveChildWorkflowExecutionStart() *ResolveChildWorkflowExecutionStart {
	if x, ok := m.GetVariant().(*WFActivationJob_ResolveChildWorkflowExecutionStart); ok {
		return x.ResolveChildWorkflowExecutionStart
	}
	return nil
}

func (m *WFActivationJob) GetResolveChildWorkflowExecution() *ResolveChildWorkflowExecution {
	if x, ok := m.GetVariant().(*WFActivationJob_ResolveChildWorkflowExecution); ok {
		return x.ResolveChildWorkflowExecution
	}
	return nil
}

func (m *WFActivationJob) GetResolveSignalExternalWorkflow() *ResolveSignalExternalWorkflow {
	if x, ok := m.GetVariant().(*WFActivationJob_ResolveSignalExternalWorkflow); ok {
		return x.ResolveSignalExternalWorkflow
	}
	return nil
}

func (m *WFActivationJob) GetResolveRequestCancelExternalWorkflow() *ResolveRequestCancelExternalWorkflow {
	if x, ok := m.GetVariant().(*WFActivationJob_ResolveRequestCancelExternalWorkflow); ok {
		return x.ResolveRequestCancelExternalWorkflow
	}
	return nil
}

func (m *WFActivationJob) GetRemoveFromCache() bool {
	if x, ok := m.GetVariant().(*WFActivationJob_RemoveFromCache); ok {
		return x.RemoveFromCache
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WFActivationJob) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WFActivationJob_StartWorkflow)(nil),
		(*WFActivationJob_FireTimer)(nil),
		(*WFActivationJob_UpdateRandomSeed)(nil),
		(*WFActivationJob_QueryWorkflow)(nil),
		(*WFActivationJob_CancelWorkflow)(nil),
		(*WFActivationJob_SignalWorkflow)(nil),
		(*WFActivationJob_ResolveActivity)(nil),
		(*WFActivationJob_NotifyHasPatch)(nil),
		(*WFActivationJob_ResolveChildWorkflowExecutionStart)(nil),
		(*WFActivationJob_ResolveChildWorkflowExecution)(nil),
		(*WFActivationJob_ResolveSignalExternalWorkflow)(nil),
		(*WFActivationJob_ResolveRequestCancelExternalWorkflow)(nil),
		(*WFActivationJob_RemoveFromCache)(nil),
	}
}

/// Start a new workflow
type StartWorkflow struct {
	/// The identifier the lang-specific sdk uses to execute workflow code
	WorkflowType string `protobuf:"bytes,1,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	/// The workflow id used on the temporal server
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	/// Inputs to the workflow code
	Arguments []*commonpb.Payload `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
	/// The seed must be used to initialize the random generator used by SDK.
	/// RandomSeedUpdatedAttributes are used to deliver seed updates.
	RandomnessSeed uint64 `protobuf:"varint,4,opt,name=randomness_seed,json=randomnessSeed,proto3" json:"randomness_seed,omitempty"`
	/// Used to add metadata e.g. for tracing and auth, meant to be read and written to by interceptors.
	Headers map[string]*commonpb.Payload `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *StartWorkflow) Reset()      { *m = StartWorkflow{} }
func (*StartWorkflow) ProtoMessage() {}
func (*StartWorkflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3d2c0fc80d74bf1, []int{2}
}
func (m *StartWorkflow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartWorkflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartWorkflow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartWorkflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartWorkflow.Merge(m, src)
}
func (m *StartWorkflow) XXX_Size() int {
	return m.Size()
}
func (m *StartWorkflow) XXX_DiscardUnknown() {
	xxx_messageInfo_StartWorkflow.DiscardUnknown(m)
}

var xxx_messageInfo_StartWorkflow proto.InternalMessageInfo

func (m *StartWorkflow) GetWorkflowType() string {
	if m != nil {
		return m.WorkflowType
	}
	return ""
}

func (m *StartWorkflow) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *StartWorkflow) GetArguments() []*commonpb.Payload {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *StartWorkflow) GetRandomnessSeed() uint64 {
	if m != nil {
		return m.RandomnessSeed
	}
	return 0
}

func (m *StartWorkflow) GetHeaders() map[string]*commonpb.Payload {
	if m != nil {
		return m.Headers
	}
	return nil
}

/// Notify a workflow that a timer has fired
type FireTimer struct {
	/// Sequence number as provided by lang in the corresponding StartTimer command
	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *FireTimer) Reset()      { *m = FireTimer{} }
func (*FireTimer) ProtoMessage() {}
func (*FireTimer) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3d2c0fc80d74bf1, []int{3}
}
func (m *FireTimer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FireTimer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FireTimer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FireTimer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FireTimer.Merge(m, src)
}
func (m *FireTimer) XXX_Size() int {
	return m.Size()
}
func (m *FireTimer) XXX_DiscardUnknown() {
	xxx_messageInfo_FireTimer.DiscardUnknown(m)
}

var xxx_messageInfo_FireTimer proto.InternalMessageInfo

func (m *FireTimer) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

/// Notify a workflow that an activity has been resolved
type ResolveActivity struct {
	/// Sequence number as provided by lang in the corresponding ScheduleActivity command
	Seq    uint32                           `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Result *activityresultpb.ActivityResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ResolveActivity) Reset()      { *m = ResolveActivity{} }
func (*ResolveActivity) ProtoMessage() {}
func (*ResolveActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3d2c0fc80d74bf1, []int{4}
}
func (m *ResolveActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolveActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolveActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolveActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveActivity.Merge(m, src)
}
func (m *ResolveActivity) XXX_Size() int {
	return m.Size()
}
func (m *ResolveActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveActivity.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveActivity proto.InternalMessageInfo

func (m *ResolveActivity) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResolveActivity) GetResult() *activityresultpb.ActivityResult {
	if m != nil {
		return m.Result
	}
	return nil
}

/// Notify a workflow that a start child workflow execution request has succeeded, failed or was
/// cancelled.
type ResolveChildWorkflowExecutionStart struct {
	/// Sequence number as provided by lang in the corresponding StartChildWorkflowExecution command
	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	// Types that are valid to be assigned to Status:
	//	*ResolveChildWorkflowExecutionStart_Succeeded
	//	*ResolveChildWorkflowExecutionStart_Failed
	//	*ResolveChildWorkflowExecutionStart_Cancelled
	Status isResolveChildWorkflowExecutionStart_Status `protobuf_oneof:"status"`
}

func (m *ResolveChildWorkflowExecutionStart) Reset()      { *m = ResolveChildWorkflowExecutionStart{} }
func (*ResolveChildWorkflowExecutionStart) ProtoMessage() {}
func (*ResolveChildWorkflowExecutionStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3d2c0fc80d74bf1, []int{5}
}
func (m *ResolveChildWorkflowExecutionStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolveChildWorkflowExecutionStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolveChildWorkflowExecutionStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolveChildWorkflowExecutionStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveChildWorkflowExecutionStart.Merge(m, src)
}
func (m *ResolveChildWorkflowExecutionStart) XXX_Size() int {
	return m.Size()
}
func (m *ResolveChildWorkflowExecutionStart) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveChildWorkflowExecutionStart.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveChildWorkflowExecutionStart proto.InternalMessageInfo

type isResolveChildWorkflowExecutionStart_Status interface {
	isResolveChildWorkflowExecutionStart_Status()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ResolveChildWorkflowExecutionStart_Succeeded struct {
	Succeeded *ResolveChildWorkflowExecutionStartSuccess `protobuf:"bytes,2,opt,name=succeeded,proto3,oneof" json:"succeeded,omitempty"`
}
type ResolveChildWorkflowExecutionStart_Failed struct {
	Failed *ResolveChildWorkflowExecutionStartFailure `protobuf:"bytes,3,opt,name=failed,proto3,oneof" json:"failed,omitempty"`
}
type ResolveChildWorkflowExecutionStart_Cancelled struct {
	Cancelled *ResolveChildWorkflowExecutionStartCancelled `protobuf:"bytes,4,opt,name=cancelled,proto3,oneof" json:"cancelled,omitempty"`
}

func (*ResolveChildWorkflowExecutionStart_Succeeded) isResolveChildWorkflowExecutionStart_Status() {}
func (*ResolveChildWorkflowExecutionStart_Failed) isResolveChildWorkflowExecutionStart_Status()    {}
func (*ResolveChildWorkflowExecutionStart_Cancelled) isResolveChildWorkflowExecutionStart_Status() {}

func (m *ResolveChildWorkflowExecutionStart) GetStatus() isResolveChildWorkflowExecutionStart_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ResolveChildWorkflowExecutionStart) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResolveChildWorkflowExecutionStart) GetSucceeded() *ResolveChildWorkflowExecutionStartSuccess {
	if x, ok := m.GetStatus().(*ResolveChildWorkflowExecutionStart_Succeeded); ok {
		return x.Succeeded
	}
	return nil
}

func (m *ResolveChildWorkflowExecutionStart) GetFailed() *ResolveChildWorkflowExecutionStartFailure {
	if x, ok := m.GetStatus().(*ResolveChildWorkflowExecutionStart_Failed); ok {
		return x.Failed
	}
	return nil
}

func (m *ResolveChildWorkflowExecutionStart) GetCancelled() *ResolveChildWorkflowExecutionStartCancelled {
	if x, ok := m.GetStatus().(*ResolveChildWorkflowExecutionStart_Cancelled); ok {
		return x.Cancelled
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ResolveChildWorkflowExecutionStart) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ResolveChildWorkflowExecutionStart_Succeeded)(nil),
		(*ResolveChildWorkflowExecutionStart_Failed)(nil),
		(*ResolveChildWorkflowExecutionStart_Cancelled)(nil),
	}
}

/// Simply pass the run_id to lang
type ResolveChildWorkflowExecutionStartSuccess struct {
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (m *ResolveChildWorkflowExecutionStartSuccess) Reset() {
	*m = ResolveChildWorkflowExecutionStartSuccess{}
}
func (*ResolveChildWorkflowExecutionStartSuccess) ProtoMessage() {}
func (*ResolveChildWorkflowExecutionStartSuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3d2c0fc80d74bf1, []int{6}
}
func (m *ResolveChildWorkflowExecutionStartSuccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolveChildWorkflowExecutionStartSuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolveChildWorkflowExecutionStartSuccess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolveChildWorkflowExecutionStartSuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveChildWorkflowExecutionStartSuccess.Merge(m, src)
}
func (m *ResolveChildWorkflowExecutionStartSuccess) XXX_Size() int {
	return m.Size()
}
func (m *ResolveChildWorkflowExecutionStartSuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveChildWorkflowExecutionStartSuccess.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveChildWorkflowExecutionStartSuccess proto.InternalMessageInfo

func (m *ResolveChildWorkflowExecutionStartSuccess) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

/// Provide lang the cause of failure
type ResolveChildWorkflowExecutionStartFailure struct {
	/// Lang should have this information but it's more convenient to pass it back
	/// for error construction on the lang side.
	WorkflowId   string                                                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowType string                                                 `protobuf:"bytes,2,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	Cause        childworkflowpb.StartChildWorkflowExecutionFailedCause `protobuf:"varint,3,opt,name=cause,proto3,enum=coresdk.child_workflow.StartChildWorkflowExecutionFailedCause" json:"cause,omitempty"`
}

func (m *ResolveChildWorkflowExecutionStartFailure) Reset() {
	*m = ResolveChildWorkflowExecutionStartFailure{}
}
func (*ResolveChildWorkflowExecutionStartFailure) ProtoMessage() {}
func (*ResolveChildWorkflowExecutionStartFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3d2c0fc80d74bf1, []int{7}
}
func (m *ResolveChildWorkflowExecutionStartFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolveChildWorkflowExecutionStartFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolveChildWorkflowExecutionStartFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolveChildWorkflowExecutionStartFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveChildWorkflowExecutionStartFailure.Merge(m, src)
}
func (m *ResolveChildWorkflowExecutionStartFailure) XXX_Size() int {
	return m.Size()
}
func (m *ResolveChildWorkflowExecutionStartFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveChildWorkflowExecutionStartFailure.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveChildWorkflowExecutionStartFailure proto.InternalMessageInfo

func (m *ResolveChildWorkflowExecutionStartFailure) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *ResolveChildWorkflowExecutionStartFailure) GetWorkflowType() string {
	if m != nil {
		return m.WorkflowType
	}
	return ""
}

func (m *ResolveChildWorkflowExecutionStartFailure) GetCause() childworkflowpb.StartChildWorkflowExecutionFailedCause {
	if m != nil {
		return m.Cause
	}
	return childworkflowpb.START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED
}

/// `failure` should be ChildWorkflowFailure with cause set to CancelledFailure.
/// The failure is constructed in core for lang's convenience.
type ResolveChildWorkflowExecutionStartCancelled struct {
	Failure *v1.Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (m *ResolveChildWorkflowExecutionStartCancelled) Reset() {
	*m = ResolveChildWorkflowExecutionStartCancelled{}
}
func (*ResolveChildWorkflowExecutionStartCancelled) ProtoMessage() {}
func (*ResolveChildWorkflowExecutionStartCancelled) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3d2c0fc80d74bf1, []int{8}
}
func (m *ResolveChildWorkflowExecutionStartCancelled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolveChildWorkflowExecutionStartCancelled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolveChildWorkflowExecutionStartCancelled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolveChildWorkflowExecutionStartCancelled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveChildWorkflowExecutionStartCancelled.Merge(m, src)
}
func (m *ResolveChildWorkflowExecutionStartCancelled) XXX_Size() int {
	return m.Size()
}
func (m *ResolveChildWorkflowExecutionStartCancelled) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveChildWorkflowExecutionStartCancelled.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveChildWorkflowExecutionStartCancelled proto.InternalMessageInfo

func (m *ResolveChildWorkflowExecutionStartCancelled) GetFailure() *v1.Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

/// Notify a workflow that a child workflow execution has been resolved
type ResolveChildWorkflowExecution struct {
	/// Sequence number as provided by lang in the corresponding StartChildWorkflowExecution command
	Seq    uint32                               `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Result *childworkflowpb.ChildWorkflowResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ResolveChildWorkflowExecution) Reset()      { *m = ResolveChildWorkflowExecution{} }
func (*ResolveChildWorkflowExecution) ProtoMessage() {}
func (*ResolveChildWorkflowExecution) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3d2c0fc80d74bf1, []int{9}
}
func (m *ResolveChildWorkflowExecution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolveChildWorkflowExecution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolveChildWorkflowExecution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolveChildWorkflowExecution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveChildWorkflowExecution.Merge(m, src)
}
func (m *ResolveChildWorkflowExecution) XXX_Size() int {
	return m.Size()
}
func (m *ResolveChildWorkflowExecution) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveChildWorkflowExecution.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveChildWorkflowExecution proto.InternalMessageInfo

func (m *ResolveChildWorkflowExecution) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResolveChildWorkflowExecution) GetResult() *childworkflowpb.ChildWorkflowResult {
	if m != nil {
		return m.Result
	}
	return nil
}

/// Update the workflow's random seed
type UpdateRandomSeed struct {
	RandomnessSeed uint64 `protobuf:"varint,1,opt,name=randomness_seed,json=randomnessSeed,proto3" json:"randomness_seed,omitempty"`
}

func (m *UpdateRandomSeed) Reset()      { *m = UpdateRandomSeed{} }
func (*UpdateRandomSeed) ProtoMessage() {}
func (*UpdateRandomSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3d2c0fc80d74bf1, []int{10}
}
func (m *UpdateRandomSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRandomSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRandomSeed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRandomSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRandomSeed.Merge(m, src)
}
func (m *UpdateRandomSeed) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRandomSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRandomSeed.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRandomSeed proto.InternalMessageInfo

func (m *UpdateRandomSeed) GetRandomnessSeed() uint64 {
	if m != nil {
		return m.RandomnessSeed
	}
	return 0
}

/// Query a workflow
type QueryWorkflow struct {
	/// For PollWFTResp `query` field, this will be set to the special value `legacy`. For the
	/// `queries` field, the server provides a unique identifier. If it is a `legacy` query,
	/// lang cannot issue any commands in response other than to answer the query.
	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	/// The query's function/method/etc name
	QueryType string              `protobuf:"bytes,2,opt,name=query_type,json=queryType,proto3" json:"query_type,omitempty"`
	Arguments []*commonpb.Payload `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (m *QueryWorkflow) Reset()      { *m = QueryWorkflow{} }
func (*QueryWorkflow) ProtoMessage() {}
func (*QueryWorkflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3d2c0fc80d74bf1, []int{11}
}
func (m *QueryWorkflow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkflow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkflow.Merge(m, src)
}
func (m *QueryWorkflow) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkflow) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkflow.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkflow proto.InternalMessageInfo

func (m *QueryWorkflow) GetQueryId() string {
	if m != nil {
		return m.QueryId
	}
	return ""
}

func (m *QueryWorkflow) GetQueryType() string {
	if m != nil {
		return m.QueryType
	}
	return ""
}

func (m *QueryWorkflow) GetArguments() []*commonpb.Payload {
	if m != nil {
		return m.Arguments
	}
	return nil
}

/// Cancel a running workflow
type CancelWorkflow struct {
	/// Information from the cancellation request
	Details []*commonpb.Payload `protobuf:"bytes,1,rep,name=details,proto3" json:"details,omitempty"`
}

func (m *CancelWorkflow) Reset()      { *m = CancelWorkflow{} }
func (*CancelWorkflow) ProtoMessage() {}
func (*CancelWorkflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3d2c0fc80d74bf1, []int{12}
}
func (m *CancelWorkflow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelWorkflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelWorkflow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelWorkflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelWorkflow.Merge(m, src)
}
func (m *CancelWorkflow) XXX_Size() int {
	return m.Size()
}
func (m *CancelWorkflow) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelWorkflow.DiscardUnknown(m)
}

var xxx_messageInfo_CancelWorkflow proto.InternalMessageInfo

func (m *CancelWorkflow) GetDetails() []*commonpb.Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

/// Send a signal to a workflow
type SignalWorkflow struct {
	SignalName string              `protobuf:"bytes,1,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
	Input      []*commonpb.Payload `protobuf:"bytes,2,rep,name=input,proto3" json:"input,omitempty"`
	Identity   string              `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *SignalWorkflow) Reset()      { *m = SignalWorkflow{} }
func (*SignalWorkflow) ProtoMessage() {}
func (*SignalWorkflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3d2c0fc80d74bf1, []int{13}
}
func (m *SignalWorkflow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalWorkflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalWorkflow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalWorkflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalWorkflow.Merge(m, src)
}
func (m *SignalWorkflow) XXX_Size() int {
	return m.Size()
}
func (m *SignalWorkflow) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalWorkflow.DiscardUnknown(m)
}

var xxx_messageInfo_SignalWorkflow proto.InternalMessageInfo

func (m *SignalWorkflow) GetSignalName() string {
	if m != nil {
		return m.SignalName
	}
	return ""
}

func (m *SignalWorkflow) GetInput() []*commonpb.Payload {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *SignalWorkflow) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

// Inform lang what the result of a call to `patched` or similar API should be -- this is always
// sent pre-emptively, so any time it is sent the change is present
type NotifyHasPatch struct {
	PatchId string `protobuf:"bytes,1,opt,name=patch_id,json=patchId,proto3" json:"patch_id,omitempty"`
}

func (m *NotifyHasPatch) Reset()      { *m = NotifyHasPatch{} }
func (*NotifyHasPatch) ProtoMessage() {}
func (*NotifyHasPatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3d2c0fc80d74bf1, []int{14}
}
func (m *NotifyHasPatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyHasPatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyHasPatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyHasPatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyHasPatch.Merge(m, src)
}
func (m *NotifyHasPatch) XXX_Size() int {
	return m.Size()
}
func (m *NotifyHasPatch) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyHasPatch.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyHasPatch proto.InternalMessageInfo

func (m *NotifyHasPatch) GetPatchId() string {
	if m != nil {
		return m.PatchId
	}
	return ""
}

type ResolveSignalExternalWorkflow struct {
	/// Sequence number as provided by lang in the corresponding SignalExternalWorkflowExecution
	/// command
	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	/// If populated, this signal either failed to be sent or was cancelled depending on failure
	/// type / info.
	Failure *v1.Failure `protobuf:"bytes,2,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (m *ResolveSignalExternalWorkflow) Reset()      { *m = ResolveSignalExternalWorkflow{} }
func (*ResolveSignalExternalWorkflow) ProtoMessage() {}
func (*ResolveSignalExternalWorkflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3d2c0fc80d74bf1, []int{15}
}
func (m *ResolveSignalExternalWorkflow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolveSignalExternalWorkflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolveSignalExternalWorkflow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolveSignalExternalWorkflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveSignalExternalWorkflow.Merge(m, src)
}
func (m *ResolveSignalExternalWorkflow) XXX_Size() int {
	return m.Size()
}
func (m *ResolveSignalExternalWorkflow) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveSignalExternalWorkflow.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveSignalExternalWorkflow proto.InternalMessageInfo

func (m *ResolveSignalExternalWorkflow) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResolveSignalExternalWorkflow) GetFailure() *v1.Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

type ResolveRequestCancelExternalWorkflow struct {
	/// Sequence number as provided by lang in the corresponding
	/// RequestCancelExternalWorkflowExecution command
	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	/// If populated, this signal either failed to be sent or was cancelled depending on failure
	/// type / info.
	Failure *v1.Failure `protobuf:"bytes,2,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (m *ResolveRequestCancelExternalWorkflow) Reset()      { *m = ResolveRequestCancelExternalWorkflow{} }
func (*ResolveRequestCancelExternalWorkflow) ProtoMessage() {}
func (*ResolveRequestCancelExternalWorkflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3d2c0fc80d74bf1, []int{16}
}
func (m *ResolveRequestCancelExternalWorkflow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolveRequestCancelExternalWorkflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolveRequestCancelExternalWorkflow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolveRequestCancelExternalWorkflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveRequestCancelExternalWorkflow.Merge(m, src)
}
func (m *ResolveRequestCancelExternalWorkflow) XXX_Size() int {
	return m.Size()
}
func (m *ResolveRequestCancelExternalWorkflow) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveRequestCancelExternalWorkflow.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveRequestCancelExternalWorkflow proto.InternalMessageInfo

func (m *ResolveRequestCancelExternalWorkflow) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResolveRequestCancelExternalWorkflow) GetFailure() *v1.Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func init() {
	proto.RegisterType((*WFActivation)(nil), "coresdk.workflow_activation.WFActivation")
	proto.RegisterType((*WFActivationJob)(nil), "coresdk.workflow_activation.WFActivationJob")
	proto.RegisterType((*StartWorkflow)(nil), "coresdk.workflow_activation.StartWorkflow")
	proto.RegisterMapType((map[string]*commonpb.Payload)(nil), "coresdk.workflow_activation.StartWorkflow.HeadersEntry")
	proto.RegisterType((*FireTimer)(nil), "coresdk.workflow_activation.FireTimer")
	proto.RegisterType((*ResolveActivity)(nil), "coresdk.workflow_activation.ResolveActivity")
	proto.RegisterType((*ResolveChildWorkflowExecutionStart)(nil), "coresdk.workflow_activation.ResolveChildWorkflowExecutionStart")
	proto.RegisterType((*ResolveChildWorkflowExecutionStartSuccess)(nil), "coresdk.workflow_activation.ResolveChildWorkflowExecutionStartSuccess")
	proto.RegisterType((*ResolveChildWorkflowExecutionStartFailure)(nil), "coresdk.workflow_activation.ResolveChildWorkflowExecutionStartFailure")
	proto.RegisterType((*ResolveChildWorkflowExecutionStartCancelled)(nil), "coresdk.workflow_activation.ResolveChildWorkflowExecutionStartCancelled")
	proto.RegisterType((*ResolveChildWorkflowExecution)(nil), "coresdk.workflow_activation.ResolveChildWorkflowExecution")
	proto.RegisterType((*UpdateRandomSeed)(nil), "coresdk.workflow_activation.UpdateRandomSeed")
	proto.RegisterType((*QueryWorkflow)(nil), "coresdk.workflow_activation.QueryWorkflow")
	proto.RegisterType((*CancelWorkflow)(nil), "coresdk.workflow_activation.CancelWorkflow")
	proto.RegisterType((*SignalWorkflow)(nil), "coresdk.workflow_activation.SignalWorkflow")
	proto.RegisterType((*NotifyHasPatch)(nil), "coresdk.workflow_activation.NotifyHasPatch")
	proto.RegisterType((*ResolveSignalExternalWorkflow)(nil), "coresdk.workflow_activation.ResolveSignalExternalWorkflow")
	proto.RegisterType((*ResolveRequestCancelExternalWorkflow)(nil), "coresdk.workflow_activation.ResolveRequestCancelExternalWorkflow")
}

func init() { proto.RegisterFile("workflow_activation.proto", fileDescriptor_f3d2c0fc80d74bf1) }

var fileDescriptor_f3d2c0fc80d74bf1 = []byte{
	// 1263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xdf, 0xcd, 0xb7, 0x5f, 0x12, 0x27, 0x8c, 0xa8, 0xd8, 0x06, 0x65, 0x1b, 0x96, 0xd2, 0x06,
	0xd2, 0x6e, 0xd4, 0x00, 0xa2, 0x2a, 0x12, 0xa5, 0xb1, 0x1a, 0x1c, 0x0e, 0x55, 0x3b, 0x29, 0x54,
	0x1c, 0xd0, 0x32, 0xd9, 0x1d, 0xc7, 0x4b, 0xf7, 0xc3, 0x99, 0x99, 0x75, 0x6b, 0x89, 0x43, 0x2f,
	0xdc, 0xb9, 0x70, 0xe2, 0x1f, 0xe0, 0x0f, 0x41, 0xc0, 0xb1, 0xc7, 0x5e, 0x90, 0xa8, 0x7b, 0xe1,
	0xd8, 0x03, 0x7f, 0x00, 0x9a, 0xd9, 0x0f, 0xef, 0x3a, 0x8e, 0xeb, 0xb6, 0xdc, 0x3c, 0x6f, 0xde,
	0xfb, 0xcd, 0xef, 0xbd, 0x7d, 0x5f, 0x86, 0xb3, 0x0f, 0x62, 0x76, 0xbf, 0x15, 0xc4, 0x0f, 0x1c,
	0xe2, 0x0a, 0xbf, 0x4b, 0x84, 0x1f, 0x47, 0x76, 0x87, 0xc5, 0x22, 0x46, 0x6f, 0xbb, 0x31, 0xa3,
	0xdc, 0xbb, 0x6f, 0x8f, 0x50, 0x59, 0x5b, 0x72, 0xe3, 0x30, 0xcc, 0x55, 0xd7, 0xce, 0xa8, 0x1b,
	0x5f, 0xf4, 0x1c, 0x46, 0x79, 0x12, 0x88, 0x4c, 0xfc, 0xa6, 0xdb, 0xf6, 0x03, 0xcf, 0xc9, 0xed,
	0x33, 0xe9, 0x7b, 0x82, 0x86, 0x9d, 0x98, 0x91, 0x60, 0x9b, 0x74, 0xfc, 0xed, 0x16, 0xf1, 0x83,
	0x84, 0xd1, 0xed, 0xee, 0x95, 0xed, 0x90, 0x72, 0x4e, 0x8e, 0x68, 0xa6, 0x76, 0xee, 0x28, 0x8e,
	0x8f, 0x02, 0xba, 0xad, 0x4e, 0x87, 0x49, 0x6b, 0x5b, 0xf8, 0x21, 0xe5, 0x82, 0x84, 0x9d, 0x54,
	0xc1, 0xfa, 0x4d, 0x87, 0xa5, 0x7b, 0x7b, 0x37, 0x0a, 0x4e, 0xe8, 0x0c, 0xcc, 0xb1, 0x24, 0x72,
	0x7c, 0xcf, 0xd0, 0x37, 0xf4, 0xcd, 0x1a, 0x9e, 0x65, 0x49, 0xb4, 0xef, 0xa1, 0xab, 0x50, 0x2b,
	0x4c, 0x8d, 0xa9, 0x0d, 0x7d, 0x73, 0x71, 0x67, 0xcd, 0x4e, 0xc1, 0xed, 0x1c, 0xdc, 0xbe, 0x9b,
	0x6b, 0xe0, 0x81, 0x32, 0x7a, 0x07, 0x96, 0x7c, 0xee, 0x30, 0xda, 0x09, 0x48, 0xcf, 0x8f, 0x8e,
	0x8c, 0xe9, 0x0d, 0x7d, 0x73, 0x01, 0x2f, 0xfa, 0x1c, 0xe7, 0x22, 0xf4, 0x39, 0xcc, 0x7c, 0x1f,
	0x1f, 0x72, 0x63, 0x66, 0x63, 0x7a, 0x73, 0x71, 0xe7, 0x92, 0x3d, 0x26, 0x66, 0x76, 0x99, 0xec,
	0x97, 0xf1, 0x21, 0x56, 0x96, 0xd6, 0xef, 0x00, 0x2b, 0x43, 0x37, 0xe8, 0x00, 0xea, 0x5c, 0x10,
	0x26, 0x8a, 0xd0, 0x29, 0x8f, 0x16, 0x77, 0x3e, 0x18, 0x8b, 0x7f, 0x20, 0x4d, 0xee, 0x65, 0x17,
	0x4d, 0x0d, 0x2f, 0xf3, 0xb2, 0x00, 0x7d, 0x01, 0xd0, 0xf2, 0x19, 0x75, 0xa4, 0x7f, 0x2c, 0x0b,
	0xc4, 0x85, 0xb1, 0x80, 0x7b, 0x3e, 0xa3, 0x32, 0x30, 0xac, 0xa9, 0xe1, 0x5a, 0x2b, 0x3f, 0xa0,
	0x6f, 0x01, 0x25, 0x1d, 0x8f, 0x08, 0xea, 0x30, 0x12, 0x79, 0x71, 0xe8, 0x70, 0x4a, 0x3d, 0x63,
	0x46, 0x01, 0x5e, 0x1e, 0x0b, 0xf8, 0x95, 0x32, 0xc3, 0xca, 0xea, 0x80, 0x52, 0xaf, 0xa9, 0xe1,
	0xd5, 0x64, 0x48, 0x26, 0x9d, 0x3f, 0x4e, 0x28, 0xeb, 0x0d, 0x9c, 0x9f, 0x9d, 0xc0, 0xf9, 0x3b,
	0xd2, 0xa4, 0xec, 0xfc, 0x71, 0x59, 0x80, 0xbe, 0x86, 0x15, 0x97, 0x44, 0x2e, 0x0d, 0x06, 0xa8,
	0x73, 0x0a, 0x75, 0x6b, 0x2c, 0x6a, 0x43, 0xd9, 0x94, 0x60, 0xeb, 0x6e, 0x45, 0x22, 0x71, 0xb9,
	0x7f, 0x14, 0x91, 0x12, 0xee, 0xfc, 0x04, 0xb8, 0x07, 0xca, 0xa6, 0x8c, 0xcb, 0x2b, 0x12, 0xf4,
	0x0d, 0xac, 0x32, 0xca, 0xe3, 0xa0, 0x4b, 0x9d, 0xbc, 0xb6, 0x8c, 0x05, 0x05, 0x3c, 0x3e, 0xc7,
	0x70, 0x6a, 0x74, 0x23, 0xb3, 0x69, 0x6a, 0x78, 0x85, 0x55, 0x45, 0xe8, 0x1e, 0xac, 0x46, 0xb1,
	0xf0, 0x5b, 0x3d, 0xa7, 0x4d, 0xb8, 0xd3, 0x21, 0xc2, 0x6d, 0x1b, 0xb5, 0x09, 0x38, 0xdf, 0x52,
	0x46, 0x4d, 0xc2, 0x6f, 0x4b, 0x13, 0xc9, 0x39, 0xaa, 0x48, 0xd0, 0xcf, 0x3a, 0x5c, 0xc8, 0x49,
	0x57, 0x2b, 0xdf, 0xa1, 0x0f, 0xa9, 0x9b, 0x48, 0x14, 0x47, 0xe5, 0xa4, 0x01, 0xea, 0xbd, 0xeb,
	0x93, 0xb8, 0xd2, 0x90, 0x48, 0x79, 0x5c, 0x6e, 0xe6, 0x38, 0x2a, 0xd7, 0x9b, 0x1a, 0xb6, 0xd8,
	0x0b, 0xb5, 0xd0, 0x8f, 0x3a, 0x6c, 0xbc, 0x88, 0x97, 0xb1, 0xa8, 0x18, 0x5d, 0x7b, 0x75, 0x46,
	0x4d, 0x0d, 0xaf, 0x8f, 0x25, 0x53, 0xe1, 0x91, 0x25, 0x0d, 0x7d, 0x28, 0x28, 0xab, 0x64, 0xcf,
	0xd2, 0xe4, 0x3c, 0xd2, 0x24, 0xba, 0x99, 0x41, 0x94, 0x92, 0x29, 0xe7, 0x31, 0x5a, 0x01, 0xfd,
	0xa2, 0xc3, 0x66, 0xce, 0x83, 0xd1, 0xe3, 0x84, 0x72, 0xe1, 0x64, 0xc5, 0x71, 0x92, 0xcf, 0xb2,
	0xe2, 0x73, 0x63, 0x12, 0x3e, 0x38, 0xc5, 0x4a, 0x6b, 0x66, 0x04, 0xad, 0xf3, 0x6c, 0x02, 0x3d,
	0x74, 0x09, 0xde, 0x60, 0x34, 0x8c, 0xbb, 0xd4, 0x69, 0xb1, 0x38, 0x74, 0x5c, 0xe2, 0xb6, 0xa9,
	0xb1, 0x23, 0x3b, 0x6f, 0x9a, 0xcc, 0xf2, 0x6a, 0x8f, 0xc5, 0x61, 0x43, 0x5e, 0xec, 0xd6, 0x60,
	0xbe, 0x4b, 0x98, 0x4f, 0x22, 0x61, 0xfd, 0x35, 0x05, 0xcb, 0x95, 0x16, 0x88, 0xde, 0x85, 0xe5,
	0x82, 0xae, 0xe8, 0x75, 0x68, 0x36, 0x17, 0x96, 0x72, 0xe1, 0xdd, 0x5e, 0x87, 0xa2, 0x73, 0xb0,
	0x58, 0x28, 0xf9, 0x9e, 0xea, 0x8b, 0x35, 0x0c, 0xb9, 0x68, 0xdf, 0x43, 0x1f, 0x43, 0x8d, 0xb0,
	0xa3, 0x24, 0xa4, 0x91, 0xe0, 0xc6, 0xb4, 0xea, 0xf3, 0x6f, 0x15, 0xe1, 0xc8, 0xc6, 0xe0, 0x6d,
	0xd2, 0x0b, 0x62, 0xe2, 0xe1, 0x81, 0x26, 0xba, 0x08, 0x2b, 0x69, 0x7b, 0x8c, 0x28, 0xe7, 0x83,
	0x16, 0x39, 0x83, 0xeb, 0x03, 0xb1, 0xea, 0x77, 0x77, 0x60, 0xbe, 0x4d, 0x89, 0x47, 0x19, 0x37,
	0x66, 0x15, 0xfa, 0x27, 0x93, 0x77, 0x79, 0xbb, 0x99, 0x5a, 0xde, 0x8c, 0x04, 0xeb, 0xe1, 0x1c,
	0x67, 0xed, 0x00, 0x96, 0xca, 0x17, 0x68, 0x15, 0xa6, 0xef, 0xd3, 0x5e, 0xe6, 0xbe, 0xfc, 0x89,
	0x2e, 0xc3, 0x6c, 0x97, 0x04, 0x09, 0xcd, 0xe6, 0xc0, 0xa9, 0x0e, 0xa5, 0x5a, 0xd7, 0xa6, 0xae,
	0xea, 0xd6, 0x3a, 0xd4, 0x8a, 0x81, 0x20, 0x11, 0x39, 0x3d, 0x56, 0x88, 0xcb, 0x58, 0xfe, 0xb4,
	0x3c, 0x58, 0x19, 0x6a, 0x3e, 0x27, 0x95, 0xd0, 0x75, 0x98, 0x4b, 0x37, 0x84, 0xec, 0xdd, 0x8b,
	0xc5, 0xbb, 0xc3, 0x1b, 0x44, 0x0e, 0x82, 0xd5, 0x11, 0x67, 0x66, 0xd6, 0xbf, 0x53, 0x60, 0xbd,
	0xb8, 0x31, 0x8c, 0x78, 0xb9, 0x05, 0x35, 0x9e, 0xb8, 0x2e, 0xa5, 0x1e, 0xf5, 0xb2, 0xc7, 0xf7,
	0x5e, 0xb3, 0xfd, 0x1c, 0x48, 0x3c, 0xce, 0xe5, 0x70, 0x2c, 0xa0, 0xd1, 0x77, 0x30, 0x27, 0x57,
	0x1a, 0xea, 0xa9, 0x6d, 0xe1, 0xf5, 0x1f, 0xd9, 0x4b, 0xf7, 0xa3, 0xa6, 0x86, 0x33, 0x5c, 0xd4,
	0x86, 0x5a, 0x5a, 0xad, 0x41, 0x31, 0x75, 0x9b, 0xaf, 0xf9, 0x48, 0x23, 0xc7, 0x93, 0xbe, 0x14,
	0xe0, 0xbb, 0x0b, 0x30, 0xc7, 0x05, 0x11, 0x09, 0xb7, 0x76, 0xe1, 0xfd, 0x89, 0xe3, 0x71, 0xca,
	0x1e, 0x66, 0xfd, 0xa1, 0x4f, 0x02, 0x92, 0xf9, 0x3b, 0x5c, 0x96, 0xfa, 0x89, 0xb2, 0x3c, 0x51,
	0xdc, 0x53, 0x23, 0x8a, 0xfb, 0x2e, 0xcc, 0xba, 0x24, 0xe1, 0x54, 0x7d, 0x8c, 0xfa, 0xce, 0x67,
	0x83, 0x34, 0xaf, 0x6e, 0xa6, 0x69, 0x14, 0x46, 0xb2, 0xda, 0x53, 0x51, 0x6f, 0x48, 0x14, 0x9c,
	0x82, 0x59, 0x3e, 0x6c, 0xbd, 0x44, 0x4c, 0xd1, 0x35, 0x98, 0xcf, 0xb6, 0xdc, 0x6c, 0x8d, 0xdb,
	0xb0, 0xf3, 0x15, 0xd8, 0x26, 0x1d, 0xdf, 0xce, 0x2e, 0xed, 0xee, 0x15, 0x3b, 0xf3, 0x1e, 0xe7,
	0x06, 0x56, 0x17, 0xd6, 0xc7, 0x3e, 0x35, 0x22, 0xd3, 0x1b, 0x43, 0x35, 0xb6, 0x75, 0x9a, 0xd3,
	0x15, 0xc4, 0xa1, 0x3a, 0xfb, 0x14, 0x56, 0x87, 0x97, 0xb5, 0x51, 0x1d, 0x4d, 0x1f, 0xd5, 0xd1,
	0xac, 0x47, 0x3a, 0x2c, 0x57, 0xf6, 0x31, 0x74, 0x16, 0x16, 0xd2, 0x9d, 0xae, 0xf8, 0x94, 0xf3,
	0xea, 0xbc, 0xef, 0xa1, 0x75, 0x80, 0xf4, 0xaa, 0xf4, 0x11, 0x6b, 0x4a, 0xa2, 0xbe, 0xe0, 0xab,
	0x75, 0x5f, 0xab, 0x01, 0xf5, 0xea, 0xee, 0x86, 0xae, 0xc0, 0xbc, 0x47, 0x05, 0xf1, 0x03, 0x6e,
	0xe8, 0xe3, 0x61, 0x72, 0x3d, 0xeb, 0x07, 0xa8, 0x57, 0x17, 0x35, 0x99, 0x95, 0xd9, 0xe4, 0x8e,
	0x48, 0x98, 0xcf, 0x13, 0x48, 0x45, 0xb7, 0x48, 0x48, 0x65, 0x5f, 0xf5, 0xa3, 0x4e, 0x22, 0x63,
	0x3f, 0xf6, 0x8d, 0x54, 0x0b, 0xad, 0xc1, 0x82, 0xef, 0xd1, 0x48, 0xc8, 0xf5, 0x6e, 0x5a, 0x81,
	0x15, 0x67, 0x6b, 0x0b, 0xea, 0xd5, 0x95, 0x4b, 0x46, 0x51, 0xad, 0x6b, 0xa5, 0x28, 0xaa, 0xf3,
	0xbe, 0x67, 0x85, 0x45, 0x9e, 0x9c, 0x32, 0xf4, 0x4f, 0xe6, 0x49, 0x29, 0x2d, 0xa7, 0x5e, 0x36,
	0x2d, 0x05, 0x9c, 0x9f, 0x64, 0xe8, 0xff, 0xbf, 0xaf, 0xee, 0x7e, 0xf4, 0xf8, 0xa9, 0xa9, 0x3d,
	0x79, 0x6a, 0x6a, 0xcf, 0x9f, 0x9a, 0xfa, 0xa3, 0xbe, 0xa9, 0xff, 0xda, 0x37, 0xf5, 0x3f, 0xfb,
	0xa6, 0xfe, 0xb8, 0x6f, 0xea, 0x7f, 0xf7, 0x4d, 0xfd, 0x9f, 0xbe, 0xa9, 0x3d, 0xef, 0x9b, 0xfa,
	0x4f, 0xcf, 0x4c, 0xed, 0xf1, 0x33, 0x53, 0x7b, 0xf2, 0xcc, 0xd4, 0x0e, 0xe7, 0xd4, 0x9f, 0xbc,
	0x0f, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x9c, 0x63, 0xab, 0xeb, 0x0e, 0x00, 0x00,
}

func (this *WFActivation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WFActivation)
	if !ok {
		that2, ok := that.(WFActivation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	if this.IsReplaying != that1.IsReplaying {
		return false
	}
	if len(this.Jobs) != len(that1.Jobs) {
		return false
	}
	for i := range this.Jobs {
		if !this.Jobs[i].Equal(that1.Jobs[i]) {
			return false
		}
	}
	return true
}
func (this *WFActivationJob) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WFActivationJob)
	if !ok {
		that2, ok := that.(WFActivationJob)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Variant == nil {
		if this.Variant != nil {
			return false
		}
	} else if this.Variant == nil {
		return false
	} else if !this.Variant.Equal(that1.Variant) {
		return false
	}
	return true
}
func (this *WFActivationJob_StartWorkflow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WFActivationJob_StartWorkflow)
	if !ok {
		that2, ok := that.(WFActivationJob_StartWorkflow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartWorkflow.Equal(that1.StartWorkflow) {
		return false
	}
	return true
}
func (this *WFActivationJob_FireTimer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WFActivationJob_FireTimer)
	if !ok {
		that2, ok := that.(WFActivationJob_FireTimer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FireTimer.Equal(that1.FireTimer) {
		return false
	}
	return true
}
func (this *WFActivationJob_UpdateRandomSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WFActivationJob_UpdateRandomSeed)
	if !ok {
		that2, ok := that.(WFActivationJob_UpdateRandomSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateRandomSeed.Equal(that1.UpdateRandomSeed) {
		return false
	}
	return true
}
func (this *WFActivationJob_QueryWorkflow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WFActivationJob_QueryWorkflow)
	if !ok {
		that2, ok := that.(WFActivationJob_QueryWorkflow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.QueryWorkflow.Equal(that1.QueryWorkflow) {
		return false
	}
	return true
}
func (this *WFActivationJob_CancelWorkflow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WFActivationJob_CancelWorkflow)
	if !ok {
		that2, ok := that.(WFActivationJob_CancelWorkflow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CancelWorkflow.Equal(that1.CancelWorkflow) {
		return false
	}
	return true
}
func (this *WFActivationJob_SignalWorkflow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WFActivationJob_SignalWorkflow)
	if !ok {
		that2, ok := that.(WFActivationJob_SignalWorkflow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SignalWorkflow.Equal(that1.SignalWorkflow) {
		return false
	}
	return true
}
func (this *WFActivationJob_ResolveActivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WFActivationJob_ResolveActivity)
	if !ok {
		that2, ok := that.(WFActivationJob_ResolveActivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResolveActivity.Equal(that1.ResolveActivity) {
		return false
	}
	return true
}
func (this *WFActivationJob_NotifyHasPatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WFActivationJob_NotifyHasPatch)
	if !ok {
		that2, ok := that.(WFActivationJob_NotifyHasPatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotifyHasPatch.Equal(that1.NotifyHasPatch) {
		return false
	}
	return true
}
func (this *WFActivationJob_ResolveChildWorkflowExecutionStart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WFActivationJob_ResolveChildWorkflowExecutionStart)
	if !ok {
		that2, ok := that.(WFActivationJob_ResolveChildWorkflowExecutionStart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResolveChildWorkflowExecutionStart.Equal(that1.ResolveChildWorkflowExecutionStart) {
		return false
	}
	return true
}
func (this *WFActivationJob_ResolveChildWorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WFActivationJob_ResolveChildWorkflowExecution)
	if !ok {
		that2, ok := that.(WFActivationJob_ResolveChildWorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResolveChildWorkflowExecution.Equal(that1.ResolveChildWorkflowExecution) {
		return false
	}
	return true
}
func (this *WFActivationJob_ResolveSignalExternalWorkflow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WFActivationJob_ResolveSignalExternalWorkflow)
	if !ok {
		that2, ok := that.(WFActivationJob_ResolveSignalExternalWorkflow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResolveSignalExternalWorkflow.Equal(that1.ResolveSignalExternalWorkflow) {
		return false
	}
	return true
}
func (this *WFActivationJob_ResolveRequestCancelExternalWorkflow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WFActivationJob_ResolveRequestCancelExternalWorkflow)
	if !ok {
		that2, ok := that.(WFActivationJob_ResolveRequestCancelExternalWorkflow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResolveRequestCancelExternalWorkflow.Equal(that1.ResolveRequestCancelExternalWorkflow) {
		return false
	}
	return true
}
func (this *WFActivationJob_RemoveFromCache) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WFActivationJob_RemoveFromCache)
	if !ok {
		that2, ok := that.(WFActivationJob_RemoveFromCache)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RemoveFromCache != that1.RemoveFromCache {
		return false
	}
	return true
}
func (this *StartWorkflow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartWorkflow)
	if !ok {
		that2, ok := that.(StartWorkflow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WorkflowType != that1.WorkflowType {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if len(this.Arguments) != len(that1.Arguments) {
		return false
	}
	for i := range this.Arguments {
		if !this.Arguments[i].Equal(that1.Arguments[i]) {
			return false
		}
	}
	if this.RandomnessSeed != that1.RandomnessSeed {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	return true
}
func (this *FireTimer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FireTimer)
	if !ok {
		that2, ok := that.(FireTimer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	return true
}
func (this *ResolveActivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResolveActivity)
	if !ok {
		that2, ok := that.(ResolveActivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *ResolveChildWorkflowExecutionStart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResolveChildWorkflowExecutionStart)
	if !ok {
		that2, ok := that.(ResolveChildWorkflowExecutionStart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if that1.Status == nil {
		if this.Status != nil {
			return false
		}
	} else if this.Status == nil {
		return false
	} else if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *ResolveChildWorkflowExecutionStart_Succeeded) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResolveChildWorkflowExecutionStart_Succeeded)
	if !ok {
		that2, ok := that.(ResolveChildWorkflowExecutionStart_Succeeded)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Succeeded.Equal(that1.Succeeded) {
		return false
	}
	return true
}
func (this *ResolveChildWorkflowExecutionStart_Failed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResolveChildWorkflowExecutionStart_Failed)
	if !ok {
		that2, ok := that.(ResolveChildWorkflowExecutionStart_Failed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failed.Equal(that1.Failed) {
		return false
	}
	return true
}
func (this *ResolveChildWorkflowExecutionStart_Cancelled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResolveChildWorkflowExecutionStart_Cancelled)
	if !ok {
		that2, ok := that.(ResolveChildWorkflowExecutionStart_Cancelled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cancelled.Equal(that1.Cancelled) {
		return false
	}
	return true
}
func (this *ResolveChildWorkflowExecutionStartSuccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResolveChildWorkflowExecutionStartSuccess)
	if !ok {
		that2, ok := that.(ResolveChildWorkflowExecutionStartSuccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	return true
}
func (this *ResolveChildWorkflowExecutionStartFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResolveChildWorkflowExecutionStartFailure)
	if !ok {
		that2, ok := that.(ResolveChildWorkflowExecutionStartFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.WorkflowType != that1.WorkflowType {
		return false
	}
	if this.Cause != that1.Cause {
		return false
	}
	return true
}
func (this *ResolveChildWorkflowExecutionStartCancelled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResolveChildWorkflowExecutionStartCancelled)
	if !ok {
		that2, ok := that.(ResolveChildWorkflowExecutionStartCancelled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	return true
}
func (this *ResolveChildWorkflowExecution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResolveChildWorkflowExecution)
	if !ok {
		that2, ok := that.(ResolveChildWorkflowExecution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *UpdateRandomSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateRandomSeed)
	if !ok {
		that2, ok := that.(UpdateRandomSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RandomnessSeed != that1.RandomnessSeed {
		return false
	}
	return true
}
func (this *QueryWorkflow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryWorkflow)
	if !ok {
		that2, ok := that.(QueryWorkflow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QueryId != that1.QueryId {
		return false
	}
	if this.QueryType != that1.QueryType {
		return false
	}
	if len(this.Arguments) != len(that1.Arguments) {
		return false
	}
	for i := range this.Arguments {
		if !this.Arguments[i].Equal(that1.Arguments[i]) {
			return false
		}
	}
	return true
}
func (this *CancelWorkflow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancelWorkflow)
	if !ok {
		that2, ok := that.(CancelWorkflow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Details) != len(that1.Details) {
		return false
	}
	for i := range this.Details {
		if !this.Details[i].Equal(that1.Details[i]) {
			return false
		}
	}
	return true
}
func (this *SignalWorkflow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignalWorkflow)
	if !ok {
		that2, ok := that.(SignalWorkflow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SignalName != that1.SignalName {
		return false
	}
	if len(this.Input) != len(that1.Input) {
		return false
	}
	for i := range this.Input {
		if !this.Input[i].Equal(that1.Input[i]) {
			return false
		}
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (this *NotifyHasPatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifyHasPatch)
	if !ok {
		that2, ok := that.(NotifyHasPatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PatchId != that1.PatchId {
		return false
	}
	return true
}
func (this *ResolveSignalExternalWorkflow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResolveSignalExternalWorkflow)
	if !ok {
		that2, ok := that.(ResolveSignalExternalWorkflow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	return true
}
func (this *ResolveRequestCancelExternalWorkflow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResolveRequestCancelExternalWorkflow)
	if !ok {
		that2, ok := that.(ResolveRequestCancelExternalWorkflow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	return true
}
func (this *WFActivation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&coresdk_workflow_activation.WFActivation{")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	if this.Timestamp != nil {
		s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	}
	s = append(s, "IsReplaying: "+fmt.Sprintf("%#v", this.IsReplaying)+",\n")
	if this.Jobs != nil {
		s = append(s, "Jobs: "+fmt.Sprintf("%#v", this.Jobs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WFActivationJob) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&coresdk_workflow_activation.WFActivationJob{")
	if this.Variant != nil {
		s = append(s, "Variant: "+fmt.Sprintf("%#v", this.Variant)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WFActivationJob_StartWorkflow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_activation.WFActivationJob_StartWorkflow{` +
		`StartWorkflow:` + fmt.Sprintf("%#v", this.StartWorkflow) + `}`}, ", ")
	return s
}
func (this *WFActivationJob_FireTimer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_activation.WFActivationJob_FireTimer{` +
		`FireTimer:` + fmt.Sprintf("%#v", this.FireTimer) + `}`}, ", ")
	return s
}
func (this *WFActivationJob_UpdateRandomSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_activation.WFActivationJob_UpdateRandomSeed{` +
		`UpdateRandomSeed:` + fmt.Sprintf("%#v", this.UpdateRandomSeed) + `}`}, ", ")
	return s
}
func (this *WFActivationJob_QueryWorkflow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_activation.WFActivationJob_QueryWorkflow{` +
		`QueryWorkflow:` + fmt.Sprintf("%#v", this.QueryWorkflow) + `}`}, ", ")
	return s
}
func (this *WFActivationJob_CancelWorkflow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_activation.WFActivationJob_CancelWorkflow{` +
		`CancelWorkflow:` + fmt.Sprintf("%#v", this.CancelWorkflow) + `}`}, ", ")
	return s
}
func (this *WFActivationJob_SignalWorkflow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_activation.WFActivationJob_SignalWorkflow{` +
		`SignalWorkflow:` + fmt.Sprintf("%#v", this.SignalWorkflow) + `}`}, ", ")
	return s
}
func (this *WFActivationJob_ResolveActivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_activation.WFActivationJob_ResolveActivity{` +
		`ResolveActivity:` + fmt.Sprintf("%#v", this.ResolveActivity) + `}`}, ", ")
	return s
}
func (this *WFActivationJob_NotifyHasPatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_activation.WFActivationJob_NotifyHasPatch{` +
		`NotifyHasPatch:` + fmt.Sprintf("%#v", this.NotifyHasPatch) + `}`}, ", ")
	return s
}
func (this *WFActivationJob_ResolveChildWorkflowExecutionStart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_activation.WFActivationJob_ResolveChildWorkflowExecutionStart{` +
		`ResolveChildWorkflowExecutionStart:` + fmt.Sprintf("%#v", this.ResolveChildWorkflowExecutionStart) + `}`}, ", ")
	return s
}
func (this *WFActivationJob_ResolveChildWorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_activation.WFActivationJob_ResolveChildWorkflowExecution{` +
		`ResolveChildWorkflowExecution:` + fmt.Sprintf("%#v", this.ResolveChildWorkflowExecution) + `}`}, ", ")
	return s
}
func (this *WFActivationJob_ResolveSignalExternalWorkflow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_activation.WFActivationJob_ResolveSignalExternalWorkflow{` +
		`ResolveSignalExternalWorkflow:` + fmt.Sprintf("%#v", this.ResolveSignalExternalWorkflow) + `}`}, ", ")
	return s
}
func (this *WFActivationJob_ResolveRequestCancelExternalWorkflow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_activation.WFActivationJob_ResolveRequestCancelExternalWorkflow{` +
		`ResolveRequestCancelExternalWorkflow:` + fmt.Sprintf("%#v", this.ResolveRequestCancelExternalWorkflow) + `}`}, ", ")
	return s
}
func (this *WFActivationJob_RemoveFromCache) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_activation.WFActivationJob_RemoveFromCache{` +
		`RemoveFromCache:` + fmt.Sprintf("%#v", this.RemoveFromCache) + `}`}, ", ")
	return s
}
func (this *StartWorkflow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&coresdk_workflow_activation.StartWorkflow{")
	s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	if this.Arguments != nil {
		s = append(s, "Arguments: "+fmt.Sprintf("%#v", this.Arguments)+",\n")
	}
	s = append(s, "RandomnessSeed: "+fmt.Sprintf("%#v", this.RandomnessSeed)+",\n")
	keysForHeaders := make([]string, 0, len(this.Headers))
	for k, _ := range this.Headers {
		keysForHeaders = append(keysForHeaders, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeaders)
	mapStringForHeaders := "map[string]*commonpb.Payload{"
	for _, k := range keysForHeaders {
		mapStringForHeaders += fmt.Sprintf("%#v: %#v,", k, this.Headers[k])
	}
	mapStringForHeaders += "}"
	if this.Headers != nil {
		s = append(s, "Headers: "+mapStringForHeaders+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FireTimer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_workflow_activation.FireTimer{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResolveActivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&coresdk_workflow_activation.ResolveActivity{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResolveChildWorkflowExecutionStart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&coresdk_workflow_activation.ResolveChildWorkflowExecutionStart{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResolveChildWorkflowExecutionStart_Succeeded) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_activation.ResolveChildWorkflowExecutionStart_Succeeded{` +
		`Succeeded:` + fmt.Sprintf("%#v", this.Succeeded) + `}`}, ", ")
	return s
}
func (this *ResolveChildWorkflowExecutionStart_Failed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_activation.ResolveChildWorkflowExecutionStart_Failed{` +
		`Failed:` + fmt.Sprintf("%#v", this.Failed) + `}`}, ", ")
	return s
}
func (this *ResolveChildWorkflowExecutionStart_Cancelled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_workflow_activation.ResolveChildWorkflowExecutionStart_Cancelled{` +
		`Cancelled:` + fmt.Sprintf("%#v", this.Cancelled) + `}`}, ", ")
	return s
}
func (this *ResolveChildWorkflowExecutionStartSuccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_workflow_activation.ResolveChildWorkflowExecutionStartSuccess{")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResolveChildWorkflowExecutionStartFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&coresdk_workflow_activation.ResolveChildWorkflowExecutionStartFailure{")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	s = append(s, "Cause: "+fmt.Sprintf("%#v", this.Cause)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResolveChildWorkflowExecutionStartCancelled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_workflow_activation.ResolveChildWorkflowExecutionStartCancelled{")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResolveChildWorkflowExecution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&coresdk_workflow_activation.ResolveChildWorkflowExecution{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateRandomSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_workflow_activation.UpdateRandomSeed{")
	s = append(s, "RandomnessSeed: "+fmt.Sprintf("%#v", this.RandomnessSeed)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryWorkflow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&coresdk_workflow_activation.QueryWorkflow{")
	s = append(s, "QueryId: "+fmt.Sprintf("%#v", this.QueryId)+",\n")
	s = append(s, "QueryType: "+fmt.Sprintf("%#v", this.QueryType)+",\n")
	if this.Arguments != nil {
		s = append(s, "Arguments: "+fmt.Sprintf("%#v", this.Arguments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancelWorkflow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_workflow_activation.CancelWorkflow{")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignalWorkflow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&coresdk_workflow_activation.SignalWorkflow{")
	s = append(s, "SignalName: "+fmt.Sprintf("%#v", this.SignalName)+",\n")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyHasPatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_workflow_activation.NotifyHasPatch{")
	s = append(s, "PatchId: "+fmt.Sprintf("%#v", this.PatchId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResolveSignalExternalWorkflow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&coresdk_workflow_activation.ResolveSignalExternalWorkflow{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResolveRequestCancelExternalWorkflow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&coresdk_workflow_activation.ResolveRequestCancelExternalWorkflow{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringWorkflowActivation(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *WFActivation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WFActivation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WFActivation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Jobs) > 0 {
		for iNdEx := len(m.Jobs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Jobs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.IsReplaying {
		i--
		if m.IsReplaying {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintWorkflowActivation(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WFActivationJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WFActivationJob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WFActivationJob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Variant != nil {
		{
			size := m.Variant.Size()
			i -= size
			if _, err := m.Variant.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *WFActivationJob_StartWorkflow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WFActivationJob_StartWorkflow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StartWorkflow != nil {
		{
			size, err := m.StartWorkflow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *WFActivationJob_FireTimer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WFActivationJob_FireTimer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FireTimer != nil {
		{
			size, err := m.FireTimer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WFActivationJob_UpdateRandomSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WFActivationJob_UpdateRandomSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateRandomSeed != nil {
		{
			size, err := m.UpdateRandomSeed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *WFActivationJob_QueryWorkflow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WFActivationJob_QueryWorkflow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.QueryWorkflow != nil {
		{
			size, err := m.QueryWorkflow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *WFActivationJob_CancelWorkflow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WFActivationJob_CancelWorkflow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelWorkflow != nil {
		{
			size, err := m.CancelWorkflow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *WFActivationJob_SignalWorkflow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WFActivationJob_SignalWorkflow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SignalWorkflow != nil {
		{
			size, err := m.SignalWorkflow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *WFActivationJob_ResolveActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WFActivationJob_ResolveActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResolveActivity != nil {
		{
			size, err := m.ResolveActivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *WFActivationJob_NotifyHasPatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WFActivationJob_NotifyHasPatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotifyHasPatch != nil {
		{
			size, err := m.NotifyHasPatch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *WFActivationJob_ResolveChildWorkflowExecutionStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WFActivationJob_ResolveChildWorkflowExecutionStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResolveChildWorkflowExecutionStart != nil {
		{
			size, err := m.ResolveChildWorkflowExecutionStart.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *WFActivationJob_ResolveChildWorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WFActivationJob_ResolveChildWorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResolveChildWorkflowExecution != nil {
		{
			size, err := m.ResolveChildWorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *WFActivationJob_ResolveSignalExternalWorkflow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WFActivationJob_ResolveSignalExternalWorkflow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResolveSignalExternalWorkflow != nil {
		{
			size, err := m.ResolveSignalExternalWorkflow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *WFActivationJob_ResolveRequestCancelExternalWorkflow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WFActivationJob_ResolveRequestCancelExternalWorkflow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResolveRequestCancelExternalWorkflow != nil {
		{
			size, err := m.ResolveRequestCancelExternalWorkflow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *WFActivationJob_RemoveFromCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WFActivationJob_RemoveFromCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.RemoveFromCache {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0x90
	return len(dAtA) - i, nil
}
func (m *StartWorkflow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartWorkflow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartWorkflow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for k := range m.Headers {
			v := m.Headers[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.RandomnessSeed != 0 {
		i = encodeVarintWorkflowActivation(dAtA, i, uint64(m.RandomnessSeed))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Arguments) > 0 {
		for iNdEx := len(m.Arguments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Arguments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintWorkflowActivation(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WorkflowType) > 0 {
		i -= len(m.WorkflowType)
		copy(dAtA[i:], m.WorkflowType)
		i = encodeVarintWorkflowActivation(dAtA, i, uint64(len(m.WorkflowType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FireTimer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FireTimer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FireTimer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintWorkflowActivation(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResolveActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolveActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Seq != 0 {
		i = encodeVarintWorkflowActivation(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResolveChildWorkflowExecutionStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolveChildWorkflowExecutionStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveChildWorkflowExecutionStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size := m.Status.Size()
			i -= size
			if _, err := m.Status.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Seq != 0 {
		i = encodeVarintWorkflowActivation(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResolveChildWorkflowExecutionStart_Succeeded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveChildWorkflowExecutionStart_Succeeded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Succeeded != nil {
		{
			size, err := m.Succeeded.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ResolveChildWorkflowExecutionStart_Failed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveChildWorkflowExecutionStart_Failed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Failed != nil {
		{
			size, err := m.Failed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ResolveChildWorkflowExecutionStart_Cancelled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveChildWorkflowExecutionStart_Cancelled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Cancelled != nil {
		{
			size, err := m.Cancelled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ResolveChildWorkflowExecutionStartSuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolveChildWorkflowExecutionStartSuccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveChildWorkflowExecutionStartSuccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintWorkflowActivation(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResolveChildWorkflowExecutionStartFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolveChildWorkflowExecutionStartFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveChildWorkflowExecutionStartFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cause != 0 {
		i = encodeVarintWorkflowActivation(dAtA, i, uint64(m.Cause))
		i--
		dAtA[i] = 0x18
	}
	if len(m.WorkflowType) > 0 {
		i -= len(m.WorkflowType)
		copy(dAtA[i:], m.WorkflowType)
		i = encodeVarintWorkflowActivation(dAtA, i, uint64(len(m.WorkflowType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintWorkflowActivation(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResolveChildWorkflowExecutionStartCancelled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolveChildWorkflowExecutionStartCancelled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveChildWorkflowExecutionStartCancelled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResolveChildWorkflowExecution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolveChildWorkflowExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveChildWorkflowExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Seq != 0 {
		i = encodeVarintWorkflowActivation(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRandomSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRandomSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRandomSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RandomnessSeed != 0 {
		i = encodeVarintWorkflowActivation(dAtA, i, uint64(m.RandomnessSeed))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkflow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkflow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkflow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Arguments) > 0 {
		for iNdEx := len(m.Arguments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Arguments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.QueryType) > 0 {
		i -= len(m.QueryType)
		copy(dAtA[i:], m.QueryType)
		i = encodeVarintWorkflowActivation(dAtA, i, uint64(len(m.QueryType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.QueryId) > 0 {
		i -= len(m.QueryId)
		copy(dAtA[i:], m.QueryId)
		i = encodeVarintWorkflowActivation(dAtA, i, uint64(len(m.QueryId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelWorkflow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelWorkflow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelWorkflow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		for iNdEx := len(m.Details) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Details[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SignalWorkflow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalWorkflow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalWorkflow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintWorkflowActivation(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Input) > 0 {
		for iNdEx := len(m.Input) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Input[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SignalName) > 0 {
		i -= len(m.SignalName)
		copy(dAtA[i:], m.SignalName)
		i = encodeVarintWorkflowActivation(dAtA, i, uint64(len(m.SignalName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyHasPatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyHasPatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyHasPatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PatchId) > 0 {
		i -= len(m.PatchId)
		copy(dAtA[i:], m.PatchId)
		i = encodeVarintWorkflowActivation(dAtA, i, uint64(len(m.PatchId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResolveSignalExternalWorkflow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolveSignalExternalWorkflow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveSignalExternalWorkflow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Seq != 0 {
		i = encodeVarintWorkflowActivation(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResolveRequestCancelExternalWorkflow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolveRequestCancelExternalWorkflow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveRequestCancelExternalWorkflow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowActivation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Seq != 0 {
		i = encodeVarintWorkflowActivation(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWorkflowActivation(dAtA []byte, offset int, v uint64) int {
	offset -= sovWorkflowActivation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WFActivation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	if m.IsReplaying {
		n += 2
	}
	if len(m.Jobs) > 0 {
		for _, e := range m.Jobs {
			l = e.Size()
			n += 1 + l + sovWorkflowActivation(uint64(l))
		}
	}
	return n
}

func (m *WFActivationJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Variant != nil {
		n += m.Variant.Size()
	}
	return n
}

func (m *WFActivationJob_StartWorkflow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartWorkflow != nil {
		l = m.StartWorkflow.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}
func (m *WFActivationJob_FireTimer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FireTimer != nil {
		l = m.FireTimer.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}
func (m *WFActivationJob_UpdateRandomSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateRandomSeed != nil {
		l = m.UpdateRandomSeed.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}
func (m *WFActivationJob_QueryWorkflow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryWorkflow != nil {
		l = m.QueryWorkflow.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}
func (m *WFActivationJob_CancelWorkflow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelWorkflow != nil {
		l = m.CancelWorkflow.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}
func (m *WFActivationJob_SignalWorkflow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignalWorkflow != nil {
		l = m.SignalWorkflow.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}
func (m *WFActivationJob_ResolveActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResolveActivity != nil {
		l = m.ResolveActivity.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}
func (m *WFActivationJob_NotifyHasPatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotifyHasPatch != nil {
		l = m.NotifyHasPatch.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}
func (m *WFActivationJob_ResolveChildWorkflowExecutionStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResolveChildWorkflowExecutionStart != nil {
		l = m.ResolveChildWorkflowExecutionStart.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}
func (m *WFActivationJob_ResolveChildWorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResolveChildWorkflowExecution != nil {
		l = m.ResolveChildWorkflowExecution.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}
func (m *WFActivationJob_ResolveSignalExternalWorkflow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResolveSignalExternalWorkflow != nil {
		l = m.ResolveSignalExternalWorkflow.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}
func (m *WFActivationJob_ResolveRequestCancelExternalWorkflow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResolveRequestCancelExternalWorkflow != nil {
		l = m.ResolveRequestCancelExternalWorkflow.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}
func (m *WFActivationJob_RemoveFromCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StartWorkflow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkflowType)
	if l > 0 {
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	if len(m.Arguments) > 0 {
		for _, e := range m.Arguments {
			l = e.Size()
			n += 1 + l + sovWorkflowActivation(uint64(l))
		}
	}
	if m.RandomnessSeed != 0 {
		n += 1 + sovWorkflowActivation(uint64(m.RandomnessSeed))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovWorkflowActivation(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovWorkflowActivation(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovWorkflowActivation(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FireTimer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovWorkflowActivation(uint64(m.Seq))
	}
	return n
}

func (m *ResolveActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovWorkflowActivation(uint64(m.Seq))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}

func (m *ResolveChildWorkflowExecutionStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovWorkflowActivation(uint64(m.Seq))
	}
	if m.Status != nil {
		n += m.Status.Size()
	}
	return n
}

func (m *ResolveChildWorkflowExecutionStart_Succeeded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Succeeded != nil {
		l = m.Succeeded.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}
func (m *ResolveChildWorkflowExecutionStart_Failed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failed != nil {
		l = m.Failed.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}
func (m *ResolveChildWorkflowExecutionStart_Cancelled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cancelled != nil {
		l = m.Cancelled.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}
func (m *ResolveChildWorkflowExecutionStartSuccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}

func (m *ResolveChildWorkflowExecutionStartFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	l = len(m.WorkflowType)
	if l > 0 {
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	if m.Cause != 0 {
		n += 1 + sovWorkflowActivation(uint64(m.Cause))
	}
	return n
}

func (m *ResolveChildWorkflowExecutionStartCancelled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}

func (m *ResolveChildWorkflowExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovWorkflowActivation(uint64(m.Seq))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}

func (m *UpdateRandomSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RandomnessSeed != 0 {
		n += 1 + sovWorkflowActivation(uint64(m.RandomnessSeed))
	}
	return n
}

func (m *QueryWorkflow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	l = len(m.QueryType)
	if l > 0 {
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	if len(m.Arguments) > 0 {
		for _, e := range m.Arguments {
			l = e.Size()
			n += 1 + l + sovWorkflowActivation(uint64(l))
		}
	}
	return n
}

func (m *CancelWorkflow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Details) > 0 {
		for _, e := range m.Details {
			l = e.Size()
			n += 1 + l + sovWorkflowActivation(uint64(l))
		}
	}
	return n
}

func (m *SignalWorkflow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignalName)
	if l > 0 {
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	if len(m.Input) > 0 {
		for _, e := range m.Input {
			l = e.Size()
			n += 1 + l + sovWorkflowActivation(uint64(l))
		}
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}

func (m *NotifyHasPatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PatchId)
	if l > 0 {
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}

func (m *ResolveSignalExternalWorkflow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovWorkflowActivation(uint64(m.Seq))
	}
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}

func (m *ResolveRequestCancelExternalWorkflow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovWorkflowActivation(uint64(m.Seq))
	}
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovWorkflowActivation(uint64(l))
	}
	return n
}

func sovWorkflowActivation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWorkflowActivation(x uint64) (n int) {
	return sovWorkflowActivation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *WFActivation) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForJobs := "[]*WFActivationJob{"
	for _, f := range this.Jobs {
		repeatedStringForJobs += strings.Replace(f.String(), "WFActivationJob", "WFActivationJob", 1) + ","
	}
	repeatedStringForJobs += "}"
	s := strings.Join([]string{`&WFActivation{`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`Timestamp:` + strings.Replace(fmt.Sprintf("%v", this.Timestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`IsReplaying:` + fmt.Sprintf("%v", this.IsReplaying) + `,`,
		`Jobs:` + repeatedStringForJobs + `,`,
		`}`,
	}, "")
	return s
}
func (this *WFActivationJob) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WFActivationJob{`,
		`Variant:` + fmt.Sprintf("%v", this.Variant) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WFActivationJob_StartWorkflow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WFActivationJob_StartWorkflow{`,
		`StartWorkflow:` + strings.Replace(fmt.Sprintf("%v", this.StartWorkflow), "StartWorkflow", "StartWorkflow", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WFActivationJob_FireTimer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WFActivationJob_FireTimer{`,
		`FireTimer:` + strings.Replace(fmt.Sprintf("%v", this.FireTimer), "FireTimer", "FireTimer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WFActivationJob_UpdateRandomSeed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WFActivationJob_UpdateRandomSeed{`,
		`UpdateRandomSeed:` + strings.Replace(fmt.Sprintf("%v", this.UpdateRandomSeed), "UpdateRandomSeed", "UpdateRandomSeed", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WFActivationJob_QueryWorkflow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WFActivationJob_QueryWorkflow{`,
		`QueryWorkflow:` + strings.Replace(fmt.Sprintf("%v", this.QueryWorkflow), "QueryWorkflow", "QueryWorkflow", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WFActivationJob_CancelWorkflow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WFActivationJob_CancelWorkflow{`,
		`CancelWorkflow:` + strings.Replace(fmt.Sprintf("%v", this.CancelWorkflow), "CancelWorkflow", "CancelWorkflow", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WFActivationJob_SignalWorkflow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WFActivationJob_SignalWorkflow{`,
		`SignalWorkflow:` + strings.Replace(fmt.Sprintf("%v", this.SignalWorkflow), "SignalWorkflow", "SignalWorkflow", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WFActivationJob_ResolveActivity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WFActivationJob_ResolveActivity{`,
		`ResolveActivity:` + strings.Replace(fmt.Sprintf("%v", this.ResolveActivity), "ResolveActivity", "ResolveActivity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WFActivationJob_NotifyHasPatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WFActivationJob_NotifyHasPatch{`,
		`NotifyHasPatch:` + strings.Replace(fmt.Sprintf("%v", this.NotifyHasPatch), "NotifyHasPatch", "NotifyHasPatch", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WFActivationJob_ResolveChildWorkflowExecutionStart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WFActivationJob_ResolveChildWorkflowExecutionStart{`,
		`ResolveChildWorkflowExecutionStart:` + strings.Replace(fmt.Sprintf("%v", this.ResolveChildWorkflowExecutionStart), "ResolveChildWorkflowExecutionStart", "ResolveChildWorkflowExecutionStart", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WFActivationJob_ResolveChildWorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WFActivationJob_ResolveChildWorkflowExecution{`,
		`ResolveChildWorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.ResolveChildWorkflowExecution), "ResolveChildWorkflowExecution", "ResolveChildWorkflowExecution", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WFActivationJob_ResolveSignalExternalWorkflow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WFActivationJob_ResolveSignalExternalWorkflow{`,
		`ResolveSignalExternalWorkflow:` + strings.Replace(fmt.Sprintf("%v", this.ResolveSignalExternalWorkflow), "ResolveSignalExternalWorkflow", "ResolveSignalExternalWorkflow", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WFActivationJob_ResolveRequestCancelExternalWorkflow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WFActivationJob_ResolveRequestCancelExternalWorkflow{`,
		`ResolveRequestCancelExternalWorkflow:` + strings.Replace(fmt.Sprintf("%v", this.ResolveRequestCancelExternalWorkflow), "ResolveRequestCancelExternalWorkflow", "ResolveRequestCancelExternalWorkflow", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WFActivationJob_RemoveFromCache) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WFActivationJob_RemoveFromCache{`,
		`RemoveFromCache:` + fmt.Sprintf("%v", this.RemoveFromCache) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartWorkflow) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForArguments := "[]*Payload{"
	for _, f := range this.Arguments {
		repeatedStringForArguments += strings.Replace(fmt.Sprintf("%v", f), "Payload", "commonpb.Payload", 1) + ","
	}
	repeatedStringForArguments += "}"
	keysForHeaders := make([]string, 0, len(this.Headers))
	for k, _ := range this.Headers {
		keysForHeaders = append(keysForHeaders, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeaders)
	mapStringForHeaders := "map[string]*commonpb.Payload{"
	for _, k := range keysForHeaders {
		mapStringForHeaders += fmt.Sprintf("%v: %v,", k, this.Headers[k])
	}
	mapStringForHeaders += "}"
	s := strings.Join([]string{`&StartWorkflow{`,
		`WorkflowType:` + fmt.Sprintf("%v", this.WorkflowType) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`Arguments:` + repeatedStringForArguments + `,`,
		`RandomnessSeed:` + fmt.Sprintf("%v", this.RandomnessSeed) + `,`,
		`Headers:` + mapStringForHeaders + `,`,
		`}`,
	}, "")
	return s
}
func (this *FireTimer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FireTimer{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResolveActivity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResolveActivity{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "ActivityResult", "activityresultpb.ActivityResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResolveChildWorkflowExecutionStart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResolveChildWorkflowExecutionStart{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResolveChildWorkflowExecutionStart_Succeeded) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResolveChildWorkflowExecutionStart_Succeeded{`,
		`Succeeded:` + strings.Replace(fmt.Sprintf("%v", this.Succeeded), "ResolveChildWorkflowExecutionStartSuccess", "ResolveChildWorkflowExecutionStartSuccess", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResolveChildWorkflowExecutionStart_Failed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResolveChildWorkflowExecutionStart_Failed{`,
		`Failed:` + strings.Replace(fmt.Sprintf("%v", this.Failed), "ResolveChildWorkflowExecutionStartFailure", "ResolveChildWorkflowExecutionStartFailure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResolveChildWorkflowExecutionStart_Cancelled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResolveChildWorkflowExecutionStart_Cancelled{`,
		`Cancelled:` + strings.Replace(fmt.Sprintf("%v", this.Cancelled), "ResolveChildWorkflowExecutionStartCancelled", "ResolveChildWorkflowExecutionStartCancelled", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResolveChildWorkflowExecutionStartSuccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResolveChildWorkflowExecutionStartSuccess{`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResolveChildWorkflowExecutionStartFailure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResolveChildWorkflowExecutionStartFailure{`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`WorkflowType:` + fmt.Sprintf("%v", this.WorkflowType) + `,`,
		`Cause:` + fmt.Sprintf("%v", this.Cause) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResolveChildWorkflowExecutionStartCancelled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResolveChildWorkflowExecutionStartCancelled{`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "v1.Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResolveChildWorkflowExecution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResolveChildWorkflowExecution{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "ChildWorkflowResult", "childworkflowpb.ChildWorkflowResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateRandomSeed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateRandomSeed{`,
		`RandomnessSeed:` + fmt.Sprintf("%v", this.RandomnessSeed) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryWorkflow) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForArguments := "[]*Payload{"
	for _, f := range this.Arguments {
		repeatedStringForArguments += strings.Replace(fmt.Sprintf("%v", f), "Payload", "commonpb.Payload", 1) + ","
	}
	repeatedStringForArguments += "}"
	s := strings.Join([]string{`&QueryWorkflow{`,
		`QueryId:` + fmt.Sprintf("%v", this.QueryId) + `,`,
		`QueryType:` + fmt.Sprintf("%v", this.QueryType) + `,`,
		`Arguments:` + repeatedStringForArguments + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancelWorkflow) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDetails := "[]*Payload{"
	for _, f := range this.Details {
		repeatedStringForDetails += strings.Replace(fmt.Sprintf("%v", f), "Payload", "commonpb.Payload", 1) + ","
	}
	repeatedStringForDetails += "}"
	s := strings.Join([]string{`&CancelWorkflow{`,
		`Details:` + repeatedStringForDetails + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignalWorkflow) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInput := "[]*Payload{"
	for _, f := range this.Input {
		repeatedStringForInput += strings.Replace(fmt.Sprintf("%v", f), "Payload", "commonpb.Payload", 1) + ","
	}
	repeatedStringForInput += "}"
	s := strings.Join([]string{`&SignalWorkflow{`,
		`SignalName:` + fmt.Sprintf("%v", this.SignalName) + `,`,
		`Input:` + repeatedStringForInput + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyHasPatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyHasPatch{`,
		`PatchId:` + fmt.Sprintf("%v", this.PatchId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResolveSignalExternalWorkflow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResolveSignalExternalWorkflow{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "v1.Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResolveRequestCancelExternalWorkflow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResolveRequestCancelExternalWorkflow{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "v1.Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringWorkflowActivation(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *WFActivation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowActivation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WFActivation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WFActivation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReplaying", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReplaying = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jobs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jobs = append(m.Jobs, &WFActivationJob{})
			if err := m.Jobs[len(m.Jobs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowActivation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WFActivationJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowActivation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WFActivationJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WFActivationJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartWorkflow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StartWorkflow{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WFActivationJob_StartWorkflow{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FireTimer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FireTimer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WFActivationJob_FireTimer{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateRandomSeed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateRandomSeed{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WFActivationJob_UpdateRandomSeed{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryWorkflow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryWorkflow{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WFActivationJob_QueryWorkflow{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelWorkflow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelWorkflow{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WFActivationJob_CancelWorkflow{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalWorkflow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SignalWorkflow{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WFActivationJob_SignalWorkflow{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveActivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResolveActivity{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WFActivationJob_ResolveActivity{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyHasPatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NotifyHasPatch{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WFActivationJob_NotifyHasPatch{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveChildWorkflowExecutionStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResolveChildWorkflowExecutionStart{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WFActivationJob_ResolveChildWorkflowExecutionStart{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveChildWorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResolveChildWorkflowExecution{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WFActivationJob_ResolveChildWorkflowExecution{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveSignalExternalWorkflow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResolveSignalExternalWorkflow{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WFActivationJob_ResolveSignalExternalWorkflow{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveRequestCancelExternalWorkflow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResolveRequestCancelExternalWorkflow{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &WFActivationJob_ResolveRequestCancelExternalWorkflow{v}
			iNdEx = postIndex
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveFromCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Variant = &WFActivationJob_RemoveFromCache{b}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowActivation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartWorkflow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowActivation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartWorkflow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartWorkflow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments, &commonpb.Payload{})
			if err := m.Arguments[len(m.Arguments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomnessSeed", wireType)
			}
			m.RandomnessSeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomnessSeed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]*commonpb.Payload)
			}
			var mapkey string
			var mapvalue *commonpb.Payload
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWorkflowActivation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflowActivation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWorkflowActivation
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWorkflowActivation
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflowActivation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthWorkflowActivation
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthWorkflowActivation
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &commonpb.Payload{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWorkflowActivation(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWorkflowActivation
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowActivation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FireTimer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowActivation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FireTimer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FireTimer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowActivation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolveActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowActivation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolveActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolveActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &activityresultpb.ActivityResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowActivation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolveChildWorkflowExecutionStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowActivation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolveChildWorkflowExecutionStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolveChildWorkflowExecutionStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeeded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResolveChildWorkflowExecutionStartSuccess{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &ResolveChildWorkflowExecutionStart_Succeeded{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResolveChildWorkflowExecutionStartFailure{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &ResolveChildWorkflowExecutionStart_Failed{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancelled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResolveChildWorkflowExecutionStartCancelled{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &ResolveChildWorkflowExecutionStart_Cancelled{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowActivation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolveChildWorkflowExecutionStartSuccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowActivation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolveChildWorkflowExecutionStartSuccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolveChildWorkflowExecutionStartSuccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowActivation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolveChildWorkflowExecutionStartFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowActivation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolveChildWorkflowExecutionStartFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolveChildWorkflowExecutionStartFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			m.Cause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cause |= childworkflowpb.StartChildWorkflowExecutionFailedCause(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowActivation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolveChildWorkflowExecutionStartCancelled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowActivation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolveChildWorkflowExecutionStartCancelled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolveChildWorkflowExecutionStartCancelled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &v1.Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowActivation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolveChildWorkflowExecution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowActivation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolveChildWorkflowExecution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolveChildWorkflowExecution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &childworkflowpb.ChildWorkflowResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowActivation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRandomSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowActivation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRandomSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRandomSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomnessSeed", wireType)
			}
			m.RandomnessSeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomnessSeed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowActivation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkflow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowActivation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkflow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkflow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments, &commonpb.Payload{})
			if err := m.Arguments[len(m.Arguments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowActivation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelWorkflow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowActivation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelWorkflow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelWorkflow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, &commonpb.Payload{})
			if err := m.Details[len(m.Details)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowActivation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalWorkflow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowActivation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalWorkflow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalWorkflow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input, &commonpb.Payload{})
			if err := m.Input[len(m.Input)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowActivation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyHasPatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowActivation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyHasPatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyHasPatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatchId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatchId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowActivation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolveSignalExternalWorkflow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowActivation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolveSignalExternalWorkflow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolveSignalExternalWorkflow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &v1.Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowActivation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolveRequestCancelExternalWorkflow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowActivation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolveRequestCancelExternalWorkflow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolveRequestCancelExternalWorkflow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &v1.Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowActivation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowActivation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkflowActivation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkflowActivation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflowActivation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWorkflowActivation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWorkflowActivation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWorkflowActivation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWorkflowActivation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkflowActivation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWorkflowActivation = fmt.Errorf("proto: unexpected end of group")
)
