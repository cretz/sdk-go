// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: workflow_activation.proto

//*
// Definitions of the different workflow activation jobs returned from [crate::Core::poll_task]. The
// lang SDK applies these activation jobs to drive workflows.

package workflowactivationpb

import (
	v1 "go.temporal.io/api/failure/v1"
	activityresultpb "go.temporal.io/sdk/sdkcore/internal/ffi/corepb/activityresultpb"
	childworkflowpb "go.temporal.io/sdk/sdkcore/internal/ffi/corepb/childworkflowpb"
	commonpb "go.temporal.io/sdk/sdkcore/internal/ffi/corepb/commonpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

/// An instruction to the lang sdk to run some workflow code, whether for the first time or from
/// a cached state.
type WFActivation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The id of the currently active run of the workflow. Also used as a cache key. There may
	/// only ever be one active workflow task (and hence activation) of a run at one time.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	/// The current time as understood by the workflow, which is set by workflow task started events
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	/// Whether or not the activation is replaying past events
	IsReplaying bool `protobuf:"varint,3,opt,name=is_replaying,json=isReplaying,proto3" json:"is_replaying,omitempty"`
	/// The things to do upon activating the workflow
	Jobs []*WFActivationJob `protobuf:"bytes,4,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *WFActivation) Reset() {
	*x = WFActivation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_activation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WFActivation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WFActivation) ProtoMessage() {}

func (x *WFActivation) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_activation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WFActivation.ProtoReflect.Descriptor instead.
func (*WFActivation) Descriptor() ([]byte, []int) {
	return file_workflow_activation_proto_rawDescGZIP(), []int{0}
}

func (x *WFActivation) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *WFActivation) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *WFActivation) GetIsReplaying() bool {
	if x != nil {
		return x.IsReplaying
	}
	return false
}

func (x *WFActivation) GetJobs() []*WFActivationJob {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type WFActivationJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//	*WFActivationJob_StartWorkflow
	//	*WFActivationJob_FireTimer
	//	*WFActivationJob_UpdateRandomSeed
	//	*WFActivationJob_QueryWorkflow
	//	*WFActivationJob_CancelWorkflow
	//	*WFActivationJob_SignalWorkflow
	//	*WFActivationJob_ResolveActivity
	//	*WFActivationJob_NotifyHasPatch
	//	*WFActivationJob_ResolveChildWorkflowExecutionStart
	//	*WFActivationJob_ResolveChildWorkflowExecution
	//	*WFActivationJob_ResolveSignalExternalWorkflow
	//	*WFActivationJob_ResolveRequestCancelExternalWorkflow
	//	*WFActivationJob_RemoveFromCache
	Variant isWFActivationJob_Variant `protobuf_oneof:"variant"`
}

func (x *WFActivationJob) Reset() {
	*x = WFActivationJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_activation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WFActivationJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WFActivationJob) ProtoMessage() {}

func (x *WFActivationJob) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_activation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WFActivationJob.ProtoReflect.Descriptor instead.
func (*WFActivationJob) Descriptor() ([]byte, []int) {
	return file_workflow_activation_proto_rawDescGZIP(), []int{1}
}

func (m *WFActivationJob) GetVariant() isWFActivationJob_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *WFActivationJob) GetStartWorkflow() *StartWorkflow {
	if x, ok := x.GetVariant().(*WFActivationJob_StartWorkflow); ok {
		return x.StartWorkflow
	}
	return nil
}

func (x *WFActivationJob) GetFireTimer() *FireTimer {
	if x, ok := x.GetVariant().(*WFActivationJob_FireTimer); ok {
		return x.FireTimer
	}
	return nil
}

func (x *WFActivationJob) GetUpdateRandomSeed() *UpdateRandomSeed {
	if x, ok := x.GetVariant().(*WFActivationJob_UpdateRandomSeed); ok {
		return x.UpdateRandomSeed
	}
	return nil
}

func (x *WFActivationJob) GetQueryWorkflow() *QueryWorkflow {
	if x, ok := x.GetVariant().(*WFActivationJob_QueryWorkflow); ok {
		return x.QueryWorkflow
	}
	return nil
}

func (x *WFActivationJob) GetCancelWorkflow() *CancelWorkflow {
	if x, ok := x.GetVariant().(*WFActivationJob_CancelWorkflow); ok {
		return x.CancelWorkflow
	}
	return nil
}

func (x *WFActivationJob) GetSignalWorkflow() *SignalWorkflow {
	if x, ok := x.GetVariant().(*WFActivationJob_SignalWorkflow); ok {
		return x.SignalWorkflow
	}
	return nil
}

func (x *WFActivationJob) GetResolveActivity() *ResolveActivity {
	if x, ok := x.GetVariant().(*WFActivationJob_ResolveActivity); ok {
		return x.ResolveActivity
	}
	return nil
}

func (x *WFActivationJob) GetNotifyHasPatch() *NotifyHasPatch {
	if x, ok := x.GetVariant().(*WFActivationJob_NotifyHasPatch); ok {
		return x.NotifyHasPatch
	}
	return nil
}

func (x *WFActivationJob) GetResolveChildWorkflowExecutionStart() *ResolveChildWorkflowExecutionStart {
	if x, ok := x.GetVariant().(*WFActivationJob_ResolveChildWorkflowExecutionStart); ok {
		return x.ResolveChildWorkflowExecutionStart
	}
	return nil
}

func (x *WFActivationJob) GetResolveChildWorkflowExecution() *ResolveChildWorkflowExecution {
	if x, ok := x.GetVariant().(*WFActivationJob_ResolveChildWorkflowExecution); ok {
		return x.ResolveChildWorkflowExecution
	}
	return nil
}

func (x *WFActivationJob) GetResolveSignalExternalWorkflow() *ResolveSignalExternalWorkflow {
	if x, ok := x.GetVariant().(*WFActivationJob_ResolveSignalExternalWorkflow); ok {
		return x.ResolveSignalExternalWorkflow
	}
	return nil
}

func (x *WFActivationJob) GetResolveRequestCancelExternalWorkflow() *ResolveRequestCancelExternalWorkflow {
	if x, ok := x.GetVariant().(*WFActivationJob_ResolveRequestCancelExternalWorkflow); ok {
		return x.ResolveRequestCancelExternalWorkflow
	}
	return nil
}

func (x *WFActivationJob) GetRemoveFromCache() bool {
	if x, ok := x.GetVariant().(*WFActivationJob_RemoveFromCache); ok {
		return x.RemoveFromCache
	}
	return false
}

type isWFActivationJob_Variant interface {
	isWFActivationJob_Variant()
}

type WFActivationJob_StartWorkflow struct {
	/// Begin a workflow for the first time
	StartWorkflow *StartWorkflow `protobuf:"bytes,1,opt,name=start_workflow,json=startWorkflow,proto3,oneof"`
}

type WFActivationJob_FireTimer struct {
	/// A timer has fired, allowing whatever was waiting on it (if anything) to proceed
	FireTimer *FireTimer `protobuf:"bytes,2,opt,name=fire_timer,json=fireTimer,proto3,oneof"`
}

type WFActivationJob_UpdateRandomSeed struct {
	/// Workflow was reset. The randomness seed must be updated.
	UpdateRandomSeed *UpdateRandomSeed `protobuf:"bytes,4,opt,name=update_random_seed,json=updateRandomSeed,proto3,oneof"`
}

type WFActivationJob_QueryWorkflow struct {
	/// A request to query the workflow was received.
	QueryWorkflow *QueryWorkflow `protobuf:"bytes,5,opt,name=query_workflow,json=queryWorkflow,proto3,oneof"`
}

type WFActivationJob_CancelWorkflow struct {
	/// A request to cancel the workflow was received.
	CancelWorkflow *CancelWorkflow `protobuf:"bytes,6,opt,name=cancel_workflow,json=cancelWorkflow,proto3,oneof"`
}

type WFActivationJob_SignalWorkflow struct {
	/// A request to signal the workflow was received.
	SignalWorkflow *SignalWorkflow `protobuf:"bytes,7,opt,name=signal_workflow,json=signalWorkflow,proto3,oneof"`
}

type WFActivationJob_ResolveActivity struct {
	/// An activity was resolved, result could be completed, failed or cancelled
	ResolveActivity *ResolveActivity `protobuf:"bytes,8,opt,name=resolve_activity,json=resolveActivity,proto3,oneof"`
}

type WFActivationJob_NotifyHasPatch struct {
	/// A patch marker has been detected and lang is being told that change exists. This
	/// job is strange in that it is sent pre-emptively to lang without any corresponding
	/// command being sent first.
	NotifyHasPatch *NotifyHasPatch `protobuf:"bytes,9,opt,name=notify_has_patch,json=notifyHasPatch,proto3,oneof"`
}

type WFActivationJob_ResolveChildWorkflowExecutionStart struct {
	/// A child workflow execution has started or failed to start
	ResolveChildWorkflowExecutionStart *ResolveChildWorkflowExecutionStart `protobuf:"bytes,10,opt,name=resolve_child_workflow_execution_start,json=resolveChildWorkflowExecutionStart,proto3,oneof"`
}

type WFActivationJob_ResolveChildWorkflowExecution struct {
	/// A child workflow was resolved, result could be completed or failed
	ResolveChildWorkflowExecution *ResolveChildWorkflowExecution `protobuf:"bytes,11,opt,name=resolve_child_workflow_execution,json=resolveChildWorkflowExecution,proto3,oneof"`
}

type WFActivationJob_ResolveSignalExternalWorkflow struct {
	/// An attempt to signal an external workflow resolved
	ResolveSignalExternalWorkflow *ResolveSignalExternalWorkflow `protobuf:"bytes,12,opt,name=resolve_signal_external_workflow,json=resolveSignalExternalWorkflow,proto3,oneof"`
}

type WFActivationJob_ResolveRequestCancelExternalWorkflow struct {
	/// An attempt to cancel an external workflow resolved
	ResolveRequestCancelExternalWorkflow *ResolveRequestCancelExternalWorkflow `protobuf:"bytes,13,opt,name=resolve_request_cancel_external_workflow,json=resolveRequestCancelExternalWorkflow,proto3,oneof"`
}

type WFActivationJob_RemoveFromCache struct {
	/// Remove the workflow identified by the [WFActivation] containing this job from the cache
	/// after performing the activation.
	///
	/// If other job variant are present in the list, this variant will be the last job in the
	/// job list. The boolean value is irrelevant, since the variant type is what matters. It
	/// will be set to true if this is the variant.
	RemoveFromCache bool `protobuf:"varint,50,opt,name=remove_from_cache,json=removeFromCache,proto3,oneof"`
}

func (*WFActivationJob_StartWorkflow) isWFActivationJob_Variant() {}

func (*WFActivationJob_FireTimer) isWFActivationJob_Variant() {}

func (*WFActivationJob_UpdateRandomSeed) isWFActivationJob_Variant() {}

func (*WFActivationJob_QueryWorkflow) isWFActivationJob_Variant() {}

func (*WFActivationJob_CancelWorkflow) isWFActivationJob_Variant() {}

func (*WFActivationJob_SignalWorkflow) isWFActivationJob_Variant() {}

func (*WFActivationJob_ResolveActivity) isWFActivationJob_Variant() {}

func (*WFActivationJob_NotifyHasPatch) isWFActivationJob_Variant() {}

func (*WFActivationJob_ResolveChildWorkflowExecutionStart) isWFActivationJob_Variant() {}

func (*WFActivationJob_ResolveChildWorkflowExecution) isWFActivationJob_Variant() {}

func (*WFActivationJob_ResolveSignalExternalWorkflow) isWFActivationJob_Variant() {}

func (*WFActivationJob_ResolveRequestCancelExternalWorkflow) isWFActivationJob_Variant() {}

func (*WFActivationJob_RemoveFromCache) isWFActivationJob_Variant() {}

/// Start a new workflow
type StartWorkflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The identifier the lang-specific sdk uses to execute workflow code
	WorkflowType string `protobuf:"bytes,1,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	/// The workflow id used on the temporal server
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	/// Inputs to the workflow code
	Arguments []*commonpb.Payload `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
	/// The seed must be used to initialize the random generator used by SDK.
	/// RandomSeedUpdatedAttributes are used to deliver seed updates.
	RandomnessSeed uint64 `protobuf:"varint,4,opt,name=randomness_seed,json=randomnessSeed,proto3" json:"randomness_seed,omitempty"`
	/// Used to add metadata e.g. for tracing and auth, meant to be read and written to by interceptors.
	Headers map[string]*commonpb.Payload `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StartWorkflow) Reset() {
	*x = StartWorkflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_activation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWorkflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkflow) ProtoMessage() {}

func (x *StartWorkflow) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_activation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorkflow.ProtoReflect.Descriptor instead.
func (*StartWorkflow) Descriptor() ([]byte, []int) {
	return file_workflow_activation_proto_rawDescGZIP(), []int{2}
}

func (x *StartWorkflow) GetWorkflowType() string {
	if x != nil {
		return x.WorkflowType
	}
	return ""
}

func (x *StartWorkflow) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *StartWorkflow) GetArguments() []*commonpb.Payload {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *StartWorkflow) GetRandomnessSeed() uint64 {
	if x != nil {
		return x.RandomnessSeed
	}
	return 0
}

func (x *StartWorkflow) GetHeaders() map[string]*commonpb.Payload {
	if x != nil {
		return x.Headers
	}
	return nil
}

/// Notify a workflow that a timer has fired
type FireTimer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Sequence number as provided by lang in the corresponding StartTimer command
	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *FireTimer) Reset() {
	*x = FireTimer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_activation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireTimer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireTimer) ProtoMessage() {}

func (x *FireTimer) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_activation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireTimer.ProtoReflect.Descriptor instead.
func (*FireTimer) Descriptor() ([]byte, []int) {
	return file_workflow_activation_proto_rawDescGZIP(), []int{3}
}

func (x *FireTimer) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

/// Notify a workflow that an activity has been resolved
type ResolveActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Sequence number as provided by lang in the corresponding ScheduleActivity command
	Seq    uint32                           `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Result *activityresultpb.ActivityResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ResolveActivity) Reset() {
	*x = ResolveActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_activation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveActivity) ProtoMessage() {}

func (x *ResolveActivity) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_activation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveActivity.ProtoReflect.Descriptor instead.
func (*ResolveActivity) Descriptor() ([]byte, []int) {
	return file_workflow_activation_proto_rawDescGZIP(), []int{4}
}

func (x *ResolveActivity) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *ResolveActivity) GetResult() *activityresultpb.ActivityResult {
	if x != nil {
		return x.Result
	}
	return nil
}

/// Notify a workflow that a start child workflow execution request has succeeded, failed or was
/// cancelled.
type ResolveChildWorkflowExecutionStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Sequence number as provided by lang in the corresponding StartChildWorkflowExecution command
	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	// Types that are assignable to Status:
	//	*ResolveChildWorkflowExecutionStart_Succeeded
	//	*ResolveChildWorkflowExecutionStart_Failed
	//	*ResolveChildWorkflowExecutionStart_Cancelled
	Status isResolveChildWorkflowExecutionStart_Status `protobuf_oneof:"status"`
}

func (x *ResolveChildWorkflowExecutionStart) Reset() {
	*x = ResolveChildWorkflowExecutionStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_activation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveChildWorkflowExecutionStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveChildWorkflowExecutionStart) ProtoMessage() {}

func (x *ResolveChildWorkflowExecutionStart) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_activation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveChildWorkflowExecutionStart.ProtoReflect.Descriptor instead.
func (*ResolveChildWorkflowExecutionStart) Descriptor() ([]byte, []int) {
	return file_workflow_activation_proto_rawDescGZIP(), []int{5}
}

func (x *ResolveChildWorkflowExecutionStart) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (m *ResolveChildWorkflowExecutionStart) GetStatus() isResolveChildWorkflowExecutionStart_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (x *ResolveChildWorkflowExecutionStart) GetSucceeded() *ResolveChildWorkflowExecutionStartSuccess {
	if x, ok := x.GetStatus().(*ResolveChildWorkflowExecutionStart_Succeeded); ok {
		return x.Succeeded
	}
	return nil
}

func (x *ResolveChildWorkflowExecutionStart) GetFailed() *ResolveChildWorkflowExecutionStartFailure {
	if x, ok := x.GetStatus().(*ResolveChildWorkflowExecutionStart_Failed); ok {
		return x.Failed
	}
	return nil
}

func (x *ResolveChildWorkflowExecutionStart) GetCancelled() *ResolveChildWorkflowExecutionStartCancelled {
	if x, ok := x.GetStatus().(*ResolveChildWorkflowExecutionStart_Cancelled); ok {
		return x.Cancelled
	}
	return nil
}

type isResolveChildWorkflowExecutionStart_Status interface {
	isResolveChildWorkflowExecutionStart_Status()
}

type ResolveChildWorkflowExecutionStart_Succeeded struct {
	Succeeded *ResolveChildWorkflowExecutionStartSuccess `protobuf:"bytes,2,opt,name=succeeded,proto3,oneof"`
}

type ResolveChildWorkflowExecutionStart_Failed struct {
	Failed *ResolveChildWorkflowExecutionStartFailure `protobuf:"bytes,3,opt,name=failed,proto3,oneof"`
}

type ResolveChildWorkflowExecutionStart_Cancelled struct {
	Cancelled *ResolveChildWorkflowExecutionStartCancelled `protobuf:"bytes,4,opt,name=cancelled,proto3,oneof"`
}

func (*ResolveChildWorkflowExecutionStart_Succeeded) isResolveChildWorkflowExecutionStart_Status() {}

func (*ResolveChildWorkflowExecutionStart_Failed) isResolveChildWorkflowExecutionStart_Status() {}

func (*ResolveChildWorkflowExecutionStart_Cancelled) isResolveChildWorkflowExecutionStart_Status() {}

/// Simply pass the run_id to lang
type ResolveChildWorkflowExecutionStartSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *ResolveChildWorkflowExecutionStartSuccess) Reset() {
	*x = ResolveChildWorkflowExecutionStartSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_activation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveChildWorkflowExecutionStartSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveChildWorkflowExecutionStartSuccess) ProtoMessage() {}

func (x *ResolveChildWorkflowExecutionStartSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_activation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveChildWorkflowExecutionStartSuccess.ProtoReflect.Descriptor instead.
func (*ResolveChildWorkflowExecutionStartSuccess) Descriptor() ([]byte, []int) {
	return file_workflow_activation_proto_rawDescGZIP(), []int{6}
}

func (x *ResolveChildWorkflowExecutionStartSuccess) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

/// Provide lang the cause of failure
type ResolveChildWorkflowExecutionStartFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Lang should have this information but it's more convenient to pass it back
	/// for error construction on the lang side.
	WorkflowId   string                                                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowType string                                                 `protobuf:"bytes,2,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	Cause        childworkflowpb.StartChildWorkflowExecutionFailedCause `protobuf:"varint,3,opt,name=cause,proto3,enum=coresdk.child_workflow.StartChildWorkflowExecutionFailedCause" json:"cause,omitempty"`
}

func (x *ResolveChildWorkflowExecutionStartFailure) Reset() {
	*x = ResolveChildWorkflowExecutionStartFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_activation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveChildWorkflowExecutionStartFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveChildWorkflowExecutionStartFailure) ProtoMessage() {}

func (x *ResolveChildWorkflowExecutionStartFailure) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_activation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveChildWorkflowExecutionStartFailure.ProtoReflect.Descriptor instead.
func (*ResolveChildWorkflowExecutionStartFailure) Descriptor() ([]byte, []int) {
	return file_workflow_activation_proto_rawDescGZIP(), []int{7}
}

func (x *ResolveChildWorkflowExecutionStartFailure) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ResolveChildWorkflowExecutionStartFailure) GetWorkflowType() string {
	if x != nil {
		return x.WorkflowType
	}
	return ""
}

func (x *ResolveChildWorkflowExecutionStartFailure) GetCause() childworkflowpb.StartChildWorkflowExecutionFailedCause {
	if x != nil {
		return x.Cause
	}
	return childworkflowpb.StartChildWorkflowExecutionFailedCause(0)
}

/// `failure` should be ChildWorkflowFailure with cause set to CancelledFailure.
/// The failure is constructed in core for lang's convenience.
type ResolveChildWorkflowExecutionStartCancelled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failure *v1.Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (x *ResolveChildWorkflowExecutionStartCancelled) Reset() {
	*x = ResolveChildWorkflowExecutionStartCancelled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_activation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveChildWorkflowExecutionStartCancelled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveChildWorkflowExecutionStartCancelled) ProtoMessage() {}

func (x *ResolveChildWorkflowExecutionStartCancelled) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_activation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveChildWorkflowExecutionStartCancelled.ProtoReflect.Descriptor instead.
func (*ResolveChildWorkflowExecutionStartCancelled) Descriptor() ([]byte, []int) {
	return file_workflow_activation_proto_rawDescGZIP(), []int{8}
}

func (x *ResolveChildWorkflowExecutionStartCancelled) GetFailure() *v1.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

/// Notify a workflow that a child workflow execution has been resolved
type ResolveChildWorkflowExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Sequence number as provided by lang in the corresponding StartChildWorkflowExecution command
	Seq    uint32                               `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Result *childworkflowpb.ChildWorkflowResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ResolveChildWorkflowExecution) Reset() {
	*x = ResolveChildWorkflowExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_activation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveChildWorkflowExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveChildWorkflowExecution) ProtoMessage() {}

func (x *ResolveChildWorkflowExecution) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_activation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveChildWorkflowExecution.ProtoReflect.Descriptor instead.
func (*ResolveChildWorkflowExecution) Descriptor() ([]byte, []int) {
	return file_workflow_activation_proto_rawDescGZIP(), []int{9}
}

func (x *ResolveChildWorkflowExecution) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *ResolveChildWorkflowExecution) GetResult() *childworkflowpb.ChildWorkflowResult {
	if x != nil {
		return x.Result
	}
	return nil
}

/// Update the workflow's random seed
type UpdateRandomSeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandomnessSeed uint64 `protobuf:"varint,1,opt,name=randomness_seed,json=randomnessSeed,proto3" json:"randomness_seed,omitempty"`
}

func (x *UpdateRandomSeed) Reset() {
	*x = UpdateRandomSeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_activation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRandomSeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRandomSeed) ProtoMessage() {}

func (x *UpdateRandomSeed) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_activation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRandomSeed.ProtoReflect.Descriptor instead.
func (*UpdateRandomSeed) Descriptor() ([]byte, []int) {
	return file_workflow_activation_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateRandomSeed) GetRandomnessSeed() uint64 {
	if x != nil {
		return x.RandomnessSeed
	}
	return 0
}

/// Query a workflow
type QueryWorkflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// For PollWFTResp `query` field, this will be set to the special value `legacy`. For the
	/// `queries` field, the server provides a unique identifier. If it is a `legacy` query,
	/// lang cannot issue any commands in response other than to answer the query.
	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	/// The query's function/method/etc name
	QueryType string              `protobuf:"bytes,2,opt,name=query_type,json=queryType,proto3" json:"query_type,omitempty"`
	Arguments []*commonpb.Payload `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *QueryWorkflow) Reset() {
	*x = QueryWorkflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_activation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryWorkflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWorkflow) ProtoMessage() {}

func (x *QueryWorkflow) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_activation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWorkflow.ProtoReflect.Descriptor instead.
func (*QueryWorkflow) Descriptor() ([]byte, []int) {
	return file_workflow_activation_proto_rawDescGZIP(), []int{11}
}

func (x *QueryWorkflow) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *QueryWorkflow) GetQueryType() string {
	if x != nil {
		return x.QueryType
	}
	return ""
}

func (x *QueryWorkflow) GetArguments() []*commonpb.Payload {
	if x != nil {
		return x.Arguments
	}
	return nil
}

/// Cancel a running workflow
type CancelWorkflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Information from the cancellation request
	Details []*commonpb.Payload `protobuf:"bytes,1,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *CancelWorkflow) Reset() {
	*x = CancelWorkflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_activation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelWorkflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelWorkflow) ProtoMessage() {}

func (x *CancelWorkflow) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_activation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelWorkflow.ProtoReflect.Descriptor instead.
func (*CancelWorkflow) Descriptor() ([]byte, []int) {
	return file_workflow_activation_proto_rawDescGZIP(), []int{12}
}

func (x *CancelWorkflow) GetDetails() []*commonpb.Payload {
	if x != nil {
		return x.Details
	}
	return nil
}

/// Send a signal to a workflow
type SignalWorkflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignalName string              `protobuf:"bytes,1,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
	Input      []*commonpb.Payload `protobuf:"bytes,2,rep,name=input,proto3" json:"input,omitempty"`
	Identity   string              `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *SignalWorkflow) Reset() {
	*x = SignalWorkflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_activation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalWorkflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalWorkflow) ProtoMessage() {}

func (x *SignalWorkflow) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_activation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalWorkflow.ProtoReflect.Descriptor instead.
func (*SignalWorkflow) Descriptor() ([]byte, []int) {
	return file_workflow_activation_proto_rawDescGZIP(), []int{13}
}

func (x *SignalWorkflow) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

func (x *SignalWorkflow) GetInput() []*commonpb.Payload {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *SignalWorkflow) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

// Inform lang what the result of a call to `patched` or similar API should be -- this is always
// sent pre-emptively, so any time it is sent the change is present
type NotifyHasPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatchId string `protobuf:"bytes,1,opt,name=patch_id,json=patchId,proto3" json:"patch_id,omitempty"`
}

func (x *NotifyHasPatch) Reset() {
	*x = NotifyHasPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_activation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyHasPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyHasPatch) ProtoMessage() {}

func (x *NotifyHasPatch) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_activation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyHasPatch.ProtoReflect.Descriptor instead.
func (*NotifyHasPatch) Descriptor() ([]byte, []int) {
	return file_workflow_activation_proto_rawDescGZIP(), []int{14}
}

func (x *NotifyHasPatch) GetPatchId() string {
	if x != nil {
		return x.PatchId
	}
	return ""
}

type ResolveSignalExternalWorkflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Sequence number as provided by lang in the corresponding SignalExternalWorkflowExecution
	/// command
	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	/// If populated, this signal either failed to be sent or was cancelled depending on failure
	/// type / info.
	Failure *v1.Failure `protobuf:"bytes,2,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (x *ResolveSignalExternalWorkflow) Reset() {
	*x = ResolveSignalExternalWorkflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_activation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveSignalExternalWorkflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveSignalExternalWorkflow) ProtoMessage() {}

func (x *ResolveSignalExternalWorkflow) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_activation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveSignalExternalWorkflow.ProtoReflect.Descriptor instead.
func (*ResolveSignalExternalWorkflow) Descriptor() ([]byte, []int) {
	return file_workflow_activation_proto_rawDescGZIP(), []int{15}
}

func (x *ResolveSignalExternalWorkflow) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *ResolveSignalExternalWorkflow) GetFailure() *v1.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

type ResolveRequestCancelExternalWorkflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Sequence number as provided by lang in the corresponding
	/// RequestCancelExternalWorkflowExecution command
	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	/// If populated, this signal either failed to be sent or was cancelled depending on failure
	/// type / info.
	Failure *v1.Failure `protobuf:"bytes,2,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (x *ResolveRequestCancelExternalWorkflow) Reset() {
	*x = ResolveRequestCancelExternalWorkflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_activation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveRequestCancelExternalWorkflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveRequestCancelExternalWorkflow) ProtoMessage() {}

func (x *ResolveRequestCancelExternalWorkflow) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_activation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveRequestCancelExternalWorkflow.ProtoReflect.Descriptor instead.
func (*ResolveRequestCancelExternalWorkflow) Descriptor() ([]byte, []int) {
	return file_workflow_activation_proto_rawDescGZIP(), []int{16}
}

func (x *ResolveRequestCancelExternalWorkflow) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *ResolveRequestCancelExternalWorkflow) GetFailure() *v1.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

var File_workflow_activation_proto protoreflect.FileDescriptor

var file_workflow_activation_proto_rawDesc = []byte{
	0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x01, 0x0a, 0x0c,
	0x57, 0x46, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75,
	0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67,
	0x12, 0x40, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x46, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x04, 0x6a, 0x6f,
	0x62, 0x73, 0x22, 0xc6, 0x0a, 0x0a, 0x0f, 0x57, 0x46, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x53, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x47, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53,
	0x65, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x56, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x00,
	0x52, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x12, 0x56, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x59, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x68, 0x61,
	0x73, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x48, 0x61, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x48, 0x61, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x95, 0x01, 0x0a,
	0x26, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x22, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1d, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a,
	0x20, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64,
	0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x1d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x12, 0x9b, 0x01, 0x0a, 0x28, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64,
	0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x24, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0xdd, 0x02, 0x0a, 0x0d,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x23, 0x0a,
	0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x53,
	0x65, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x53, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64,
	0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1d, 0x0a, 0x09, 0x46,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x64, 0x0a, 0x0f, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12,
	0x3f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xf4, 0x02, 0x0a, 0x22, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x66, 0x0a, 0x09, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x12, 0x60, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x06, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x12, 0x68, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x08, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x42, 0x0a, 0x29, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x29,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x54, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x05,
	0x63, 0x61, 0x75, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x2b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x22, 0x76, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x73, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3b, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73,
	0x73, 0x53, 0x65, 0x65, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x43, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x7c, 0x0a,
	0x0e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x2b, 0x0a, 0x0e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x61, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x3a, 0x0a, 0x07, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22, 0x74, 0x0a, 0x24, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65,
	0x71, 0x12, 0x3a, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_workflow_activation_proto_rawDescOnce sync.Once
	file_workflow_activation_proto_rawDescData = file_workflow_activation_proto_rawDesc
)

func file_workflow_activation_proto_rawDescGZIP() []byte {
	file_workflow_activation_proto_rawDescOnce.Do(func() {
		file_workflow_activation_proto_rawDescData = protoimpl.X.CompressGZIP(file_workflow_activation_proto_rawDescData)
	})
	return file_workflow_activation_proto_rawDescData
}

var file_workflow_activation_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_workflow_activation_proto_goTypes = []interface{}{
	(*WFActivation)(nil),                                // 0: coresdk.workflow_activation.WFActivation
	(*WFActivationJob)(nil),                             // 1: coresdk.workflow_activation.WFActivationJob
	(*StartWorkflow)(nil),                               // 2: coresdk.workflow_activation.StartWorkflow
	(*FireTimer)(nil),                                   // 3: coresdk.workflow_activation.FireTimer
	(*ResolveActivity)(nil),                             // 4: coresdk.workflow_activation.ResolveActivity
	(*ResolveChildWorkflowExecutionStart)(nil),          // 5: coresdk.workflow_activation.ResolveChildWorkflowExecutionStart
	(*ResolveChildWorkflowExecutionStartSuccess)(nil),   // 6: coresdk.workflow_activation.ResolveChildWorkflowExecutionStartSuccess
	(*ResolveChildWorkflowExecutionStartFailure)(nil),   // 7: coresdk.workflow_activation.ResolveChildWorkflowExecutionStartFailure
	(*ResolveChildWorkflowExecutionStartCancelled)(nil), // 8: coresdk.workflow_activation.ResolveChildWorkflowExecutionStartCancelled
	(*ResolveChildWorkflowExecution)(nil),               // 9: coresdk.workflow_activation.ResolveChildWorkflowExecution
	(*UpdateRandomSeed)(nil),                            // 10: coresdk.workflow_activation.UpdateRandomSeed
	(*QueryWorkflow)(nil),                               // 11: coresdk.workflow_activation.QueryWorkflow
	(*CancelWorkflow)(nil),                              // 12: coresdk.workflow_activation.CancelWorkflow
	(*SignalWorkflow)(nil),                              // 13: coresdk.workflow_activation.SignalWorkflow
	(*NotifyHasPatch)(nil),                              // 14: coresdk.workflow_activation.NotifyHasPatch
	(*ResolveSignalExternalWorkflow)(nil),               // 15: coresdk.workflow_activation.ResolveSignalExternalWorkflow
	(*ResolveRequestCancelExternalWorkflow)(nil),        // 16: coresdk.workflow_activation.ResolveRequestCancelExternalWorkflow
	nil,                                     // 17: coresdk.workflow_activation.StartWorkflow.HeadersEntry
	(*timestamppb.Timestamp)(nil),           // 18: google.protobuf.Timestamp
	(*commonpb.Payload)(nil),                // 19: coresdk.common.Payload
	(*activityresultpb.ActivityResult)(nil), // 20: coresdk.activity_result.ActivityResult
	(childworkflowpb.StartChildWorkflowExecutionFailedCause)(0), // 21: coresdk.child_workflow.StartChildWorkflowExecutionFailedCause
	(*v1.Failure)(nil),                          // 22: temporal.api.failure.v1.Failure
	(*childworkflowpb.ChildWorkflowResult)(nil), // 23: coresdk.child_workflow.ChildWorkflowResult
}
var file_workflow_activation_proto_depIdxs = []int32{
	18, // 0: coresdk.workflow_activation.WFActivation.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 1: coresdk.workflow_activation.WFActivation.jobs:type_name -> coresdk.workflow_activation.WFActivationJob
	2,  // 2: coresdk.workflow_activation.WFActivationJob.start_workflow:type_name -> coresdk.workflow_activation.StartWorkflow
	3,  // 3: coresdk.workflow_activation.WFActivationJob.fire_timer:type_name -> coresdk.workflow_activation.FireTimer
	10, // 4: coresdk.workflow_activation.WFActivationJob.update_random_seed:type_name -> coresdk.workflow_activation.UpdateRandomSeed
	11, // 5: coresdk.workflow_activation.WFActivationJob.query_workflow:type_name -> coresdk.workflow_activation.QueryWorkflow
	12, // 6: coresdk.workflow_activation.WFActivationJob.cancel_workflow:type_name -> coresdk.workflow_activation.CancelWorkflow
	13, // 7: coresdk.workflow_activation.WFActivationJob.signal_workflow:type_name -> coresdk.workflow_activation.SignalWorkflow
	4,  // 8: coresdk.workflow_activation.WFActivationJob.resolve_activity:type_name -> coresdk.workflow_activation.ResolveActivity
	14, // 9: coresdk.workflow_activation.WFActivationJob.notify_has_patch:type_name -> coresdk.workflow_activation.NotifyHasPatch
	5,  // 10: coresdk.workflow_activation.WFActivationJob.resolve_child_workflow_execution_start:type_name -> coresdk.workflow_activation.ResolveChildWorkflowExecutionStart
	9,  // 11: coresdk.workflow_activation.WFActivationJob.resolve_child_workflow_execution:type_name -> coresdk.workflow_activation.ResolveChildWorkflowExecution
	15, // 12: coresdk.workflow_activation.WFActivationJob.resolve_signal_external_workflow:type_name -> coresdk.workflow_activation.ResolveSignalExternalWorkflow
	16, // 13: coresdk.workflow_activation.WFActivationJob.resolve_request_cancel_external_workflow:type_name -> coresdk.workflow_activation.ResolveRequestCancelExternalWorkflow
	19, // 14: coresdk.workflow_activation.StartWorkflow.arguments:type_name -> coresdk.common.Payload
	17, // 15: coresdk.workflow_activation.StartWorkflow.headers:type_name -> coresdk.workflow_activation.StartWorkflow.HeadersEntry
	20, // 16: coresdk.workflow_activation.ResolveActivity.result:type_name -> coresdk.activity_result.ActivityResult
	6,  // 17: coresdk.workflow_activation.ResolveChildWorkflowExecutionStart.succeeded:type_name -> coresdk.workflow_activation.ResolveChildWorkflowExecutionStartSuccess
	7,  // 18: coresdk.workflow_activation.ResolveChildWorkflowExecutionStart.failed:type_name -> coresdk.workflow_activation.ResolveChildWorkflowExecutionStartFailure
	8,  // 19: coresdk.workflow_activation.ResolveChildWorkflowExecutionStart.cancelled:type_name -> coresdk.workflow_activation.ResolveChildWorkflowExecutionStartCancelled
	21, // 20: coresdk.workflow_activation.ResolveChildWorkflowExecutionStartFailure.cause:type_name -> coresdk.child_workflow.StartChildWorkflowExecutionFailedCause
	22, // 21: coresdk.workflow_activation.ResolveChildWorkflowExecutionStartCancelled.failure:type_name -> temporal.api.failure.v1.Failure
	23, // 22: coresdk.workflow_activation.ResolveChildWorkflowExecution.result:type_name -> coresdk.child_workflow.ChildWorkflowResult
	19, // 23: coresdk.workflow_activation.QueryWorkflow.arguments:type_name -> coresdk.common.Payload
	19, // 24: coresdk.workflow_activation.CancelWorkflow.details:type_name -> coresdk.common.Payload
	19, // 25: coresdk.workflow_activation.SignalWorkflow.input:type_name -> coresdk.common.Payload
	22, // 26: coresdk.workflow_activation.ResolveSignalExternalWorkflow.failure:type_name -> temporal.api.failure.v1.Failure
	22, // 27: coresdk.workflow_activation.ResolveRequestCancelExternalWorkflow.failure:type_name -> temporal.api.failure.v1.Failure
	19, // 28: coresdk.workflow_activation.StartWorkflow.HeadersEntry.value:type_name -> coresdk.common.Payload
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_workflow_activation_proto_init() }
func file_workflow_activation_proto_init() {
	if File_workflow_activation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_workflow_activation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WFActivation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_activation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WFActivationJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_activation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartWorkflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_activation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireTimer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_activation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_activation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveChildWorkflowExecutionStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_activation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveChildWorkflowExecutionStartSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_activation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveChildWorkflowExecutionStartFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_activation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveChildWorkflowExecutionStartCancelled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_activation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveChildWorkflowExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_activation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRandomSeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_activation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryWorkflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_activation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelWorkflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_activation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalWorkflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_activation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyHasPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_activation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveSignalExternalWorkflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_activation_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveRequestCancelExternalWorkflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_workflow_activation_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*WFActivationJob_StartWorkflow)(nil),
		(*WFActivationJob_FireTimer)(nil),
		(*WFActivationJob_UpdateRandomSeed)(nil),
		(*WFActivationJob_QueryWorkflow)(nil),
		(*WFActivationJob_CancelWorkflow)(nil),
		(*WFActivationJob_SignalWorkflow)(nil),
		(*WFActivationJob_ResolveActivity)(nil),
		(*WFActivationJob_NotifyHasPatch)(nil),
		(*WFActivationJob_ResolveChildWorkflowExecutionStart)(nil),
		(*WFActivationJob_ResolveChildWorkflowExecution)(nil),
		(*WFActivationJob_ResolveSignalExternalWorkflow)(nil),
		(*WFActivationJob_ResolveRequestCancelExternalWorkflow)(nil),
		(*WFActivationJob_RemoveFromCache)(nil),
	}
	file_workflow_activation_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ResolveChildWorkflowExecutionStart_Succeeded)(nil),
		(*ResolveChildWorkflowExecutionStart_Failed)(nil),
		(*ResolveChildWorkflowExecutionStart_Cancelled)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_workflow_activation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_workflow_activation_proto_goTypes,
		DependencyIndexes: file_workflow_activation_proto_depIdxs,
		MessageInfos:      file_workflow_activation_proto_msgTypes,
	}.Build()
	File_workflow_activation_proto = out.File
	file_workflow_activation_proto_rawDesc = nil
	file_workflow_activation_proto_goTypes = nil
	file_workflow_activation_proto_depIdxs = nil
}
