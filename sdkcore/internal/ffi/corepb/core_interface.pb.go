// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core_interface.proto

package coresdk

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	activityresultpb "go.temporal.io/sdk/sdkcore/internal/ffi/corepb/activityresultpb"
	_ "go.temporal.io/sdk/sdkcore/internal/ffi/corepb/activitytaskpb"
	commonpb "go.temporal.io/sdk/sdkcore/internal/ffi/corepb/commonpb"
	_ "go.temporal.io/sdk/sdkcore/internal/ffi/corepb/workflowactivationpb"
	_ "go.temporal.io/sdk/sdkcore/internal/ffi/corepb/workflowcommandspb"
	_ "go.temporal.io/sdk/sdkcore/internal/ffi/corepb/workflowcompletionpb"
	_ "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// A request as given to `record_activity_heartbeat`
type ActivityHeartbeat struct {
	TaskToken []byte `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	// The task queue / worker this activity is associated with
	TaskQueue string              `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	Details   []*commonpb.Payload `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
}

func (m *ActivityHeartbeat) Reset()      { *m = ActivityHeartbeat{} }
func (*ActivityHeartbeat) ProtoMessage() {}
func (*ActivityHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_891e4aad0ce7d724, []int{0}
}
func (m *ActivityHeartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityHeartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityHeartbeat.Merge(m, src)
}
func (m *ActivityHeartbeat) XXX_Size() int {
	return m.Size()
}
func (m *ActivityHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityHeartbeat proto.InternalMessageInfo

func (m *ActivityHeartbeat) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *ActivityHeartbeat) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

func (m *ActivityHeartbeat) GetDetails() []*commonpb.Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

// A request as given to `complete_activity_task`
type ActivityTaskCompletion struct {
	TaskToken []byte `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	// The task queue / worker this task is associated with
	TaskQueue string                           `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	Result    *activityresultpb.ActivityResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ActivityTaskCompletion) Reset()      { *m = ActivityTaskCompletion{} }
func (*ActivityTaskCompletion) ProtoMessage() {}
func (*ActivityTaskCompletion) Descriptor() ([]byte, []int) {
	return fileDescriptor_891e4aad0ce7d724, []int{1}
}
func (m *ActivityTaskCompletion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityTaskCompletion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityTaskCompletion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityTaskCompletion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityTaskCompletion.Merge(m, src)
}
func (m *ActivityTaskCompletion) XXX_Size() int {
	return m.Size()
}
func (m *ActivityTaskCompletion) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityTaskCompletion.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityTaskCompletion proto.InternalMessageInfo

func (m *ActivityTaskCompletion) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *ActivityTaskCompletion) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

func (m *ActivityTaskCompletion) GetResult() *activityresultpb.ActivityResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*ActivityHeartbeat)(nil), "coresdk.ActivityHeartbeat")
	proto.RegisterType((*ActivityTaskCompletion)(nil), "coresdk.ActivityTaskCompletion")
}

func init() { proto.RegisterFile("core_interface.proto", fileDescriptor_891e4aad0ce7d724) }

var fileDescriptor_891e4aad0ce7d724 = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0xbf, 0x4e, 0xc2, 0x50,
	0x14, 0xc6, 0x7b, 0x25, 0x81, 0x50, 0x58, 0xc4, 0x3f, 0x54, 0x8c, 0xc7, 0x86, 0xc5, 0x4e, 0x10,
	0xd1, 0xdd, 0xa8, 0x8b, 0xa3, 0x36, 0xec, 0xcd, 0xa5, 0x3d, 0x90, 0xa6, 0x7f, 0x6e, 0x6d, 0x4f,
	0x25, 0x6c, 0x0e, 0x3e, 0x80, 0x9b, 0xaf, 0xe0, 0xa3, 0x38, 0x32, 0x32, 0x4a, 0x59, 0x1c, 0x79,
	0x04, 0xd3, 0x3f, 0x34, 0x04, 0x47, 0xc7, 0xf3, 0xfd, 0xbe, 0x2f, 0xf7, 0xdc, 0xef, 0xc8, 0x87,
	0xa6, 0x08, 0xd1, 0xb0, 0x7d, 0xc2, 0x70, 0xcc, 0x4d, 0xec, 0x05, 0xa1, 0x20, 0xd1, 0xaa, 0xa5,
	0x6a, 0x64, 0x39, 0x9d, 0x23, 0x6e, 0x92, 0xfd, 0x62, 0xd3, 0xcc, 0x08, 0x31, 0x8a, 0x5d, 0xca,
	0x79, 0xe7, 0xa0, 0x94, 0x89, 0x47, 0x4e, 0x21, 0x36, 0x4d, 0xe1, 0x79, 0xc2, 0x2f, 0xa6, 0x93,
	0xa9, 0x08, 0x9d, 0xb1, 0x2b, 0xa6, 0x46, 0xe6, 0xe5, 0x64, 0x97, 0xa8, 0x5d, 0xa2, 0x34, 0xc1,
	0x7d, 0x2b, 0xfa, 0x93, 0x31, 0x85, 0x17, 0xb8, 0xb8, 0x95, 0x39, 0x9f, 0x08, 0x31, 0x71, 0xb1,
	0x9f, 0x4d, 0xa3, 0x78, 0xdc, 0x27, 0xdb, 0xc3, 0x88, 0xb8, 0x17, 0x14, 0x06, 0xd8, 0x35, 0x58,
	0x71, 0xb8, 0xfd, 0xe8, 0xe9, 0x2e, 0x47, 0x2f, 0xa0, 0x59, 0x0e, 0xbb, 0x6f, 0x4c, 0xde, 0xbf,
	0x2d, 0xbe, 0xf4, 0x80, 0x3c, 0xa4, 0x11, 0x72, 0x6a, 0x9d, 0xc9, 0x72, 0xfa, 0x3d, 0x83, 0x84,
	0x83, 0xbe, 0xc2, 0x54, 0xa6, 0x35, 0xf5, 0x7a, 0xaa, 0x0c, 0x53, 0xa1, 0xc4, 0xcf, 0x31, 0xc6,
	0xa8, 0xec, 0xa9, 0x4c, 0xab, 0xe7, 0xf8, 0x29, 0x15, 0x5a, 0x97, 0x72, 0xcd, 0x42, 0xe2, 0xb6,
	0x1b, 0x29, 0x15, 0xb5, 0xa2, 0x35, 0x06, 0xed, 0x5e, 0xd1, 0x6a, 0xaf, 0x28, 0xea, 0x91, 0xcf,
	0x5c, 0xc1, 0x2d, 0x7d, 0xe3, 0xeb, 0x7e, 0x30, 0xf9, 0x78, 0xb3, 0xc6, 0x90, 0x47, 0xce, 0x7d,
	0xd9, 0xc2, 0x3f, 0x77, 0xb9, 0x91, 0xab, 0xf9, 0xfd, 0x94, 0x8a, 0xca, 0xb4, 0xc6, 0xe0, 0xa2,
	0x5c, 0x65, 0xf7, 0xbe, 0x9b, 0xe7, 0xf5, 0x6c, 0xd4, 0x8b, 0xd8, 0xdd, 0xf5, 0x7c, 0x09, 0xd2,
	0x62, 0x09, 0xd2, 0x7a, 0x09, 0xec, 0x35, 0x01, 0xf6, 0x99, 0x00, 0xfb, 0x4a, 0x80, 0xcd, 0x13,
	0x60, 0xdf, 0x09, 0xb0, 0x9f, 0x04, 0xa4, 0x75, 0x02, 0xec, 0x7d, 0x05, 0xd2, 0x7c, 0x05, 0xd2,
	0x62, 0x05, 0xd2, 0xa8, 0x9a, 0xb5, 0x7b, 0xf5, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x99, 0xc3,
	0xd9, 0x65, 0x02, 0x00, 0x00,
}

func (this *ActivityHeartbeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityHeartbeat)
	if !ok {
		that2, ok := that.(ActivityHeartbeat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	if len(this.Details) != len(that1.Details) {
		return false
	}
	for i := range this.Details {
		if !this.Details[i].Equal(that1.Details[i]) {
			return false
		}
	}
	return true
}
func (this *ActivityTaskCompletion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityTaskCompletion)
	if !ok {
		that2, ok := that.(ActivityTaskCompletion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *ActivityHeartbeat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&coresdk.ActivityHeartbeat{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActivityTaskCompletion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&coresdk.ActivityTaskCompletion{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCoreInterface(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ActivityHeartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityHeartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		for iNdEx := len(m.Details) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Details[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCoreInterface(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintCoreInterface(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintCoreInterface(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivityTaskCompletion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityTaskCompletion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTaskCompletion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCoreInterface(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintCoreInterface(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintCoreInterface(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCoreInterface(dAtA []byte, offset int, v uint64) int {
	offset -= sovCoreInterface(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ActivityHeartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovCoreInterface(uint64(l))
	}
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovCoreInterface(uint64(l))
	}
	if len(m.Details) > 0 {
		for _, e := range m.Details {
			l = e.Size()
			n += 1 + l + sovCoreInterface(uint64(l))
		}
	}
	return n
}

func (m *ActivityTaskCompletion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovCoreInterface(uint64(l))
	}
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovCoreInterface(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovCoreInterface(uint64(l))
	}
	return n
}

func sovCoreInterface(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCoreInterface(x uint64) (n int) {
	return sovCoreInterface(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ActivityHeartbeat) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDetails := "[]*Payload{"
	for _, f := range this.Details {
		repeatedStringForDetails += strings.Replace(fmt.Sprintf("%v", f), "Payload", "commonpb.Payload", 1) + ","
	}
	repeatedStringForDetails += "}"
	s := strings.Join([]string{`&ActivityHeartbeat{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`Details:` + repeatedStringForDetails + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityTaskCompletion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityTaskCompletion{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "ActivityResult", "activityresultpb.ActivityResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCoreInterface(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ActivityHeartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityHeartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityHeartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoreInterface
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreInterface
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, &commonpb.Payload{})
			if err := m.Details[len(m.Details)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCoreInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityTaskCompletion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTaskCompletion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTaskCompletion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoreInterface
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreInterface
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &activityresultpb.ActivityResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCoreInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCoreInterface(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCoreInterface
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoreInterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoreInterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCoreInterface
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCoreInterface
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCoreInterface
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCoreInterface        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCoreInterface          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCoreInterface = fmt.Errorf("proto: unexpected end of group")
)
